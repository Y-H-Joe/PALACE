# -*- coding: utf-8 -*-
"""
Created on Thu Nov 11 15:02:15 2021

@author: Yihang Zhou

Contact: yihangjoe@foxmail.com
         https://github.com/Y-H-Joe/

####============================ discription ==============================####
#================================== input =====================================
#================================== output ====================================
#================================ parameters ==================================
#================================== example ===================================
#================================== warning ===================================
####=======================================================================####
"""
import pandas as pd
from collections import Counter
import matplotlib.pyplot as plt
from sklearn import preprocessing

tgt_toks = ['<unk>', '<pad>', '<bos>', '<eos>', 'C', '(', ')', 'O', 'c', '=', '1', '[C@H]', '[C@@H]', '[O-]', 'n', '2', 'N', 'P', '>', '3', '/', '*', '4', '5', '\\', 'S', '[H+]', '[NH3+]', '[nH]', '[n+]', '[C@]', '[C@@]', '[N+]', '-', '6', '[NH2+]', 'Cl', '[S-2]', 'o', '7', '[Fe+3]', '[NH4+]', '#', '[n-]', '[S@@+]', '[NH+]', '8', '[Fe+2]', '[o+]', 's', '[S@+]', 'Br', '9', '[Fe-2]', 'F', '[Fe-]', '[Cl-]', 'I', '[S+]', '[C-]', '[Co-2]', '[Mg-2]', '[Fe]', '[Co-3]', '[SH-]', '[Se]', '%10', '[As]', '.', '[H]', '[S-]', '[Mg]', '[Fe+]', '[SeH]', '[SH2+]', '[nH+]', '%11', '%12', '[Na+]', '[O+]', '[Fe-3]', '[Br-]', '[PH]', '[O]', '[N]', '[Co-4]', '%16', '%14', '%17', '%15', '[Co+]', '%13', '[Mo]', '[Cu+2]', '[Fe-4]', '%18', '%19', '[S]', '[Cu+]', '[Mn+2]', '[Co]', '[I-]', '[K+]', '%20', '[N-]', '[Mg+2]', '%21', '[S@@]', '[F-]', '[S@]', '[SeH-]', '[Ca+2]', '[Mn+3]', '[Zn+2]', '[Se+]', '[W]', '%22', '[No]', '%23', '[Co+2]', '%24', '[Cd+2]', '%25', '%26', '[Ni+2]', '%27', '%28', '[SH]', '%29', '%30', '%31', '[Hg]', '[Ni-2]', '[N@@H+]', '[CH]', '[C]', '%32', '[Ag+]', '[*-]', '[Cl+]', '[Hg+2]', '[c-]', '[Te]', '[Hg+]', '[Sb]', '[N@@+]', '[Mn]', 'B', '[Na]', '[OH-]', '[N@+]', '[OH2+]', '[Cr+6]', '[Cr]', '[cH-]', '[Pb+2]', '[Cr+3]', '[N@H+]', '[NH]', '[P@]', '[H-]', '[Cl+2]', '[Ni-]', '[I]', '[Se-2]', '[Zn]']
dp = r'../data/fake_sample_for_vocab.txt'
df = pd.read_csv(dp,sep = '\t',header=None)
reagents = [x.split(' ') for x in df[3].tolist()]
products = [x.split(' ') for x in df[4].tolist()]

len_list = [len(x) for x in reagents] + [len(x) for x in products]
len_list_count = Counter(len_list)

# according to the dist plot, we set num_steps to 300
fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
langs = len_list_count.keys()
students = len_list_count.values()
ax.bar(langs,students)
plt.show()

all_ = reagents + products
all_ = [item for sublist in all_ for item in sublist]
tok_dict = Counter(all_)
tok_dict2 = {k: v for k, v in sorted(tok_dict.items(), key=lambda item: item[1])}
tok_num = len(tok_dict2)
# the less frequent tok has higher weight, start from 1
weight_special = [int(tok_num * 0.1),int(tok_num * 0.1),int(tok_num * 1),int(tok_num * 0.3)]
weight_second = []
for t in tgt_toks[4:]:
    for i,k in enumerate(tok_dict2.keys()):
        if t == k:
            weight_second.append(tok_num + 1 - i)

weight = weight_special + weight_second
weight_norm = [x+1 for x in (preprocessing.normalize([weight]) / 10)[0]]
"""
weight_norm:
[1.0013125548047535,
 1.0013125548047535,
 1.013289617398129,
 1.0039376644142604,
 1.0001640693505942,
 1.0003281387011884,
 1.0002461040258912,
 1.0004101733764854,
 1.0004922080517826,
 1.0005742427270796,
 1.0006562774023768,
 1.0007383120776738,
 1.0008203467529708,
 1.000902381428268,
 1.000984416103565,
 1.0010664507788622,
 1.0011484854541592,
 1.0012305201294565,
 1.0013125548047535,
 1.0013945894800507,
 1.0014766241553477,
 1.0015586588306447,
 1.0016406935059419,
 1.0017227281812389,
 1.001804762856536,
 1.001886797531833,
 1.0019688322071303,
 1.0020508668824273,
 1.0021329015577245,
 1.0022149362330215,
 1.0022969709083185,
 1.0023790055836157,
 1.0024610402589127,
 1.00254307493421,
 1.002625109609507,
 1.0027071442848041,
 1.0027891789601011,
 1.0028712136353983,
 1.0029532483106953,
 1.0030352829859923,
 1.0031173176612895,
 1.0031993523365865,
 1.0032813870118837,
 1.0033634216871807,
 1.003445456362478,
 1.003527491037775,
 1.0036095257130722,
 1.0036915603883692,
 1.0037735950636661,
 1.0038556297389634,
 1.0039376644142604,
 1.0040196990895576,
 1.0041017337648546,
 1.0041837684401518,
 1.0042658031154488,
 1.004347837790746,
 1.004429872466043,
 1.00451190714134,
 1.0045939418166372,
 1.0046759764919342,
 1.0047580111672314,
 1.0048400458425284,
 1.0049220805178256,
 1.0050041151931226,
 1.0050861498684198,
 1.0051681845437168,
 1.0052502192190138,
 1.005332253894311,
 1.005414288569608,
 1.0055783579202022,
 1.0054963232449052,
 1.0056603925954994,
 1.0057424272707964,
 1.0058244619460937,
 1.0059064966213906,
 1.0060705659719849,
 1.0059885312966879,
 1.0061526006472818,
 1.006234635322579,
 1.006316669997876,
 1.0064807393484703,
 1.0063987046731733,
 1.0065627740237675,
 1.0067268433743617,
 1.0066448086990645,
 1.0068909127249557,
 1.0068088780496587,
 1.006972947400253,
 1.0070549820755499,
 1.007137016750847,
 1.007219051426144,
 1.0073010861014413,
 1.0073831207767383,
 1.0076292248026295,
 1.0075471901273325,
 1.0074651554520355,
 1.0077112594779267,
 1.0077932941532237,
 1.007875328828521,
 1.007957363503818,
 1.0080393981791151,
 1.0082034675297094,
 1.0081214328544121,
 1.0082855022050063,
 1.0085316062308975,
 1.0084495715556006,
 1.0083675368803033,
 1.0086136409061948,
 1.0086956755814918,
 1.008777710256789,
 1.0090238142826802,
 1.0089417796073832,
 1.008859744932086,
 1.0091058489579772,
 1.0093519529838686,
 1.0092699183085714,
 1.0091878836332744,
 1.0095980570097598,
 1.0095160223344628,
 1.0094339876591656,
 1.009762126360354,
 1.009680091685057,
 1.0099261957109482,
 1.009844161035651,
 1.0102543344121366,
 1.0101722997368394,
 1.0100902650615424,
 1.0100082303862452,
 1.010664507788622,
 1.0105824731133248,
 1.0105004384380278,
 1.0104184037627308,
 1.0103363690874336,
 1.010746542463919,
 1.0111567158404047,
 1.0110746811651075,
 1.0109926464898105,
 1.0109106118145132,
 1.0108285771392163,
 1.0114028198662959,
 1.0113207851909987,
 1.0112387505157017,
 1.011648923892187,
 1.01156688921689,
 1.0114848545415929,
 1.0117309585674843,
 1.0120590972686725,
 1.0119770625933755,
 1.0118950279180785,
 1.0118129932427813,
 1.0121411319439697,
 1.0126333399957523,
 1.0125513053204551,
 1.0124692706451581,
 1.012387235969861,
 1.012305201294564,
 1.0122231666192667,
 1.0127153746710493,
 1.0133716520734262,
 1.013289617398129,
 1.013207582722832,
 1.0131255480475347,
 1.0130435133722377,
 1.0129614786969405,
 1.0128794440216435,
 1.0127974093463463]
"""