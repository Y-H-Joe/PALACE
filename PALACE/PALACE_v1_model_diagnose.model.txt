encoder.embedding.weight shape: torch.Size([166, 64])
tensor([[ 1.0131, -0.2699, -1.8087,  ...,  0.9555,  1.4440,  0.4578],
        [-0.8163,  0.5424, -1.4801,  ..., -0.3295, -0.7485, -1.9519],
        [ 0.0252,  0.2658,  0.8077,  ...,  0.3764, -2.3035,  1.3408],
        ...,
        [ 0.4416,  0.4689,  0.8651,  ...,  0.0217,  0.1627,  1.3577],
        [-0.3841, -0.9819, -2.5312,  ...,  1.4526, -0.4719, -0.4409],
        [-0.0962, -0.0663, -0.2366,  ..., -0.4563,  0.6916, -0.1244]])
tensor([[ 1.0131, -0.2699, -1.8087,  ...,  0.9555,  1.4440,  0.4578],
        [-0.8163,  0.5424, -1.4801,  ..., -0.3295, -0.7485, -1.9519],
        [ 0.0252,  0.2658,  0.8077,  ...,  0.3764, -2.3035,  1.3408],
        ...,
        [ 0.4416,  0.4689,  0.8651,  ...,  0.0217,  0.1627,  1.3577],
        [-0.3841, -0.9819, -2.5312,  ...,  1.4526, -0.4719, -0.4409],
        [-0.0962, -0.0663, -0.2366,  ..., -0.4563,  0.6916, -0.1244]])
##########################################################
encoder.convT1d.weight shape: torch.Size([128, 64, 128, 1])
tensor([[[[ 4.4605e-03],
          [ 2.4847e-03],
          [-6.7410e-03],
          ...,
          [ 8.7538e-03],
          [ 6.9191e-03],
          [ 6.7855e-03]],

         [[ 8.3609e-03],
          [ 6.1654e-03],
          [-1.0268e-02],
          ...,
          [ 8.6033e-03],
          [-6.0671e-03],
          [-5.4442e-03]],

         [[ 3.6057e-03],
          [-5.7877e-03],
          [ 5.6136e-03],
          ...,
          [-9.3764e-03],
          [ 1.0101e-02],
          [ 8.6270e-03]],

         ...,

         [[-8.4316e-04],
          [ 6.4271e-03],
          [-1.2830e-03],
          ...,
          [ 9.5021e-03],
          [ 7.6032e-03],
          [-6.9184e-03]],

         [[ 5.2311e-03],
          [-2.6306e-03],
          [-9.3629e-03],
          ...,
          [-8.2635e-04],
          [-5.5467e-03],
          [ 2.0236e-03]],

         [[ 8.7671e-03],
          [-4.9607e-03],
          [ 2.0980e-03],
          ...,
          [-1.0311e-02],
          [ 9.6376e-03],
          [ 6.3116e-03]]],


        [[[-2.8500e-03],
          [-7.5107e-03],
          [ 1.0552e-02],
          ...,
          [-2.8803e-03],
          [ 5.0438e-03],
          [ 6.9883e-03]],

         [[ 8.0434e-03],
          [ 8.7539e-03],
          [ 1.5741e-03],
          ...,
          [ 7.7278e-03],
          [-2.5814e-04],
          [-2.0990e-03]],

         [[-8.8998e-03],
          [-9.8420e-03],
          [ 2.9135e-03],
          ...,
          [-1.0067e-02],
          [ 8.3275e-03],
          [ 5.9601e-03]],

         ...,

         [[-2.8472e-03],
          [ 6.7936e-03],
          [ 6.7710e-03],
          ...,
          [-1.0254e-02],
          [-7.4689e-03],
          [-1.8573e-03]],

         [[ 9.1470e-03],
          [-9.6764e-03],
          [ 9.0274e-03],
          ...,
          [ 9.9759e-03],
          [-3.9160e-03],
          [-8.3246e-03]],

         [[-1.0240e-02],
          [ 1.5416e-03],
          [-1.2371e-03],
          ...,
          [ 3.5522e-03],
          [ 1.0233e-02],
          [-6.0215e-03]]],


        [[[ 5.6032e-03],
          [-6.7650e-03],
          [-7.5567e-03],
          ...,
          [-5.1901e-03],
          [ 4.9441e-03],
          [-7.8316e-03]],

         [[-1.0175e-02],
          [ 4.7973e-03],
          [-5.9865e-03],
          ...,
          [-3.9189e-03],
          [ 4.8554e-03],
          [ 2.8072e-03]],

         [[-7.8220e-03],
          [ 3.6274e-03],
          [-4.6465e-03],
          ...,
          [-5.9431e-03],
          [ 8.5506e-03],
          [-2.7018e-03]],

         ...,

         [[-5.9768e-03],
          [ 8.4544e-04],
          [ 7.7674e-03],
          ...,
          [-9.3043e-03],
          [-2.3198e-03],
          [ 8.0749e-03]],

         [[ 8.3792e-03],
          [ 5.2959e-03],
          [-7.4429e-03],
          ...,
          [-4.6897e-03],
          [ 2.7359e-03],
          [ 9.5660e-03]],

         [[ 3.5581e-03],
          [-7.8120e-03],
          [-9.2169e-03],
          ...,
          [ 1.0181e-03],
          [-9.5399e-03],
          [ 3.5809e-03]]],


        ...,


        [[[ 3.0947e-03],
          [-8.2014e-04],
          [-8.2670e-03],
          ...,
          [ 2.8861e-03],
          [ 3.0207e-03],
          [-6.8001e-03]],

         [[-4.2764e-03],
          [ 1.2695e-03],
          [ 1.0011e-02],
          ...,
          [ 6.3732e-04],
          [-7.1713e-03],
          [-6.2534e-04]],

         [[ 1.0443e-02],
          [ 1.0790e-02],
          [-1.2332e-03],
          ...,
          [-1.4427e-03],
          [ 7.2963e-03],
          [ 7.4411e-04]],

         ...,

         [[-7.2615e-03],
          [-5.1674e-03],
          [-8.6389e-05],
          ...,
          [-1.1374e-04],
          [ 1.0472e-02],
          [-9.1216e-03]],

         [[-9.3260e-03],
          [ 9.1905e-03],
          [ 9.7397e-03],
          ...,
          [-9.1809e-03],
          [-4.9969e-03],
          [ 7.8946e-03]],

         [[ 2.2601e-03],
          [-8.0738e-03],
          [ 1.0855e-02],
          ...,
          [-4.2956e-03],
          [-4.0367e-03],
          [ 1.0283e-02]]],


        [[[ 6.8593e-03],
          [ 4.7511e-03],
          [-2.5733e-03],
          ...,
          [ 6.6621e-03],
          [ 3.4076e-03],
          [ 6.4303e-03]],

         [[-8.6292e-03],
          [ 2.8987e-03],
          [ 7.1849e-03],
          ...,
          [ 3.4846e-03],
          [ 4.4355e-03],
          [-8.9298e-03]],

         [[-7.5981e-03],
          [ 3.0923e-04],
          [-1.0016e-02],
          ...,
          [-7.1081e-03],
          [ 1.4986e-03],
          [ 7.6169e-03]],

         ...,

         [[-1.9721e-03],
          [-1.0242e-02],
          [ 5.6892e-03],
          ...,
          [ 9.8727e-03],
          [ 3.5447e-03],
          [-1.0632e-02]],

         [[-1.8959e-03],
          [-5.4994e-03],
          [-9.6252e-03],
          ...,
          [-1.5345e-03],
          [ 9.7284e-03],
          [ 9.4751e-03]],

         [[ 5.3603e-03],
          [ 4.8843e-03],
          [ 3.9348e-03],
          ...,
          [ 3.9580e-03],
          [-8.6324e-03],
          [ 3.3136e-03]]],


        [[[-1.1288e-03],
          [ 2.9415e-04],
          [-2.0371e-03],
          ...,
          [ 4.3752e-03],
          [-7.4994e-03],
          [-3.4834e-03]],

         [[-5.8908e-03],
          [ 4.4454e-03],
          [ 7.4391e-03],
          ...,
          [ 6.2813e-03],
          [ 4.1643e-04],
          [ 6.9823e-03]],

         [[ 6.7817e-03],
          [-6.2107e-04],
          [-3.4104e-03],
          ...,
          [-7.5535e-03],
          [-5.1346e-03],
          [ 8.1386e-03]],

         ...,

         [[-1.0499e-02],
          [-1.2499e-03],
          [-6.1525e-03],
          ...,
          [ 5.9799e-03],
          [-5.7660e-03],
          [ 3.1395e-03]],

         [[-7.8296e-03],
          [ 9.5614e-03],
          [-3.3648e-03],
          ...,
          [-4.8545e-03],
          [ 8.2330e-03],
          [ 1.8884e-04]],

         [[-3.1969e-03],
          [-6.1632e-03],
          [-6.5711e-03],
          ...,
          [ 1.0696e-03],
          [-1.0626e-02],
          [-8.0144e-03]]]])
tensor([[[[ 1.4764e-03],
          [ 8.6965e-03],
          [-2.6486e-03],
          ...,
          [ 8.6313e-03],
          [ 1.8245e-02],
          [ 7.0793e-03]],

         [[-7.3269e-03],
          [ 1.6861e-02],
          [-1.5270e-03],
          ...,
          [ 1.5263e-02],
          [-1.7333e-02],
          [-2.8222e-02]],

         [[ 1.5256e-02],
          [-1.7868e-03],
          [ 1.0136e-02],
          ...,
          [-5.5651e-03],
          [ 1.2773e-02],
          [ 9.8064e-03]],

         ...,

         [[-7.5575e-03],
          [ 8.7822e-03],
          [-9.9488e-03],
          ...,
          [-3.0526e-03],
          [ 2.1570e-03],
          [-1.1559e-02]],

         [[ 1.1019e-02],
          [ 1.4222e-02],
          [ 1.9108e-03],
          ...,
          [ 1.3477e-03],
          [-1.9226e-02],
          [-1.7196e-02]],

         [[ 2.5219e-03],
          [-5.8701e-03],
          [ 9.2148e-03],
          ...,
          [-3.9973e-03],
          [ 1.1746e-02],
          [ 1.3161e-02]]],


        [[[ 2.3838e-03],
          [-7.8506e-03],
          [ 1.0776e-02],
          ...,
          [-2.1943e-03],
          [-1.0840e-03],
          [ 7.1619e-03]],

         [[ 4.1075e-03],
          [ 1.5406e-02],
          [ 1.4728e-02],
          ...,
          [ 9.3737e-03],
          [ 3.4506e-03],
          [-5.9621e-03]],

         [[ 4.5714e-03],
          [-3.2548e-03],
          [ 8.3576e-04],
          ...,
          [-7.5314e-03],
          [ 1.2953e-02],
          [ 1.0608e-02]],

         ...,

         [[-4.3063e-03],
          [ 2.2100e-02],
          [ 4.1956e-03],
          ...,
          [-1.0993e-02],
          [-7.0849e-03],
          [-2.6307e-03]],

         [[ 3.4829e-03],
          [-1.2645e-02],
          [ 7.7480e-03],
          ...,
          [ 7.1041e-03],
          [ 1.7472e-03],
          [ 4.6342e-04]],

         [[-1.6326e-02],
          [-7.3724e-03],
          [ 3.9643e-03],
          ...,
          [-1.3877e-05],
          [ 3.1756e-03],
          [-4.9535e-03]]],


        [[[ 8.2067e-03],
          [ 4.8285e-04],
          [-1.1423e-02],
          ...,
          [-1.5251e-03],
          [-5.1561e-03],
          [-1.3988e-02]],

         [[ 4.0555e-04],
          [-1.0160e-02],
          [ 5.8918e-03],
          ...,
          [-2.7484e-03],
          [-1.9087e-03],
          [ 1.3688e-02]],

         [[-9.0440e-03],
          [ 7.0307e-03],
          [-2.8627e-03],
          ...,
          [-5.9716e-03],
          [-4.3985e-03],
          [-2.8731e-04]],

         ...,

         [[-1.3470e-02],
          [ 4.2622e-03],
          [ 1.0300e-02],
          ...,
          [-1.3375e-02],
          [ 2.6718e-04],
          [ 1.6093e-02]],

         [[ 2.0434e-02],
          [ 1.8373e-03],
          [ 3.5045e-03],
          ...,
          [-2.7835e-03],
          [ 6.0841e-03],
          [ 1.3735e-02]],

         [[ 2.8337e-03],
          [-1.1267e-02],
          [ 1.5680e-03],
          ...,
          [ 4.3474e-03],
          [-7.8789e-03],
          [ 3.0591e-03]]],


        ...,


        [[[ 7.4308e-03],
          [ 7.0059e-03],
          [-2.2811e-02],
          ...,
          [ 1.3136e-02],
          [ 1.3287e-02],
          [-4.5049e-03]],

         [[-1.2964e-02],
          [ 1.3667e-02],
          [ 1.4279e-02],
          ...,
          [ 1.3629e-03],
          [ 3.5502e-03],
          [-2.2536e-03]],

         [[ 3.0645e-02],
          [ 4.3928e-03],
          [ 5.1804e-03],
          ...,
          [ 2.0854e-02],
          [ 2.3150e-03],
          [-1.0023e-02]],

         ...,

         [[-9.9489e-03],
          [ 1.2510e-03],
          [ 6.4968e-04],
          ...,
          [-4.6274e-03],
          [ 1.4306e-02],
          [-1.3952e-02]],

         [[-1.5932e-03],
          [ 2.6379e-02],
          [ 2.5172e-02],
          ...,
          [-2.2985e-02],
          [-2.5607e-03],
          [-1.6222e-03]],

         [[-1.0891e-03],
          [-1.1827e-02],
          [ 2.8814e-02],
          ...,
          [ 1.1628e-03],
          [-1.0804e-02],
          [ 2.7001e-02]]],


        [[[-1.0738e-03],
          [ 1.4439e-02],
          [-2.1605e-02],
          ...,
          [ 1.0669e-02],
          [-7.5742e-04],
          [-3.3237e-04]],

         [[-1.1809e-02],
          [-2.3649e-02],
          [ 1.6798e-02],
          ...,
          [ 4.6685e-03],
          [-8.3693e-03],
          [-2.4269e-02]],

         [[ 4.2481e-03],
          [ 2.9996e-02],
          [-2.2708e-02],
          ...,
          [-1.1644e-02],
          [ 1.5191e-02],
          [ 5.6749e-03]],

         ...,

         [[ 8.7217e-03],
          [-1.9297e-02],
          [ 1.2624e-02],
          ...,
          [-1.6976e-02],
          [ 1.0067e-02],
          [-1.3083e-02]],

         [[ 1.2931e-02],
          [ 8.6845e-03],
          [ 4.1203e-03],
          ...,
          [-9.1361e-03],
          [ 4.2473e-03],
          [ 7.5281e-03]],

         [[-4.1815e-03],
          [-1.9670e-03],
          [ 1.0453e-02],
          ...,
          [-1.2278e-02],
          [-1.7639e-02],
          [ 2.7830e-04]]],


        [[[-1.2100e-02],
          [ 1.7753e-02],
          [-2.7818e-02],
          ...,
          [ 7.0753e-03],
          [-1.8852e-03],
          [-6.3428e-03]],

         [[-1.9968e-02],
          [ 9.2337e-03],
          [ 8.4465e-03],
          ...,
          [ 9.6104e-03],
          [ 4.3377e-03],
          [ 1.1623e-02]],

         [[ 1.9686e-02],
          [ 5.9311e-03],
          [ 1.2176e-02],
          ...,
          [ 4.2438e-03],
          [-1.7350e-02],
          [ 1.5444e-03]],

         ...,

         [[-9.0649e-03],
          [ 4.5896e-04],
          [-1.0555e-04],
          ...,
          [-7.2494e-03],
          [ 3.8652e-04],
          [-1.3177e-03]],

         [[ 1.5132e-03],
          [ 3.2244e-02],
          [ 1.5768e-02],
          ...,
          [-2.8324e-02],
          [ 1.1785e-02],
          [-5.6222e-03]],

         [[ 1.4954e-02],
          [-7.3131e-03],
          [ 2.0454e-02],
          ...,
          [ 2.3343e-02],
          [-2.9920e-02],
          [ 4.5658e-03]]]])
##########################################################
encoder.convT1d.bias shape: torch.Size([64])
tensor([ 0.0063,  0.0048,  0.0031, -0.0024,  0.0009,  0.0055, -0.0017,  0.0072,
        -0.0097,  0.0053, -0.0071,  0.0099, -0.0074, -0.0070, -0.0096, -0.0083,
         0.0055,  0.0061, -0.0042, -0.0046, -0.0032,  0.0019,  0.0094, -0.0101,
        -0.0026, -0.0022,  0.0067, -0.0104,  0.0070, -0.0105, -0.0054,  0.0018,
         0.0072, -0.0073,  0.0033, -0.0077,  0.0107, -0.0095, -0.0052, -0.0017,
         0.0010,  0.0049, -0.0005,  0.0101, -0.0040,  0.0099, -0.0088,  0.0014,
         0.0054,  0.0001,  0.0079, -0.0073,  0.0073,  0.0055,  0.0050, -0.0094,
        -0.0025,  0.0051,  0.0101,  0.0049,  0.0110, -0.0002,  0.0045, -0.0032])
tensor([ 8.9010e-03,  1.5130e-02,  1.2332e-02, -8.7442e-03,  7.0038e-03,
        -8.8724e-03, -1.0325e-02,  6.8034e-03, -6.2151e-03,  1.8900e-03,
        -1.3669e-02,  8.3209e-03, -4.3135e-03, -1.5434e-02, -9.8215e-03,
        -1.0920e-02, -3.5963e-03,  1.3811e-03, -1.3201e-02, -5.4958e-03,
         9.3732e-03, -1.9062e-02,  6.7763e-03,  1.8653e-03, -9.1038e-04,
         6.0873e-03,  2.1242e-02, -1.6540e-02, -3.2773e-03, -3.1756e-03,
        -1.9792e-03,  5.6710e-03, -1.0022e-02,  4.6736e-03, -1.0216e-02,
         4.2675e-06,  4.7560e-03, -1.0742e-02,  2.4764e-03, -1.0834e-02,
         1.9502e-03,  8.1008e-03,  2.2121e-04,  1.4166e-03, -8.3852e-03,
         4.5133e-03, -1.5934e-02,  4.8167e-03,  2.3303e-02, -1.0643e-03,
         7.3177e-03, -1.4329e-02,  1.6450e-02,  6.4896e-03,  8.5975e-03,
        -2.0955e-02, -1.2001e-02,  4.5815e-03,  9.3483e-03,  1.0784e-02,
         3.0739e-03, -3.7545e-04,  1.4970e-02, -6.3154e-03])
##########################################################
encoder.prot_encoding.dense.weight shape: torch.Size([64, 64])
tensor([[-0.0545, -0.1623, -0.0433,  ..., -0.1513,  0.1768,  0.1981],
        [ 0.0878,  0.0483,  0.0389,  ..., -0.0335, -0.0038,  0.2012],
        [-0.1767, -0.1688, -0.0676,  ..., -0.0962, -0.0402, -0.0922],
        ...,
        [-0.1319,  0.0261, -0.0810,  ...,  0.0372,  0.1024, -0.1631],
        [-0.0010, -0.1715, -0.1964,  ..., -0.1802,  0.0296,  0.0904],
        [ 0.0664, -0.1285,  0.1062,  ...,  0.1230,  0.0260,  0.0190]])
tensor([[-0.0597, -0.1660, -0.0599,  ..., -0.1575,  0.1676,  0.1935],
        [ 0.0876,  0.0507,  0.0380,  ..., -0.0297, -0.0160,  0.2080],
        [-0.1781, -0.1814, -0.0704,  ..., -0.1081, -0.0478, -0.0938],
        ...,
        [-0.1303,  0.0345, -0.0835,  ...,  0.0337,  0.1005, -0.1735],
        [ 0.0037, -0.1436, -0.2180,  ..., -0.1851,  0.0424,  0.0816],
        [ 0.0776, -0.1210,  0.1431,  ...,  0.1360,  0.0046,  0.0225]])
##########################################################
encoder.prot_encoding.dense.bias shape: torch.Size([64])
tensor([ 0.0048, -0.1100, -0.1113,  0.0752,  0.0169, -0.0748, -0.0928, -0.0239,
        -0.0651, -0.0753, -0.0072, -0.0296,  0.0269,  0.0816, -0.0994, -0.1250,
        -0.0655, -0.0664,  0.0970, -0.1167,  0.0249,  0.0053, -0.0956,  0.0272,
         0.0587,  0.0182,  0.1187, -0.1153, -0.0686,  0.0345, -0.0960,  0.0821,
        -0.0715, -0.0410, -0.1194, -0.0186,  0.0218, -0.0725,  0.0348, -0.0541,
         0.0351,  0.0931,  0.0159, -0.0237,  0.0993, -0.1200, -0.0487, -0.1001,
        -0.0508,  0.0129, -0.0696,  0.0145,  0.0809, -0.1220,  0.1185,  0.0575,
         0.1184, -0.0966,  0.0930, -0.0026, -0.0024,  0.1237,  0.0644, -0.1157])
tensor([ 1.2565e-05, -1.0599e-01, -1.2245e-01,  7.7712e-02,  2.8029e-02,
        -9.5316e-02, -9.8615e-02, -2.2590e-02, -6.2265e-02, -7.2271e-02,
        -7.9357e-03, -3.9077e-02,  3.5069e-02,  7.6494e-02, -1.0504e-01,
        -1.3228e-01, -6.4618e-02, -5.2224e-02,  9.6533e-02, -1.1444e-01,
         1.9331e-02,  5.6752e-03, -8.4306e-02,  8.8684e-03,  5.7447e-02,
         1.9669e-02,  1.2236e-01, -1.2375e-01, -7.4909e-02,  3.6404e-02,
        -9.0815e-02,  7.8521e-02, -6.2589e-02, -2.6526e-02, -1.2227e-01,
        -1.6039e-02,  3.2058e-02, -7.0558e-02,  3.7519e-02, -4.6943e-02,
         2.9607e-02,  9.8564e-02,  2.6029e-02, -2.5708e-02,  9.1258e-02,
        -1.2399e-01, -5.7276e-02, -9.3916e-02, -5.2724e-02,  2.1466e-02,
        -6.0933e-02,  2.2419e-02,  8.1871e-02, -1.2573e-01,  1.1457e-01,
         5.7592e-02,  1.0198e-01, -1.0872e-01,  9.4286e-02, -1.0710e-02,
        -5.9835e-03,  1.2653e-01,  6.5754e-02, -9.8257e-02])
##########################################################
encoder.prot_encoding.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([0.9795, 0.9984, 0.9985, 0.9950, 1.0195, 0.9772, 0.9964, 1.0081, 1.0013,
        0.9989, 1.0081, 1.0093, 1.0041, 0.9973, 1.0009, 1.0014, 1.0002, 1.0036,
        0.9848, 1.0127, 0.9938, 1.0036, 1.0248, 0.9838, 1.0162, 0.9950, 1.0036,
        1.0055, 0.9886, 0.9999, 1.0093, 0.9843, 0.9891, 1.0085, 0.9779, 1.0023,
        1.0244, 0.9897, 1.0029, 1.0083, 0.9882, 1.0313, 0.9924, 1.0044, 1.0059,
        0.9895, 0.9984, 1.0077, 1.0048, 1.0004, 1.0124, 1.0038, 0.9864, 1.0014,
        1.0084, 1.0095, 0.9787, 0.9809, 1.0149, 0.9820, 1.0014, 0.9965, 1.0025,
        1.0148])
##########################################################
encoder.prot_encoding.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 0.0124,  0.0149, -0.0127, -0.0020,  0.0100,  0.0073, -0.0184, -0.0070,
        -0.0098, -0.0087, -0.0019,  0.0044,  0.0212, -0.0075, -0.0180, -0.0137,
        -0.0203,  0.0176,  0.0051,  0.0164,  0.0174, -0.0047,  0.0118, -0.0173,
        -0.0157, -0.0052,  0.0040, -0.0225,  0.0088,  0.0045, -0.0030, -0.0073,
         0.0128, -0.0166, -0.0046, -0.0098, -0.0066,  0.0152,  0.0010, -0.0090,
         0.0152,  0.0129,  0.0142, -0.0373, -0.0057, -0.0045, -0.0182,  0.0071,
        -0.0189, -0.0041,  0.0031,  0.0069, -0.0017,  0.0227,  0.0147, -0.0059,
        -0.0080, -0.0197, -0.0020, -0.0092, -0.0097, -0.0015,  0.0012,  0.0195])
##########################################################
encoder.blks.block0.attention.W_mix_k.weight shape: torch.Size([64, 128])
tensor([[-0.0574, -0.0460, -0.0239,  ..., -0.0438, -0.1111, -0.0500],
        [ 0.0748, -0.0050,  0.0327,  ...,  0.0951, -0.1326,  0.0503],
        [-0.0268,  0.0643,  0.0533,  ...,  0.1589, -0.0607,  0.1225],
        ...,
        [-0.1279, -0.1315, -0.0329,  ...,  0.1166, -0.0078, -0.1351],
        [-0.0430, -0.1038, -0.0360,  ..., -0.1341,  0.1547, -0.0783],
        [ 0.1142,  0.0682,  0.1080,  ...,  0.0021,  0.0992, -0.0812]])
tensor([[-0.0602, -0.0524, -0.0308,  ..., -0.0343, -0.0985, -0.0438],
        [ 0.0886, -0.0170,  0.0576,  ...,  0.1066, -0.1206,  0.0458],
        [-0.0233,  0.0517,  0.0448,  ...,  0.1624, -0.0536,  0.1193],
        ...,
        [-0.1244, -0.1342, -0.0295,  ...,  0.0990, -0.0082, -0.1351],
        [-0.0442, -0.0788, -0.0435,  ..., -0.1424,  0.1603, -0.0856],
        [ 0.1209,  0.0386,  0.1131,  ...,  0.0038,  0.1123, -0.0899]])
##########################################################
encoder.blks.block0.attention.W_mix_q.weight shape: torch.Size([64, 128])
tensor([[ 0.0414, -0.1586,  0.1104,  ...,  0.1764, -0.0103, -0.1420],
        [-0.0930, -0.0684, -0.1210,  ...,  0.1274,  0.0234, -0.1357],
        [ 0.1738,  0.1564,  0.1744,  ..., -0.0037, -0.0906, -0.1503],
        ...,
        [ 0.0940,  0.1017,  0.0451,  ..., -0.1602, -0.1038,  0.0503],
        [ 0.0883, -0.0505, -0.1273,  ...,  0.0269,  0.1583, -0.1376],
        [ 0.1562, -0.0556, -0.1110,  ..., -0.1145,  0.0763,  0.0100]])
tensor([[ 0.0377, -0.1802,  0.1278,  ...,  0.1733,  0.0059, -0.1245],
        [-0.0723, -0.0579, -0.1235,  ...,  0.1398,  0.0243, -0.1229],
        [ 0.1715,  0.1433,  0.1682,  ...,  0.0022, -0.0959, -0.1615],
        ...,
        [ 0.0873,  0.0835,  0.0299,  ..., -0.1704, -0.1089,  0.0615],
        [ 0.0784, -0.0618, -0.1353,  ...,  0.0121,  0.1600, -0.1118],
        [ 0.1533, -0.0561, -0.1245,  ..., -0.1226,  0.0786,  0.0089]])
##########################################################
encoder.blks.block0.attention.W_k.weight shape: torch.Size([64, 64])
tensor([[ 0.1192, -0.0853, -0.0148,  ..., -0.0110,  0.1981,  0.1301],
        [-0.0557, -0.1986, -0.0145,  ..., -0.1921,  0.1659,  0.0673],
        [ 0.0890, -0.1425,  0.2071,  ..., -0.1821,  0.0608,  0.0739],
        ...,
        [-0.1130, -0.2160,  0.1526,  ..., -0.1793,  0.1732,  0.1761],
        [-0.1984, -0.0958,  0.1041,  ...,  0.1110,  0.0159, -0.0596],
        [ 0.1742,  0.1555, -0.0873,  ...,  0.0133, -0.1053, -0.0935]])
tensor([[ 0.1053, -0.0919,  0.0114,  ..., -0.0090,  0.2002,  0.1487],
        [-0.0505, -0.2070, -0.0139,  ..., -0.1859,  0.1688,  0.0671],
        [ 0.0875, -0.1551,  0.2018,  ..., -0.1776,  0.0535,  0.0774],
        ...,
        [-0.1160, -0.2159,  0.1673,  ..., -0.1774,  0.1738,  0.1690],
        [-0.2136, -0.0877,  0.1059,  ...,  0.1101,  0.0360, -0.0369],
        [ 0.1580,  0.1544, -0.0815,  ...,  0.0244, -0.1051, -0.0913]])
##########################################################
encoder.blks.block0.attention.W_q.weight shape: torch.Size([64, 64])
tensor([[-0.0794,  0.1547,  0.1288,  ..., -0.1578, -0.1752,  0.1234],
        [ 0.1834,  0.0501, -0.1151,  ...,  0.2123,  0.0886,  0.1484],
        [ 0.1936, -0.1125,  0.1706,  ..., -0.0810, -0.1331, -0.1291],
        ...,
        [ 0.1179,  0.0721,  0.0944,  ...,  0.0829, -0.1960, -0.1599],
        [ 0.1107, -0.1688, -0.1578,  ...,  0.2073,  0.0207, -0.1125],
        [-0.0656, -0.0820, -0.1681,  ..., -0.0538, -0.0561,  0.1178]])
tensor([[-0.0810,  0.1535,  0.1355,  ..., -0.1322, -0.1724,  0.1165],
        [ 0.1620,  0.0434, -0.1198,  ...,  0.2178,  0.0731,  0.1252],
        [ 0.2033, -0.1355,  0.1638,  ..., -0.0661, -0.1134, -0.1159],
        ...,
        [ 0.1279,  0.0697,  0.0785,  ...,  0.0836, -0.1858, -0.1786],
        [ 0.1055, -0.1461, -0.1408,  ...,  0.1872,  0.0363, -0.1076],
        [-0.0513, -0.0756, -0.1614,  ..., -0.0623, -0.0584,  0.1181]])
##########################################################
encoder.blks.block0.attention.W_v.weight shape: torch.Size([64, 64])
tensor([[ 0.0355,  0.2141,  0.1821,  ..., -0.0009,  0.0243, -0.0275],
        [ 0.1918, -0.0779,  0.0066,  ..., -0.0775,  0.1419, -0.1520],
        [-0.0117,  0.1486, -0.2134,  ...,  0.2072,  0.0881, -0.0331],
        ...,
        [-0.1274, -0.1401,  0.0720,  ...,  0.0411, -0.0629,  0.1324],
        [-0.1158,  0.1685,  0.1310,  ...,  0.0410,  0.1727,  0.1297],
        [ 0.0251, -0.1978, -0.1212,  ..., -0.1931, -0.0019, -0.0654]])
tensor([[ 0.0170,  0.1961,  0.1855,  ...,  0.0048,  0.0357, -0.0589],
        [ 0.1637, -0.1031,  0.0015,  ..., -0.0568,  0.1309, -0.1871],
        [-0.0266,  0.1586, -0.2234,  ...,  0.2019,  0.0942, -0.0413],
        ...,
        [-0.1244, -0.1203,  0.0698,  ...,  0.0459, -0.0439,  0.1502],
        [-0.1090,  0.1570,  0.1346,  ...,  0.0384,  0.1693,  0.1531],
        [ 0.0326, -0.1613, -0.0997,  ..., -0.1918,  0.0030, -0.0445]])
##########################################################
encoder.blks.block0.attention.W_o.weight shape: torch.Size([64, 64])
tensor([[ 4.0360e-02,  1.5881e-01,  5.3884e-02,  ..., -2.8223e-05,
         -6.7224e-02, -1.3505e-01],
        [-1.8535e-01,  1.2250e-02,  1.5185e-01,  ...,  1.6054e-01,
          1.0495e-01,  1.7513e-02],
        [ 1.4018e-01, -9.5420e-02, -2.0063e-01,  ..., -2.0148e-03,
         -2.5205e-02,  9.8308e-02],
        ...,
        [ 1.4345e-01,  1.7008e-01, -1.6107e-01,  ..., -9.1337e-02,
          7.8306e-03, -9.5979e-03],
        [ 1.8112e-01, -5.1125e-02, -1.4416e-01,  ..., -1.7256e-01,
          3.7467e-02, -1.3948e-01],
        [-1.1225e-01, -1.4402e-01, -1.1671e-01,  ..., -5.1933e-02,
          1.0913e-01,  3.9977e-03]])
tensor([[ 0.0427,  0.1454,  0.0402,  ..., -0.0109, -0.0498, -0.1553],
        [-0.1940,  0.0283,  0.1547,  ...,  0.1404,  0.1211,  0.0145],
        [ 0.1382, -0.1275, -0.1983,  ..., -0.0081, -0.0283,  0.1058],
        ...,
        [ 0.1567,  0.1772, -0.1562,  ..., -0.0900,  0.0030, -0.0031],
        [ 0.1755, -0.0462, -0.1565,  ..., -0.1933,  0.0483, -0.1639],
        [-0.1184, -0.1445, -0.1237,  ..., -0.0419,  0.1036,  0.0166]])
##########################################################
encoder.blks.block0.addnorm1.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([0.9716, 1.0110, 1.0070, 0.9983, 1.0072, 0.9984, 0.9838, 0.9863, 1.0009,
        0.9888, 1.0060, 1.0145, 1.0088, 0.9931, 0.9867, 0.9999, 1.0061, 0.9912,
        0.9769, 0.9989, 1.0122, 1.0119, 1.0128, 0.9852, 1.0122, 0.9931, 1.0037,
        1.0026, 0.9909, 1.0110, 0.9967, 0.9938, 0.9889, 1.0045, 0.9608, 1.0038,
        1.0452, 1.0004, 0.9989, 0.9949, 1.0145, 1.0430, 0.9799, 0.9936, 1.0011,
        1.0054, 0.9933, 0.9908, 1.0311, 0.9917, 1.0240, 1.0041, 0.9841, 0.9836,
        1.0100, 0.9909, 0.9874, 1.0019, 0.9984, 0.9708, 1.0098, 0.9858, 0.9946,
        0.9988])
##########################################################
encoder.blks.block0.addnorm1.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-5.8310e-03,  1.1096e-02, -1.5530e-02, -2.9303e-02,  3.8955e-03,
        -1.9176e-03,  9.5039e-03, -1.8400e-02,  2.3716e-02,  1.0374e-02,
         9.5211e-03,  1.6470e-03,  2.5227e-02, -2.2034e-02, -8.7884e-03,
         3.2730e-03, -3.6135e-02,  8.3734e-03, -2.7206e-03, -1.1289e-02,
         5.3615e-04,  1.1165e-02,  1.9940e-02,  8.8682e-03, -5.4038e-03,
         5.9437e-04, -8.8251e-03,  1.0179e-02, -2.3217e-03, -1.6204e-03,
        -5.0766e-03,  3.9609e-02,  9.5961e-03, -2.7715e-03, -9.6824e-03,
         1.4256e-04, -3.7256e-02, -2.8991e-02,  2.6537e-02,  3.1844e-02,
        -5.9495e-03,  2.3227e-02,  1.6381e-03, -7.0588e-03, -1.0677e-02,
         2.3721e-02,  1.3407e-03, -2.3274e-03, -7.5123e-03,  1.1182e-02,
        -5.9725e-04, -1.1317e-02,  1.5850e-02,  2.0228e-02,  1.3337e-02,
        -1.3229e-02,  7.8925e-03, -2.1597e-02, -8.7061e-03, -2.6032e-02,
        -2.3373e-02, -9.1503e-05, -1.2150e-02,  3.2609e-03])
##########################################################
encoder.blks.block0.ffn.dense1.weight shape: torch.Size([32, 64])
tensor([[ 1.0525e-01,  2.3063e-01,  1.9505e-01,  ...,  1.9657e-01,
          2.1184e-02,  8.1618e-02],
        [ 1.2036e-01, -2.3300e-01,  1.3726e-01,  ..., -2.1379e-01,
          9.4026e-02, -2.2273e-01],
        [-7.7303e-03,  8.1492e-02,  1.2709e-02,  ...,  1.0897e-01,
          1.3048e-01,  2.2729e-02],
        ...,
        [-1.5734e-04,  1.0602e-02,  1.0189e-02,  ..., -3.3933e-02,
          1.2911e-01, -1.1044e-02],
        [-2.2495e-01, -1.2108e-01, -1.0171e-01,  ...,  2.4919e-01,
         -2.3213e-01, -3.3389e-02],
        [ 3.6011e-02, -1.4231e-02, -5.2652e-02,  ...,  5.7121e-02,
          8.1106e-02, -1.0914e-01]])
tensor([[ 0.1121,  0.2233,  0.1846,  ...,  0.2062,  0.0149,  0.1037],
        [ 0.1082, -0.2291,  0.1338,  ..., -0.2030,  0.0897, -0.2076],
        [ 0.0011,  0.0678,  0.0221,  ...,  0.1053,  0.1210,  0.0108],
        ...,
        [ 0.0277,  0.0008,  0.0120,  ..., -0.0541,  0.1217, -0.0011],
        [-0.2069, -0.1307, -0.1274,  ...,  0.2648, -0.2289, -0.0269],
        [ 0.0444,  0.0017, -0.0558,  ...,  0.0474,  0.0679, -0.1344]])
##########################################################
encoder.blks.block0.ffn.dense1.bias shape: torch.Size([32])
tensor([-0.1192, -0.1070, -0.0222, -0.1063, -0.0323, -0.0389, -0.0874,  0.1052,
         0.1083,  0.0902, -0.0455,  0.0693,  0.1207,  0.1080, -0.0370, -0.0106,
        -0.1166,  0.0442,  0.0096,  0.0469,  0.0207,  0.0642, -0.1153, -0.0829,
        -0.1040,  0.1115,  0.0376,  0.0642,  0.1011,  0.0614,  0.0865,  0.0445])
tensor([-0.1349, -0.1295, -0.0400, -0.1007, -0.0424, -0.0548, -0.1167,  0.1284,
         0.0896,  0.1131, -0.0616,  0.0531,  0.1083,  0.0908, -0.0438, -0.0110,
        -0.1377,  0.0358,  0.0078,  0.0471,  0.0381,  0.0564, -0.0928, -0.0962,
        -0.1258,  0.1128,  0.0414,  0.0699,  0.1307,  0.0552,  0.1127,  0.0766])
##########################################################
encoder.blks.block0.ffn.dense2.weight shape: torch.Size([64, 32])
tensor([[-0.1141,  0.0927, -0.1074,  ...,  0.1195, -0.1238,  0.1227],
        [-0.1356,  0.0441,  0.1147,  ..., -0.0765, -0.1146,  0.1523],
        [ 0.1221, -0.0746,  0.0178,  ..., -0.1402, -0.2027,  0.1087],
        ...,
        [-0.1686, -0.2471, -0.1698,  ...,  0.0392, -0.1067, -0.0619],
        [-0.0072, -0.2500, -0.0146,  ...,  0.1215,  0.2140, -0.0764],
        [-0.2426,  0.1531, -0.2169,  ..., -0.0736, -0.0711, -0.1494]])
tensor([[-0.1303,  0.0969, -0.0990,  ...,  0.1422, -0.1097,  0.1253],
        [-0.1588,  0.0383,  0.1278,  ..., -0.0793, -0.0909,  0.1450],
        [ 0.1455, -0.0700,  0.0166,  ..., -0.1032, -0.2295,  0.1250],
        ...,
        [-0.1532, -0.2503, -0.1736,  ...,  0.0452, -0.1095, -0.0708],
        [-0.0418, -0.2182,  0.0010,  ...,  0.1182,  0.2291, -0.0666],
        [-0.2689,  0.1599, -0.2087,  ..., -0.0638, -0.0552, -0.1448]])
##########################################################
encoder.blks.block0.ffn.dense2.bias shape: torch.Size([64])
tensor([-0.0978,  0.0098, -0.0156,  0.1474, -0.1618, -0.0664, -0.0037, -0.1726,
         0.1003, -0.0448, -0.1231, -0.1121,  0.1474, -0.1372,  0.1417,  0.1673,
        -0.0608, -0.0379,  0.0234, -0.0083, -0.1471,  0.1712, -0.1613,  0.0364,
        -0.0652, -0.1248,  0.0898, -0.0841,  0.0287, -0.1611, -0.0625, -0.1422,
        -0.1462,  0.0735,  0.0063, -0.0722, -0.0599, -0.1767, -0.1003,  0.1360,
        -0.0971,  0.0915, -0.0799,  0.0056,  0.0060, -0.0038, -0.0570,  0.1540,
         0.0633,  0.0339,  0.0053,  0.0274, -0.0037, -0.0096,  0.0009,  0.1665,
        -0.0308,  0.1111, -0.0109, -0.0125, -0.1161,  0.1493, -0.0933, -0.0686])
tensor([-9.7060e-02,  2.4940e-02, -1.1903e-02,  1.0285e-01, -1.5869e-01,
        -6.4180e-02, -2.9780e-03, -1.9055e-01,  1.1736e-01, -4.6532e-02,
        -1.0564e-01, -1.2963e-01,  1.7515e-01, -1.4648e-01,  1.4832e-01,
         1.6473e-01, -8.7020e-02, -3.1888e-02,  4.7345e-03, -1.3299e-02,
        -1.3943e-01,  1.8244e-01, -1.4203e-01,  5.5308e-02, -4.8785e-02,
        -1.5446e-01,  8.2424e-02, -8.0316e-02,  1.8713e-02, -1.5746e-01,
        -7.5008e-02, -1.2517e-01, -1.3699e-01,  6.5156e-02,  1.5297e-02,
        -6.9471e-02, -1.0076e-01, -1.8885e-01, -8.6043e-02,  1.5226e-01,
        -1.3073e-01,  1.2036e-01, -7.0523e-02, -2.3605e-02,  6.9761e-03,
         7.7235e-03, -5.5317e-02,  1.5827e-01,  7.2204e-02,  3.4029e-02,
         1.1848e-02,  1.0940e-03,  1.2734e-03, -1.6872e-04,  2.7665e-02,
         1.7433e-01, -2.6394e-02,  8.7067e-02, -2.0458e-02, -3.4704e-02,
        -1.3996e-01,  1.4406e-01, -9.3434e-02, -5.5187e-02])
##########################################################
encoder.blks.block0.addnorm2.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([0.9734, 1.0053, 1.0052, 0.9963, 1.0178, 0.9871, 1.0007, 0.9914, 1.0141,
        0.9949, 1.0098, 1.0067, 1.0088, 0.9968, 1.0079, 0.9880, 0.9984, 0.9891,
        0.9887, 0.9922, 0.9946, 1.0084, 1.0291, 1.0073, 0.9987, 0.9956, 1.0093,
        0.9998, 0.9982, 1.0193, 0.9986, 0.9857, 0.9931, 1.0119, 0.9649, 1.0133,
        1.0375, 1.0011, 0.9870, 0.9934, 0.9787, 1.0503, 0.9882, 0.9891, 1.0054,
        0.9976, 0.9885, 0.9900, 0.9942, 0.9905, 1.0143, 0.9935, 0.9947, 0.9864,
        1.0028, 1.0018, 0.9839, 0.9901, 0.9930, 0.9750, 1.0095, 0.9956, 1.0051,
        1.0173])
##########################################################
encoder.blks.block0.addnorm2.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 0.0001,  0.0174,  0.0080, -0.0511,  0.0104, -0.0048, -0.0011, -0.0163,
         0.0237, -0.0005,  0.0134, -0.0228,  0.0205, -0.0047, -0.0005, -0.0110,
        -0.0170,  0.0046, -0.0181, -0.0071,  0.0153,  0.0090,  0.0140,  0.0215,
         0.0273, -0.0357, -0.0107, -0.0017, -0.0065, -0.0098, -0.0045,  0.0024,
         0.0081, -0.0076,  0.0030,  0.0084, -0.0429, -0.0176,  0.0124,  0.0067,
        -0.0338,  0.0362,  0.0080, -0.0289, -0.0017,  0.0130, -0.0005,  0.0068,
         0.0075, -0.0028,  0.0094, -0.0294,  0.0039,  0.0048,  0.0305,  0.0012,
         0.0002, -0.0312, -0.0106, -0.0254, -0.0202, -0.0085, -0.0007,  0.0146])
##########################################################
encoder.blks.block1.attention.W_mix_k.weight shape: torch.Size([64, 128])
tensor([[-0.0488,  0.1358, -0.0148,  ..., -0.0901, -0.1048,  0.0549],
        [ 0.0113, -0.0580,  0.0339,  ..., -0.1711, -0.0990,  0.1719],
        [-0.1673,  0.0476, -0.0674,  ..., -0.0082,  0.0686,  0.0994],
        ...,
        [ 0.1525, -0.0819,  0.0854,  ...,  0.0689,  0.0824,  0.1070],
        [-0.1720,  0.0959, -0.0474,  ...,  0.0204,  0.0807,  0.1251],
        [-0.0852,  0.1439,  0.1225,  ..., -0.0223,  0.0402, -0.1642]])
tensor([[-0.0516,  0.1425, -0.0041,  ..., -0.0808, -0.0972,  0.0376],
        [ 0.0078, -0.0620,  0.0085,  ..., -0.1677, -0.0974,  0.1836],
        [-0.1528,  0.0430, -0.0926,  ...,  0.0026,  0.0681,  0.1284],
        ...,
        [ 0.1553, -0.0585,  0.1078,  ...,  0.0718,  0.0784,  0.1076],
        [-0.1818,  0.0772, -0.0461,  ...,  0.0065,  0.0767,  0.1203],
        [-0.0810,  0.1624,  0.1398,  ..., -0.0239,  0.0548, -0.1552]])
##########################################################
encoder.blks.block1.attention.W_mix_q.weight shape: torch.Size([64, 128])
tensor([[-0.0023, -0.1597, -0.1023,  ...,  0.0996, -0.1636, -0.0240],
        [ 0.1669,  0.1595,  0.1123,  ..., -0.1445,  0.0394,  0.1321],
        [-0.0879, -0.0413, -0.0148,  ...,  0.0933,  0.1653,  0.0611],
        ...,
        [ 0.1030,  0.0703,  0.0934,  ..., -0.1702, -0.1414,  0.1642],
        [-0.0910,  0.0239,  0.1570,  ..., -0.0125,  0.0167,  0.0171],
        [-0.0860,  0.0702, -0.0700,  ...,  0.0476, -0.0101, -0.0380]])
tensor([[ 0.0051, -0.1715, -0.1075,  ...,  0.0980, -0.1749, -0.0383],
        [ 0.1522,  0.1582,  0.1068,  ..., -0.1669,  0.0539,  0.1425],
        [-0.0928, -0.0439, -0.0271,  ...,  0.1003,  0.1429,  0.0577],
        ...,
        [ 0.0891,  0.0764,  0.1066,  ..., -0.1886, -0.1316,  0.1736],
        [-0.0987,  0.0170,  0.1393,  ..., -0.0319,  0.0089,  0.0234],
        [-0.0920,  0.0858, -0.0830,  ...,  0.0492, -0.0269, -0.0482]])
##########################################################
encoder.blks.block1.attention.W_k.weight shape: torch.Size([64, 64])
tensor([[-0.1793,  0.1885,  0.0592,  ..., -0.1061, -0.0051, -0.1816],
        [-0.1460, -0.1098,  0.0918,  ...,  0.1477,  0.1176, -0.0535],
        [ 0.1379,  0.2120, -0.1890,  ..., -0.1758,  0.0161,  0.1707],
        ...,
        [ 0.1915,  0.0354, -0.1692,  ...,  0.0276,  0.1317, -0.1260],
        [-0.0514, -0.0450,  0.1300,  ...,  0.0193, -0.0045, -0.1647],
        [ 0.1594, -0.2029,  0.0424,  ..., -0.0997, -0.1191, -0.0426]])
tensor([[-0.2046,  0.1724,  0.0381,  ..., -0.1026,  0.0028, -0.1978],
        [-0.1284, -0.0970,  0.0878,  ...,  0.1404,  0.1169, -0.0448],
        [ 0.1243,  0.2060, -0.1828,  ..., -0.1878,  0.0258,  0.1675],
        ...,
        [ 0.1730,  0.0403, -0.1601,  ...,  0.0318,  0.1164, -0.1344],
        [-0.0514, -0.0277,  0.1408,  ...,  0.0059,  0.0070, -0.1415],
        [ 0.1564, -0.2009,  0.0332,  ..., -0.0956, -0.1184, -0.0298]])
##########################################################
encoder.blks.block1.attention.W_q.weight shape: torch.Size([64, 64])
tensor([[-0.0071, -0.1376,  0.0777,  ..., -0.0102, -0.0412,  0.0463],
        [-0.0189,  0.0509, -0.0332,  ..., -0.0797,  0.1714, -0.1811],
        [ 0.2049,  0.1459, -0.1221,  ...,  0.1625,  0.0155,  0.1915],
        ...,
        [ 0.1306, -0.2105,  0.0665,  ..., -0.0398, -0.0382,  0.2010],
        [-0.0040, -0.0925, -0.1279,  ...,  0.1030, -0.2111,  0.1313],
        [-0.1983, -0.0639,  0.1044,  ..., -0.0397,  0.1061,  0.2020]])
tensor([[-1.5562e-02, -1.1539e-01,  6.5410e-02,  ..., -6.6134e-05,
         -3.1535e-02,  3.8871e-02],
        [-7.2814e-03,  3.3907e-02, -5.1987e-02,  ..., -7.2563e-02,
          1.6499e-01, -1.7933e-01],
        [ 2.2040e-01,  1.5961e-01, -1.1310e-01,  ...,  1.6711e-01,
          1.7284e-03,  2.0047e-01],
        ...,
        [ 1.4485e-01, -2.1793e-01,  7.4269e-02,  ..., -4.8398e-02,
         -3.0124e-02,  1.9447e-01],
        [-2.3963e-02, -1.0278e-01, -1.2034e-01,  ...,  8.7068e-02,
         -2.0918e-01,  1.2644e-01],
        [-1.8528e-01, -6.3684e-02,  1.1610e-01,  ..., -4.7916e-02,
          1.1090e-01,  1.9558e-01]])
##########################################################
encoder.blks.block1.attention.W_v.weight shape: torch.Size([64, 64])
tensor([[ 0.1429,  0.0374,  0.0600,  ..., -0.1358, -0.0852, -0.1365],
        [-0.1315,  0.0654,  0.1256,  ...,  0.0075,  0.0260, -0.1119],
        [ 0.0824,  0.1272,  0.1098,  ...,  0.2144, -0.0741,  0.1689],
        ...,
        [ 0.1848,  0.0796, -0.1041,  ..., -0.1790, -0.0664,  0.1369],
        [-0.0427, -0.1873,  0.1870,  ...,  0.1181, -0.1399, -0.1580],
        [-0.2026,  0.0794, -0.1334,  ...,  0.0369, -0.1009,  0.0731]])
tensor([[ 0.1447,  0.0505,  0.0531,  ..., -0.1295, -0.1075, -0.1454],
        [-0.1110,  0.0538,  0.1293,  ...,  0.0301,  0.0131, -0.0619],
        [ 0.0623,  0.1286,  0.1100,  ...,  0.1998, -0.0650,  0.1689],
        ...,
        [ 0.1848,  0.0940, -0.0668,  ..., -0.1911, -0.0710,  0.1382],
        [-0.0440, -0.1751,  0.1640,  ...,  0.1177, -0.1620, -0.1763],
        [-0.2355,  0.1025, -0.1215,  ...,  0.0599, -0.0867,  0.0939]])
##########################################################
encoder.blks.block1.attention.W_o.weight shape: torch.Size([64, 64])
tensor([[-0.0587, -0.2024,  0.1880,  ..., -0.1895, -0.0118,  0.2043],
        [ 0.1783, -0.0003,  0.0101,  ..., -0.0803,  0.1730, -0.1972],
        [-0.0214, -0.0520, -0.0047,  ...,  0.2083, -0.0851,  0.1971],
        ...,
        [-0.1938, -0.0954,  0.0928,  ...,  0.1494,  0.1414,  0.0094],
        [ 0.1476, -0.1781, -0.1699,  ...,  0.1610, -0.0709, -0.0652],
        [-0.0315, -0.1697,  0.1461,  ..., -0.0319, -0.1323, -0.2096]])
tensor([[-0.0599, -0.2094,  0.1919,  ..., -0.1872, -0.0117,  0.2170],
        [ 0.1965,  0.0005,  0.0161,  ..., -0.0748,  0.1663, -0.2148],
        [-0.0059, -0.0632, -0.0201,  ...,  0.2032, -0.0770,  0.2184],
        ...,
        [-0.2052, -0.0826,  0.0769,  ...,  0.1606,  0.1550,  0.0212],
        [ 0.1463, -0.1713, -0.1876,  ...,  0.1840, -0.0682, -0.0424],
        [-0.0416, -0.1774,  0.1241,  ..., -0.0240, -0.1247, -0.2047]])
##########################################################
encoder.blks.block1.addnorm1.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([0.9981, 1.0176, 1.0005, 0.9973, 1.0015, 1.0222, 0.9831, 1.0031, 0.9918,
        0.9826, 1.0134, 1.0160, 0.9999, 0.9927, 0.9715, 0.9959, 0.9798, 0.9799,
        0.9980, 1.0104, 0.9780, 1.0130, 1.0004, 0.9875, 1.0005, 1.0101, 0.9973,
        1.0216, 0.9889, 1.0024, 0.9997, 1.0088, 0.9985, 1.0098, 0.9977, 1.0030,
        1.0053, 1.0189, 1.0045, 0.9973, 1.0027, 1.0432, 1.0309, 1.0295, 1.0072,
        1.0107, 1.0049, 0.9975, 1.0164, 1.0035, 0.9712, 0.9920, 0.9958, 0.9665,
        1.0120, 0.9959, 0.9781, 1.0092, 0.9923, 0.9851, 1.0245, 0.9935, 0.9789,
        0.9825])
##########################################################
encoder.blks.block1.addnorm1.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 0.0032,  0.0130,  0.0178, -0.0190,  0.0128,  0.0132,  0.0187,  0.0138,
        -0.0012, -0.0220, -0.0052, -0.0121, -0.0050, -0.0096, -0.0018, -0.0137,
         0.0010,  0.0111,  0.0241,  0.0033,  0.0160,  0.0376,  0.0080, -0.0164,
         0.0037, -0.0171,  0.0062, -0.0186, -0.0109, -0.0133,  0.0076,  0.0119,
        -0.0124,  0.0081,  0.0038, -0.0021, -0.0272,  0.0163, -0.0082, -0.0034,
        -0.0190,  0.0169,  0.0225, -0.0204, -0.0267, -0.0008, -0.0207, -0.0057,
        -0.0201,  0.0196,  0.0096, -0.0095,  0.0162,  0.0069,  0.0049,  0.0170,
        -0.0148, -0.0317, -0.0210, -0.0001, -0.0116,  0.0207,  0.0111,  0.0269])
##########################################################
encoder.blks.block1.ffn.dense1.weight shape: torch.Size([32, 64])
tensor([[ 0.1131,  0.0105, -0.1796,  ..., -0.2097,  0.2121,  0.1391],
        [ 0.1806, -0.1776, -0.2453,  ...,  0.0677,  0.0052,  0.1925],
        [ 0.0438,  0.1288, -0.0088,  ..., -0.0188,  0.1587, -0.0717],
        ...,
        [-0.2442, -0.2013, -0.2271,  ..., -0.0344, -0.2018, -0.1900],
        [ 0.0341, -0.1282, -0.1407,  ..., -0.2182, -0.1682, -0.2296],
        [-0.2017, -0.0048,  0.0651,  ...,  0.2209,  0.0455, -0.0173]])
tensor([[ 0.1090,  0.0017, -0.1891,  ..., -0.2134,  0.2002,  0.1560],
        [ 0.1623, -0.1622, -0.2417,  ...,  0.0505,  0.0120,  0.1961],
        [ 0.0543,  0.1298, -0.0236,  ..., -0.0149,  0.1582, -0.0493],
        ...,
        [-0.2407, -0.1997, -0.1994,  ..., -0.0396, -0.1879, -0.1914],
        [ 0.0414, -0.1101, -0.1339,  ..., -0.2027, -0.1717, -0.2217],
        [-0.1918, -0.0040,  0.0633,  ...,  0.2115,  0.0140, -0.0172]])
##########################################################
encoder.blks.block1.ffn.dense1.bias shape: torch.Size([32])
tensor([-0.0647, -0.0591,  0.0609, -0.0655, -0.0696, -0.0102, -0.0409, -0.0088,
         0.0841,  0.0122,  0.0544, -0.0311,  0.0998,  0.1028,  0.0855,  0.0374,
        -0.1187, -0.0535,  0.0131, -0.0922, -0.0739, -0.0656,  0.0321, -0.0252,
        -0.0995,  0.0691, -0.1137, -0.0268, -0.0580,  0.0681,  0.0820,  0.0596])
tensor([-0.0474, -0.0563,  0.0780, -0.0623, -0.0609, -0.0141, -0.0404, -0.0178,
         0.0851,  0.0051,  0.0344, -0.0329,  0.1021,  0.1034,  0.0867,  0.0423,
        -0.1266, -0.0183,  0.0168, -0.0971, -0.0832, -0.0737,  0.0499, -0.0160,
        -0.0897,  0.0712, -0.1202, -0.0383, -0.0697,  0.0630,  0.0846,  0.0889])
##########################################################
encoder.blks.block1.ffn.dense2.weight shape: torch.Size([64, 32])
tensor([[-0.0291, -0.0993, -0.0075,  ..., -0.0608, -0.1132,  0.1194],
        [ 0.0339, -0.0756,  0.2142,  ..., -0.2280,  0.1421,  0.0570],
        [-0.2254, -0.0441,  0.1274,  ..., -0.2471, -0.2134, -0.0960],
        ...,
        [-0.1325, -0.1007,  0.2471,  ...,  0.2179,  0.1270, -0.1972],
        [ 0.0739,  0.1357, -0.1649,  ..., -0.0233,  0.1964,  0.2205],
        [ 0.2158,  0.2222,  0.1831,  ...,  0.0272, -0.1650, -0.0181]])
tensor([[-0.0335, -0.1180, -0.0044,  ..., -0.0587, -0.1059,  0.1231],
        [ 0.0358, -0.0992,  0.2346,  ..., -0.2244,  0.1347,  0.0552],
        [-0.2510, -0.0477,  0.1183,  ..., -0.2400, -0.2188, -0.0961],
        ...,
        [-0.1214, -0.0830,  0.2383,  ...,  0.2236,  0.1337, -0.1890],
        [ 0.0806,  0.1409, -0.1790,  ..., -0.0262,  0.2219,  0.2101],
        [ 0.2301,  0.2374,  0.2070,  ...,  0.0484, -0.1639,  0.0238]])
##########################################################
encoder.blks.block1.ffn.dense2.bias shape: torch.Size([64])
tensor([-0.0332, -0.0161,  0.1233, -0.1525, -0.1649, -0.0020, -0.1584, -0.0070,
         0.1526,  0.0777, -0.1039, -0.0285, -0.0869,  0.0661, -0.0166,  0.0395,
        -0.1257, -0.1745, -0.1390,  0.0629, -0.1414, -0.1104,  0.0136,  0.1496,
        -0.1226, -0.0239,  0.1752, -0.0952,  0.0045, -0.0161, -0.0599,  0.0621,
         0.0793,  0.1392, -0.0776,  0.1132, -0.0499,  0.0464,  0.0424, -0.1019,
         0.0654,  0.1028, -0.1609,  0.0472, -0.0590, -0.1691,  0.1092, -0.1061,
        -0.0902,  0.1636, -0.0895, -0.1756,  0.1116, -0.0495, -0.1648, -0.1535,
        -0.1308, -0.0248,  0.1057, -0.0568,  0.0932, -0.1639, -0.0994,  0.1518])
tensor([-0.0402, -0.0177,  0.1348, -0.1488, -0.1743, -0.0003, -0.1475,  0.0063,
         0.1571,  0.0467, -0.0921, -0.0161, -0.0926,  0.0734, -0.0282,  0.0265,
        -0.1317, -0.1843, -0.1109,  0.0629, -0.1270, -0.1144,  0.0277,  0.1301,
        -0.1176, -0.0097,  0.1904, -0.1077, -0.0032, -0.0180, -0.0820,  0.0630,
         0.0799,  0.1526, -0.0750,  0.1130, -0.0646,  0.0673,  0.0506, -0.0840,
         0.0399,  0.1157, -0.1603,  0.0304, -0.0829, -0.1590,  0.0778, -0.1158,
        -0.0772,  0.1615, -0.0829, -0.2038,  0.1341, -0.0634, -0.1520, -0.1409,
        -0.1446, -0.0619,  0.0867, -0.0582,  0.0956, -0.1533, -0.1071,  0.1878])
##########################################################
encoder.blks.block1.addnorm2.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0078, 1.0266, 1.0050, 1.0211, 0.9948, 1.0106, 0.9743, 1.0003, 1.0056,
        0.9747, 0.9922, 1.0251, 1.0044, 1.0079, 0.9591, 0.9966, 0.9924, 0.9734,
        1.0031, 0.9996, 0.9937, 0.9845, 0.9956, 0.9791, 1.0020, 1.0194, 1.0125,
        1.0087, 0.9899, 1.0057, 1.0105, 1.0054, 0.9928, 1.0226, 1.0127, 1.0055,
        1.0168, 1.0093, 1.0109, 0.9951, 0.9966, 1.0346, 1.0112, 1.0365, 1.0161,
        1.0039, 0.9864, 1.0138, 0.9990, 0.9896, 0.9884, 0.9952, 0.9896, 0.9644,
        1.0090, 0.9906, 0.9867, 0.9879, 1.0158, 1.0035, 1.0105, 1.0127, 0.9933,
        1.0028])
##########################################################
encoder.blks.block1.addnorm2.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-1.3301e-02, -4.1618e-03,  1.6981e-02, -6.3371e-03, -1.8863e-02,
         3.6515e-03,  1.3840e-02,  8.5411e-03, -5.9818e-03, -2.1851e-02,
         6.5047e-03,  3.4362e-03, -3.4434e-03,  5.2999e-03, -1.1345e-02,
        -3.7717e-04,  5.7889e-03, -1.1913e-02,  2.7303e-02, -5.8814e-04,
         2.3447e-02, -2.7657e-03,  8.9817e-03, -1.2038e-02,  2.7249e-03,
         1.1842e-02,  6.0388e-03, -2.1241e-03, -1.0343e-02,  4.1289e-04,
        -1.8769e-02, -1.8494e-03,  6.0124e-03,  1.2119e-02,  1.1751e-02,
        -1.3038e-02, -1.3112e-02,  1.0605e-02,  1.6623e-02,  1.7302e-02,
        -2.9315e-02,  1.1706e-02,  5.2889e-03, -2.0073e-02, -3.0836e-02,
         6.4979e-03, -2.3467e-02, -8.6845e-03,  2.2600e-05, -5.0011e-03,
         8.1879e-03, -3.2000e-02,  2.1986e-02, -5.2747e-03,  1.5382e-02,
         1.3345e-02, -1.3206e-02, -3.5130e-02, -1.5761e-02,  4.3537e-03,
        -2.6779e-04,  1.7190e-02, -7.0612e-03,  3.0014e-02])
##########################################################
encoder.blks.block2.attention.W_mix_k.weight shape: torch.Size([64, 128])
tensor([[ 0.1629, -0.0310, -0.1555,  ...,  0.0876, -0.0374, -0.1189],
        [ 0.1316,  0.1151,  0.1395,  ..., -0.0838,  0.0261,  0.1255],
        [-0.0183,  0.1029,  0.1160,  ...,  0.1113,  0.1618, -0.0465],
        ...,
        [-0.1548,  0.0351, -0.1122,  ..., -0.1746,  0.0731,  0.0172],
        [-0.1057, -0.1384,  0.0302,  ..., -0.0290,  0.1553,  0.0972],
        [ 0.0804,  0.1043, -0.0247,  ...,  0.0002, -0.1193, -0.0322]])
tensor([[ 0.1487, -0.0303, -0.1449,  ...,  0.0942, -0.0485, -0.0991],
        [ 0.1166,  0.1143,  0.1354,  ..., -0.0850,  0.0465,  0.1371],
        [-0.0147,  0.1023,  0.1155,  ...,  0.1203,  0.1659, -0.0600],
        ...,
        [-0.1535,  0.0319, -0.1243,  ..., -0.1762,  0.0909,  0.0193],
        [-0.1021, -0.1204,  0.0199,  ..., -0.0324,  0.1617,  0.1129],
        [ 0.0712,  0.0988, -0.0198,  ...,  0.0047, -0.1134, -0.0245]])
##########################################################
encoder.blks.block2.attention.W_mix_q.weight shape: torch.Size([64, 128])
tensor([[-0.0710, -0.1550, -0.1133,  ...,  0.0111,  0.1242, -0.1691],
        [ 0.0476, -0.1406,  0.0259,  ...,  0.0298, -0.0273,  0.0094],
        [ 0.1445, -0.0300,  0.1603,  ..., -0.1350, -0.0413, -0.0887],
        ...,
        [ 0.0828, -0.0285,  0.1098,  ..., -0.0386,  0.1162,  0.0501],
        [ 0.1090, -0.0788,  0.1010,  ...,  0.0591,  0.0444, -0.0853],
        [ 0.1524, -0.0984,  0.0790,  ...,  0.0264,  0.0940,  0.1221]])
tensor([[-0.0657, -0.1619, -0.1118,  ...,  0.0187,  0.1158, -0.1707],
        [ 0.0235, -0.1521,  0.0331,  ...,  0.0484, -0.0282, -0.0010],
        [ 0.1365, -0.0308,  0.1860,  ..., -0.1147, -0.0390, -0.0824],
        ...,
        [ 0.1074, -0.0454,  0.0856,  ..., -0.0489,  0.1039,  0.0414],
        [ 0.1059, -0.0815,  0.0701,  ...,  0.0694,  0.0635, -0.0985],
        [ 0.1422, -0.1137,  0.0750,  ...,  0.0133,  0.0971,  0.1314]])
##########################################################
encoder.blks.block2.attention.W_k.weight shape: torch.Size([64, 64])
tensor([[-0.1668, -0.0704,  0.0500,  ..., -0.0611, -0.1904, -0.0284],
        [-0.1120, -0.1169, -0.0379,  ...,  0.1091,  0.1987,  0.1237],
        [ 0.1052, -0.1660,  0.1423,  ...,  0.1121, -0.1101,  0.1438],
        ...,
        [ 0.0191,  0.1775, -0.1520,  ..., -0.2103,  0.1828, -0.1166],
        [-0.1988, -0.1772,  0.0834,  ...,  0.0195, -0.2044,  0.0522],
        [-0.1279,  0.1956,  0.0307,  ..., -0.0115, -0.2094,  0.1847]])
tensor([[-0.1726, -0.0837,  0.0298,  ..., -0.0720, -0.1998, -0.0193],
        [-0.1273, -0.1562, -0.0484,  ...,  0.1054,  0.2049,  0.1245],
        [ 0.0975, -0.1611,  0.1429,  ...,  0.0964, -0.1213,  0.1443],
        ...,
        [ 0.0046,  0.1826, -0.1744,  ..., -0.1932,  0.1719, -0.1080],
        [-0.2259, -0.1686,  0.0914,  ...,  0.0032, -0.1988,  0.0556],
        [-0.1049,  0.1667,  0.0373,  ...,  0.0104, -0.2043,  0.1667]])
##########################################################
encoder.blks.block2.attention.W_q.weight shape: torch.Size([64, 64])
tensor([[ 0.0270, -0.0470,  0.0670,  ...,  0.1332, -0.1217,  0.1113],
        [-0.0299, -0.1345, -0.1970,  ...,  0.0016,  0.0805,  0.0700],
        [-0.2094, -0.1654, -0.0281,  ..., -0.2144,  0.2065, -0.2122],
        ...,
        [ 0.0100, -0.1006, -0.0063,  ...,  0.2122, -0.1412, -0.0998],
        [-0.2037, -0.1727, -0.0874,  ...,  0.1372,  0.1991,  0.0527],
        [-0.0065, -0.1384,  0.0027,  ...,  0.0716, -0.1877, -0.0375]])
tensor([[ 0.0133, -0.0593,  0.0667,  ...,  0.1237, -0.1302,  0.0956],
        [-0.0309, -0.1182, -0.1947,  ...,  0.0144,  0.0815,  0.0658],
        [-0.1816, -0.1728, -0.0349,  ..., -0.2204,  0.1918, -0.2103],
        ...,
        [ 0.0016, -0.0846, -0.0256,  ...,  0.2204, -0.1314, -0.0929],
        [-0.2384, -0.1812, -0.0747,  ...,  0.1455,  0.1863,  0.0545],
        [-0.0013, -0.1766,  0.0159,  ...,  0.0767, -0.2011, -0.0688]])
##########################################################
encoder.blks.block2.attention.W_v.weight shape: torch.Size([64, 64])
tensor([[ 0.1462, -0.1336, -0.1590,  ...,  0.0662,  0.1271,  0.0825],
        [ 0.0273, -0.0847, -0.0378,  ..., -0.1452, -0.1058,  0.0251],
        [ 0.2042, -0.0938,  0.0927,  ..., -0.0748, -0.1532,  0.0507],
        ...,
        [-0.1985, -0.0415,  0.0024,  ..., -0.0906,  0.0252,  0.0208],
        [-0.0784, -0.1324, -0.1310,  ...,  0.0469,  0.1638, -0.0826],
        [-0.0702,  0.0415,  0.1105,  ...,  0.1089,  0.0464, -0.1732]])
tensor([[ 0.1516, -0.1259, -0.1488,  ...,  0.0551,  0.1511,  0.0911],
        [ 0.0242, -0.0817, -0.0416,  ..., -0.1562, -0.0688,  0.0471],
        [ 0.2019, -0.0762,  0.1031,  ..., -0.0503, -0.1509,  0.0204],
        ...,
        [-0.1983, -0.0367,  0.0086,  ..., -0.1158,  0.0400,  0.0045],
        [-0.0692, -0.1237, -0.1470,  ...,  0.0411,  0.1487, -0.0856],
        [-0.0806,  0.0513,  0.1053,  ...,  0.1259,  0.0756, -0.1887]])
##########################################################
encoder.blks.block2.attention.W_o.weight shape: torch.Size([64, 64])
tensor([[ 0.1718, -0.0906,  0.1161,  ..., -0.1994, -0.1679, -0.0895],
        [ 0.1725, -0.1247,  0.0467,  ..., -0.0983,  0.1437, -0.0849],
        [-0.1800,  0.1943,  0.0783,  ...,  0.1976, -0.0623,  0.0683],
        ...,
        [ 0.1217,  0.0391,  0.1201,  ..., -0.0879,  0.0108,  0.0366],
        [-0.1177, -0.0274,  0.0518,  ..., -0.0197, -0.1705,  0.1055],
        [-0.0047,  0.0500, -0.2141,  ...,  0.1964,  0.0944,  0.0749]])
tensor([[ 0.1594, -0.1053,  0.1111,  ..., -0.2172, -0.1529, -0.0935],
        [ 0.1560, -0.0981,  0.0321,  ..., -0.1037,  0.1210, -0.1025],
        [-0.1795,  0.1825,  0.0808,  ...,  0.1945, -0.0651,  0.0667],
        ...,
        [ 0.1349,  0.0796,  0.1207,  ..., -0.0912,  0.0072,  0.0251],
        [-0.1264, -0.0311,  0.0455,  ..., -0.0192, -0.1597,  0.0841],
        [-0.0035,  0.0524, -0.2132,  ...,  0.1920,  0.0633,  0.0722]])
##########################################################
encoder.blks.block2.addnorm1.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([0.9882, 1.0090, 1.0028, 1.0116, 0.9916, 1.0082, 0.9839, 0.9899, 1.0008,
        0.9875, 1.0161, 1.0087, 1.0094, 1.0000, 1.0021, 1.0121, 1.0019, 1.0456,
        0.9824, 1.0022, 0.9915, 1.0078, 1.0098, 0.9818, 1.0139, 0.9718, 0.9809,
        1.0026, 0.9988, 1.0128, 1.0027, 1.0092, 0.9813, 0.9922, 1.0045, 0.9877,
        1.0052, 1.0099, 0.9994, 1.0120, 0.9991, 1.0036, 0.9814, 1.0088, 0.9836,
        1.0032, 1.0097, 0.9826, 0.9839, 0.9933, 1.0100, 0.9833, 1.0286, 1.0091,
        1.0025, 0.9949, 0.9847, 1.0030, 1.0118, 0.9916, 1.0026, 1.0125, 1.0078,
        0.9729])
##########################################################
encoder.blks.block2.addnorm1.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 0.0050,  0.0191, -0.0052,  0.0248, -0.0020,  0.0149,  0.0255, -0.0264,
        -0.0254, -0.0262, -0.0040,  0.0033, -0.0203, -0.0040,  0.0178, -0.0366,
        -0.0084, -0.0183,  0.0263, -0.0260,  0.0161, -0.0230,  0.0001,  0.0120,
        -0.0253, -0.0083, -0.0105, -0.0033, -0.0186, -0.0007, -0.0024,  0.0295,
        -0.0070,  0.0026,  0.0033,  0.0398,  0.0041,  0.0098, -0.0214,  0.0239,
        -0.0026,  0.0189,  0.0176,  0.0119, -0.0148, -0.0011, -0.0365, -0.0084,
        -0.0019,  0.0038,  0.0043, -0.0151, -0.0051, -0.0047,  0.0238, -0.0074,
        -0.0167,  0.0008, -0.0244, -0.0387,  0.0359,  0.0164,  0.0185, -0.0130])
##########################################################
encoder.blks.block2.ffn.dense1.weight shape: torch.Size([32, 64])
tensor([[ 0.1127,  0.0416,  0.2036,  ...,  0.2324, -0.1195,  0.1967],
        [ 0.0100, -0.0326,  0.1852,  ...,  0.0229, -0.0009, -0.1095],
        [ 0.2473, -0.0093,  0.0852,  ..., -0.0311, -0.1101, -0.1894],
        ...,
        [-0.0203,  0.0443, -0.1325,  ..., -0.0717, -0.1227, -0.2487],
        [ 0.0768, -0.0880, -0.2096,  ...,  0.1625, -0.1431, -0.0716],
        [-0.0730,  0.0285, -0.1108,  ..., -0.2195,  0.0486, -0.0525]])
tensor([[ 0.1347,  0.0744,  0.1863,  ...,  0.2647, -0.1018,  0.1930],
        [ 0.0175, -0.0147,  0.2035,  ...,  0.0075, -0.0080, -0.1280],
        [ 0.2466, -0.0144,  0.0877,  ..., -0.0133, -0.0932, -0.1995],
        ...,
        [-0.0340,  0.0518, -0.1543,  ..., -0.0755, -0.1159, -0.2393],
        [ 0.0857, -0.0689, -0.2395,  ...,  0.1593, -0.1483, -0.0812],
        [-0.0491,  0.0353, -0.1208,  ..., -0.2387,  0.0275, -0.0627]])
##########################################################
encoder.blks.block2.ffn.dense1.bias shape: torch.Size([32])
tensor([ 0.1069,  0.0715, -0.0294, -0.0517, -0.0137,  0.0672,  0.1222,  0.0682,
         0.0803, -0.0882,  0.1065, -0.0521,  0.0294,  0.0064, -0.1129,  0.0587,
        -0.1096,  0.0199, -0.0714,  0.0259,  0.1221,  0.0183,  0.0581,  0.0296,
        -0.0542, -0.0997,  0.0184, -0.0843, -0.0357, -0.0319,  0.0285, -0.0962])
tensor([ 0.1238,  0.0482, -0.0606, -0.0482, -0.0247,  0.0916,  0.1257,  0.0555,
         0.0772, -0.1171,  0.1168, -0.0527,  0.0151,  0.0230, -0.1347,  0.0737,
        -0.1277,  0.0546, -0.0713,  0.0491,  0.1193,  0.0271,  0.0679,  0.0352,
        -0.0623, -0.1076,  0.0443, -0.0702,  0.0053, -0.0332,  0.0469, -0.0758])
##########################################################
encoder.blks.block2.ffn.dense2.weight shape: torch.Size([64, 32])
tensor([[ 0.1456,  0.0662, -0.2020,  ...,  0.1518,  0.1059, -0.1063],
        [ 0.0725, -0.0614, -0.1042,  ..., -0.2124, -0.0381,  0.1999],
        [ 0.2258, -0.1695, -0.2128,  ..., -0.2129, -0.1558, -0.2252],
        ...,
        [-0.0629, -0.1673,  0.0115,  ...,  0.0617, -0.0578,  0.1458],
        [ 0.1759,  0.0842, -0.2371,  ..., -0.2299, -0.0412,  0.1572],
        [-0.1132,  0.2226,  0.0548,  ..., -0.0064,  0.0495,  0.0387]])
tensor([[ 0.1370,  0.0779, -0.2026,  ...,  0.1427,  0.0859, -0.0707],
        [ 0.0904, -0.0512, -0.0972,  ..., -0.2197, -0.0383,  0.2130],
        [ 0.2365, -0.1285, -0.1959,  ..., -0.2202, -0.1724, -0.2021],
        ...,
        [-0.0698, -0.1559, -0.0014,  ...,  0.0565, -0.0665,  0.1600],
        [ 0.1795,  0.0904, -0.2032,  ..., -0.2116, -0.0352,  0.1536],
        [-0.1069,  0.2047,  0.0305,  ..., -0.0128,  0.0443,  0.0245]])
##########################################################
encoder.blks.block2.ffn.dense2.bias shape: torch.Size([64])
tensor([-0.1326, -0.0541,  0.0833, -0.0197,  0.0701,  0.1117, -0.0163,  0.1521,
        -0.1248, -0.0285, -0.1180, -0.0933,  0.0167, -0.0051,  0.1397, -0.1736,
         0.0727,  0.0609,  0.0563, -0.1515, -0.0819,  0.0881, -0.0011, -0.1373,
         0.0557,  0.1175, -0.1343,  0.1634, -0.0198, -0.0502, -0.0657,  0.1378,
         0.1194, -0.1013, -0.0786,  0.0811,  0.1642, -0.0419, -0.0537,  0.0185,
        -0.1270,  0.0377,  0.1038,  0.0678,  0.0604, -0.0935,  0.1429, -0.1287,
        -0.1308, -0.1480,  0.1590, -0.0940,  0.1337, -0.0896,  0.1002, -0.1271,
         0.1683,  0.1099,  0.0089, -0.0695, -0.0696,  0.1062, -0.0442, -0.0878])
tensor([-0.1526, -0.0632,  0.1021,  0.0050,  0.0624,  0.1423,  0.0114,  0.1569,
        -0.1605, -0.0338, -0.1441, -0.0939, -0.0056, -0.0007,  0.1513, -0.2099,
         0.0749,  0.0371,  0.0871, -0.1769, -0.0950,  0.0723,  0.0023, -0.1252,
         0.0307,  0.1238, -0.1273,  0.1603, -0.0283, -0.0488, -0.0864,  0.1583,
         0.1379, -0.1108, -0.0726,  0.1102,  0.1693, -0.0506, -0.0865,  0.0630,
        -0.1340,  0.0555,  0.1207,  0.0948,  0.0653, -0.0939,  0.1108, -0.1264,
        -0.1409, -0.1519,  0.1653, -0.1075,  0.1265, -0.0918,  0.1092, -0.1304,
         0.1550,  0.1121, -0.0060, -0.0581, -0.0450,  0.1057, -0.0249, -0.1119])
##########################################################
encoder.blks.block2.addnorm2.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([0.9864, 1.0090, 1.0095, 1.0064, 0.9919, 1.0030, 0.9733, 1.0036, 0.9906,
        0.9858, 1.0284, 1.0367, 1.0162, 0.9810, 1.0071, 1.0128, 1.0154, 1.0210,
        0.9722, 1.0037, 1.0061, 0.9861, 1.0179, 1.0039, 0.9993, 0.9756, 0.9708,
        1.0113, 1.0116, 1.0018, 1.0139, 0.9783, 1.0056, 0.9960, 0.9726, 0.9941,
        0.9948, 0.9956, 1.0058, 1.0203, 0.9883, 0.9764, 0.9796, 1.0178, 1.0013,
        1.0105, 1.0076, 0.9895, 1.0107, 1.0108, 1.0000, 0.9681, 1.0289, 1.0128,
        1.0108, 0.9886, 0.9797, 1.0159, 1.0063, 1.0002, 1.0097, 0.9849, 1.0184,
        0.9839])
##########################################################
encoder.blks.block2.addnorm2.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-1.6112e-02, -1.2832e-02,  1.7039e-02,  1.5624e-02, -9.0216e-03,
         2.8274e-02,  2.9155e-02,  5.6326e-03, -2.9432e-02, -9.9931e-03,
        -1.8670e-02, -4.4278e-03, -2.9381e-02,  1.5133e-03,  1.5364e-02,
        -4.0396e-02,  7.4254e-03, -2.0417e-02,  3.0035e-02, -2.6122e-02,
        -1.1210e-02, -1.7502e-02,  3.5806e-03,  1.3572e-02, -2.0624e-02,
         6.7568e-03, -2.2360e-05, -7.5145e-03, -2.2416e-02,  1.8904e-03,
        -1.7589e-02,  1.6906e-02,  1.9567e-02,  2.0121e-04,  4.8576e-03,
         3.5727e-02, -7.7781e-04, -8.7685e-03, -2.8322e-02,  3.9121e-02,
        -1.6045e-02,  1.3278e-02,  1.8664e-02,  2.7265e-02,  6.4197e-03,
        -1.9690e-03, -2.6454e-02, -9.9349e-04, -1.0139e-02, -4.3186e-03,
         3.0144e-03, -1.4079e-02, -6.5499e-03, -2.3363e-03,  1.5121e-02,
        -3.5204e-03, -1.3583e-02,  4.6929e-03, -1.8983e-02,  1.1399e-02,
         1.9503e-02,  1.6521e-03,  1.1189e-02, -2.3777e-02])
##########################################################
encoder.blks.block3.attention.W_mix_k.weight shape: torch.Size([64, 128])
tensor([[-0.0254, -0.1548, -0.0013,  ..., -0.0750, -0.1526, -0.1236],
        [-0.0825, -0.0288,  0.0822,  ..., -0.0782, -0.1450, -0.0770],
        [-0.0803, -0.0872, -0.1421,  ...,  0.0442,  0.0796, -0.1331],
        ...,
        [-0.0811,  0.0426, -0.1434,  ...,  0.1473, -0.1384, -0.1548],
        [ 0.0919, -0.1623,  0.0513,  ...,  0.0557,  0.0912, -0.1412],
        [ 0.1370,  0.1283,  0.1124,  ...,  0.0087, -0.0573,  0.0114]])
tensor([[-0.0163, -0.1361,  0.0289,  ..., -0.0649, -0.1826, -0.1054],
        [-0.0732, -0.0314,  0.0993,  ..., -0.0934, -0.1459, -0.0866],
        [-0.0600, -0.1005, -0.1345,  ...,  0.0346,  0.0858, -0.1452],
        ...,
        [-0.0800,  0.0388, -0.1403,  ...,  0.1441, -0.1208, -0.1310],
        [ 0.1066, -0.1698,  0.0619,  ...,  0.0324,  0.1217, -0.1218],
        [ 0.1100,  0.1362,  0.0834,  ..., -0.0026, -0.0356, -0.0243]])
##########################################################
encoder.blks.block3.attention.W_mix_q.weight shape: torch.Size([64, 128])
tensor([[ 0.0565, -0.1345,  0.0617,  ..., -0.1517, -0.0087, -0.1480],
        [-0.1451,  0.1132, -0.1613,  ...,  0.0562,  0.0051, -0.0264],
        [ 0.1591, -0.1283, -0.0750,  ...,  0.0324,  0.0242,  0.0210],
        ...,
        [ 0.0778, -0.1337,  0.1483,  ...,  0.1471,  0.1045,  0.1551],
        [-0.1310,  0.1136, -0.1400,  ..., -0.1481, -0.1117, -0.1171],
        [-0.0697, -0.0587, -0.0116,  ...,  0.0113,  0.0007, -0.0377]])
tensor([[ 0.0817, -0.1358,  0.0392,  ..., -0.1507,  0.0113, -0.1505],
        [-0.1329,  0.1269, -0.1506,  ...,  0.0556, -0.0116, -0.0379],
        [ 0.1546, -0.1353, -0.0659,  ..., -0.0276,  0.0395,  0.0651],
        ...,
        [ 0.1016, -0.1184,  0.1279,  ...,  0.1615,  0.1147,  0.1477],
        [-0.1156,  0.1383, -0.1432,  ..., -0.1351, -0.0839, -0.1375],
        [-0.0931, -0.0733, -0.0163,  ...,  0.0205, -0.0322, -0.0274]])
##########################################################
encoder.blks.block3.attention.W_k.weight shape: torch.Size([64, 64])
tensor([[ 0.1960, -0.0895,  0.1074,  ...,  0.1059, -0.0550, -0.0878],
        [ 0.0472,  0.1155,  0.1070,  ..., -0.1661, -0.1525,  0.0513],
        [ 0.1162, -0.1442,  0.0236,  ...,  0.1653,  0.0753, -0.1948],
        ...,
        [ 0.1335,  0.1909, -0.1439,  ..., -0.0361,  0.0967,  0.1649],
        [ 0.1852, -0.0010,  0.1747,  ...,  0.1434,  0.1613, -0.1377],
        [-0.0369,  0.1995,  0.0920,  ..., -0.1703,  0.1407, -0.0970]])
tensor([[ 0.1592, -0.0722,  0.1019,  ...,  0.0937, -0.0606, -0.0939],
        [ 0.0557,  0.1186,  0.0854,  ..., -0.1968, -0.1627,  0.0521],
        [ 0.1469, -0.1447,  0.0067,  ...,  0.1623,  0.0590, -0.2162],
        ...,
        [ 0.1026,  0.2048, -0.1238,  ..., -0.0271,  0.0919,  0.1524],
        [ 0.1953, -0.0177,  0.1739,  ...,  0.1471,  0.1675, -0.1152],
        [-0.0469,  0.1989,  0.0893,  ..., -0.1720,  0.1335, -0.0859]])
##########################################################
encoder.blks.block3.attention.W_q.weight shape: torch.Size([64, 64])
tensor([[ 0.1089,  0.0903,  0.0318,  ..., -0.1715,  0.0398,  0.1981],
        [ 0.1134,  0.2014,  0.1012,  ..., -0.0545, -0.0454,  0.1229],
        [ 0.0448,  0.1441, -0.0288,  ...,  0.0942,  0.0320, -0.1698],
        ...,
        [ 0.1086,  0.0605,  0.2132,  ...,  0.1033, -0.1603, -0.0345],
        [-0.0968, -0.0440,  0.0700,  ...,  0.0357,  0.0668, -0.1193],
        [ 0.2006, -0.0379, -0.0915,  ..., -0.0051,  0.0077, -0.1748]])
tensor([[ 0.1027,  0.0721,  0.0179,  ..., -0.1623,  0.0745,  0.2062],
        [ 0.1356,  0.1901,  0.0854,  ..., -0.0679, -0.0224,  0.1400],
        [ 0.0265,  0.1430, -0.0226,  ...,  0.0894,  0.0644, -0.1718],
        ...,
        [ 0.1201,  0.0369,  0.2166,  ...,  0.0939, -0.1698, -0.0095],
        [-0.1229, -0.0137,  0.0479,  ...,  0.0587,  0.0999, -0.1359],
        [ 0.1896, -0.0517, -0.0661,  ...,  0.0240,  0.0143, -0.1603]])
##########################################################
encoder.blks.block3.attention.W_v.weight shape: torch.Size([64, 64])
tensor([[ 0.1449,  0.0824,  0.0545,  ..., -0.0364, -0.1395, -0.1891],
        [ 0.1940,  0.1411,  0.0636,  ...,  0.0168,  0.1816,  0.0724],
        [-0.0147,  0.1531,  0.0057,  ..., -0.0883,  0.0762, -0.1801],
        ...,
        [ 0.0428, -0.1662,  0.0256,  ...,  0.1033, -0.1643, -0.1537],
        [-0.0508,  0.0868, -0.1227,  ...,  0.1254, -0.1869,  0.0050],
        [ 0.1263, -0.1487,  0.0059,  ..., -0.0804, -0.1821,  0.0254]])
tensor([[ 0.1386,  0.0730,  0.0636,  ..., -0.0489, -0.1424, -0.1901],
        [ 0.1740,  0.1469,  0.0638,  ...,  0.0179,  0.1476,  0.0470],
        [ 0.0213,  0.1601,  0.0059,  ..., -0.0975,  0.0712, -0.1744],
        ...,
        [ 0.0166, -0.1562,  0.0398,  ...,  0.1141, -0.1982, -0.1776],
        [-0.0419,  0.0644, -0.1110,  ...,  0.1382, -0.1509,  0.0045],
        [ 0.1266, -0.1545, -0.0400,  ..., -0.1109, -0.1637,  0.0341]])
##########################################################
encoder.blks.block3.attention.W_o.weight shape: torch.Size([64, 64])
tensor([[ 0.0253, -0.0009,  0.0784,  ..., -0.1371,  0.1051,  0.0688],
        [-0.0212,  0.0808, -0.0634,  ...,  0.1010, -0.1605,  0.1224],
        [-0.0336, -0.1642,  0.1046,  ..., -0.0585, -0.0172, -0.0313],
        ...,
        [-0.0681,  0.1877, -0.0993,  ..., -0.1622, -0.1013,  0.1274],
        [ 0.2106,  0.0120,  0.2151,  ...,  0.1441, -0.0203,  0.1644],
        [ 0.1110,  0.0327,  0.0614,  ...,  0.1861,  0.1396, -0.1983]])
tensor([[ 0.0517,  0.0295,  0.1270,  ..., -0.1391,  0.1271,  0.0566],
        [-0.0408,  0.0681, -0.0716,  ...,  0.0893, -0.1623,  0.1377],
        [-0.0530, -0.1510,  0.0990,  ..., -0.0655, -0.0337, -0.0225],
        ...,
        [-0.0786,  0.2046, -0.0670,  ..., -0.1622, -0.1117,  0.1240],
        [ 0.2324, -0.0094,  0.2330,  ...,  0.1605, -0.0280,  0.1540],
        [ 0.1121,  0.0068,  0.0667,  ...,  0.1954,  0.1191, -0.1965]])
##########################################################
encoder.blks.block3.addnorm1.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([0.9893, 0.9862, 0.9868, 0.9756, 1.0359, 1.0177, 0.9763, 1.0068, 0.9700,
        0.9717, 1.0183, 0.9791, 0.9917, 1.0107, 0.9902, 0.9908, 1.0100, 1.0005,
        1.0178, 1.0069, 1.0116, 0.9957, 1.0029, 1.0164, 1.0018, 1.0029, 0.9954,
        0.9858, 0.9769, 1.0123, 0.9862, 1.0160, 0.9969, 1.0082, 1.0148, 0.9995,
        0.9776, 1.0039, 1.0086, 0.9947, 1.0073, 1.0061, 0.9894, 0.9734, 1.0028,
        1.0155, 1.0161, 0.9803, 1.0001, 1.0318, 1.0036, 0.9984, 1.0214, 0.9794,
        1.0437, 1.0305, 0.9856, 1.0009, 1.0168, 1.0005, 0.9732, 1.0166, 1.0327,
        0.9968])
##########################################################
encoder.blks.block3.addnorm1.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 0.0292,  0.0090,  0.0064, -0.0268, -0.0276,  0.0133,  0.0275, -0.0024,
        -0.0069,  0.0230, -0.0080, -0.0341, -0.0024, -0.0181, -0.0231,  0.0035,
        -0.0125,  0.0132,  0.0230, -0.0080, -0.0106, -0.0347, -0.0248,  0.0209,
         0.0126, -0.0067, -0.0129, -0.0060,  0.0094, -0.0199,  0.0221, -0.0050,
        -0.0228, -0.0069,  0.0058, -0.0094,  0.0282, -0.0276, -0.0087,  0.0227,
        -0.0327, -0.0213,  0.0009,  0.0205,  0.0167,  0.0228, -0.0571, -0.0083,
        -0.0410,  0.0084,  0.0391, -0.0098, -0.0016,  0.0307,  0.0308, -0.0092,
         0.0248, -0.0198,  0.0072, -0.0055, -0.0117,  0.0150, -0.0025, -0.0139])
##########################################################
encoder.blks.block3.ffn.dense1.weight shape: torch.Size([32, 64])
tensor([[-0.1245,  0.1736,  0.1638,  ...,  0.2129,  0.0167,  0.0154],
        [ 0.2044, -0.1198,  0.1080,  ...,  0.0621,  0.0794, -0.2449],
        [-0.2111, -0.0296, -0.0077,  ...,  0.1489, -0.1304,  0.0203],
        ...,
        [-0.0210,  0.0091,  0.0575,  ..., -0.1778,  0.0512,  0.1796],
        [ 0.2407,  0.2067, -0.2403,  ...,  0.2389, -0.1886,  0.0019],
        [ 0.1651, -0.0871, -0.0084,  ...,  0.1634,  0.2322, -0.0083]])
tensor([[-0.0956,  0.1581,  0.1858,  ...,  0.1983,  0.0089, -0.0022],
        [ 0.2180, -0.1199,  0.0701,  ...,  0.1057,  0.0966, -0.2070],
        [-0.1538, -0.0419, -0.0447,  ...,  0.1370, -0.1489,  0.0495],
        ...,
        [-0.0632,  0.0288,  0.0997,  ..., -0.1897,  0.0412,  0.1479],
        [ 0.2564,  0.2072, -0.2382,  ...,  0.2579, -0.1404,  0.0110],
        [ 0.1478, -0.0829, -0.0179,  ...,  0.2012,  0.2729, -0.0068]])
##########################################################
encoder.blks.block3.ffn.dense1.bias shape: torch.Size([32])
tensor([-0.1015,  0.0109,  0.0343, -0.0186, -0.0706, -0.0845,  0.1090,  0.0319,
        -0.0057,  0.0885,  0.0765,  0.0666,  0.0593,  0.0265, -0.0722,  0.1018,
         0.0914,  0.0894,  0.0741, -0.0631,  0.0745, -0.0776,  0.0015,  0.1217,
         0.0919, -0.1153,  0.0878,  0.0581, -0.0397,  0.0056, -0.0988,  0.0963])
tensor([-0.1476,  0.0388,  0.0540,  0.0049, -0.0543, -0.0827,  0.0829,  0.0657,
         0.0076,  0.0990,  0.1039,  0.0327,  0.0494,  0.0212, -0.0598,  0.1066,
         0.0784,  0.1024,  0.0920, -0.0727,  0.1263, -0.0683,  0.0248,  0.1140,
         0.1064, -0.1170,  0.1158,  0.0631, -0.0165, -0.0148, -0.0954,  0.1052])
##########################################################
encoder.blks.block3.ffn.dense2.weight shape: torch.Size([64, 32])
tensor([[-1.4412e-01,  2.0957e-01,  8.6285e-02,  ...,  1.3065e-04,
          1.6698e-01,  2.2349e-01],
        [ 6.6818e-02, -2.0520e-01, -1.8947e-01,  ..., -1.8304e-01,
         -3.5481e-02,  6.4409e-02],
        [ 2.3902e-01,  7.9148e-02, -1.3473e-01,  ...,  1.7172e-01,
         -1.6049e-01, -1.6169e-01],
        ...,
        [ 1.4557e-01, -1.8676e-01, -1.2398e-01,  ...,  1.3117e-01,
          2.1230e-01,  4.8848e-02],
        [-1.7722e-01, -2.1960e-02, -2.2444e-01,  ...,  3.9443e-02,
          3.5084e-02,  5.9759e-02],
        [ 5.1423e-02,  2.1290e-02,  5.3936e-02,  ...,  2.1271e-01,
         -1.1923e-01,  1.5108e-01]])
tensor([[-0.1610,  0.2110,  0.0890,  ...,  0.0146,  0.1489,  0.2325],
        [ 0.1149, -0.2117, -0.1976,  ..., -0.1704, -0.0368,  0.0890],
        [ 0.2644,  0.0641, -0.1409,  ...,  0.1555, -0.1371, -0.1604],
        ...,
        [ 0.1491, -0.1865, -0.1273,  ...,  0.1330,  0.2045,  0.0483],
        [-0.1805,  0.0026, -0.2031,  ...,  0.0321,  0.0271,  0.0818],
        [ 0.0561,  0.0418,  0.0464,  ...,  0.1925, -0.1569,  0.1662]])
##########################################################
encoder.blks.block3.ffn.dense2.bias shape: torch.Size([64])
tensor([-0.1337, -0.0890, -0.1400,  0.0088, -0.0081,  0.1324, -0.1253,  0.1562,
         0.1699,  0.1014, -0.1224, -0.0962, -0.1352, -0.1338,  0.0348, -0.1411,
        -0.1744,  0.0354,  0.0968, -0.1312,  0.1436, -0.1162,  0.1179, -0.0870,
         0.0516,  0.0820, -0.1472, -0.1181, -0.0832, -0.0785, -0.0778,  0.1582,
         0.0921, -0.1723, -0.1167,  0.0078,  0.1663, -0.1470, -0.1588,  0.1418,
         0.1730, -0.1444,  0.0770,  0.0913, -0.1419, -0.1427, -0.1474, -0.0438,
         0.0335,  0.1572,  0.0287,  0.0992,  0.0638, -0.0635, -0.1748, -0.0238,
         0.0164, -0.1358, -0.0910,  0.1497, -0.0751, -0.1169,  0.0348, -0.1033])
tensor([-0.1181, -0.0696, -0.1318, -0.0091, -0.0154,  0.1266, -0.1147,  0.1588,
         0.1707,  0.1144, -0.1445, -0.1212, -0.1154, -0.1437,  0.0065, -0.1436,
        -0.1818,  0.0492,  0.1003, -0.1423,  0.1202, -0.1202,  0.0922, -0.0527,
         0.0846,  0.0970, -0.1410, -0.1052, -0.0804, -0.1080, -0.0408,  0.1555,
         0.0930, -0.1520, -0.1191,  0.0121,  0.1757, -0.1836, -0.1757,  0.1550,
         0.1329, -0.1670,  0.0974,  0.1110, -0.1303, -0.1243, -0.1944, -0.0221,
         0.0050,  0.1699,  0.0477,  0.0740,  0.0504, -0.0637, -0.1614, -0.0438,
         0.0510, -0.1454, -0.0917,  0.1436, -0.0891, -0.1119,  0.0529, -0.1236])
##########################################################
encoder.blks.block3.addnorm2.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([0.9769, 0.9940, 0.9917, 0.9782, 1.0293, 0.9986, 0.9661, 1.0110, 0.9802,
        0.9812, 1.0090, 0.9934, 0.9848, 1.0033, 1.0041, 0.9888, 0.9961, 0.9972,
        1.0084, 1.0209, 1.0238, 1.0076, 1.0021, 1.0190, 1.0200, 1.0058, 1.0112,
        0.9952, 1.0158, 0.9843, 0.9878, 1.0054, 0.9878, 1.0058, 0.9939, 1.0120,
        0.9921, 1.0104, 1.0043, 1.0104, 0.9893, 0.9947, 0.9987, 0.9802, 1.0042,
        1.0073, 1.0393, 1.0000, 0.9977, 1.0279, 1.0034, 0.9993, 0.9933, 1.0026,
        1.0181, 1.0264, 0.9793, 0.9801, 1.0029, 0.9833, 0.9911, 0.9939, 1.0354,
        0.9875])
##########################################################
encoder.blks.block3.addnorm2.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-0.0010,  0.0245,  0.0059, -0.0081, -0.0044, -0.0093,  0.0030, -0.0100,
        -0.0063,  0.0148, -0.0260, -0.0161,  0.0139, -0.0068, -0.0249, -0.0088,
        -0.0061,  0.0141,  0.0034, -0.0072, -0.0362, -0.0168, -0.0193,  0.0309,
         0.0321,  0.0218,  0.0119,  0.0212,  0.0064, -0.0221,  0.0360, -0.0106,
         0.0099,  0.0135, -0.0025,  0.0052,  0.0156, -0.0353, -0.0183,  0.0170,
        -0.0288, -0.0211,  0.0168,  0.0268,  0.0232,  0.0241, -0.0454,  0.0198,
        -0.0183,  0.0169,  0.0216, -0.0372, -0.0165,  0.0022,  0.0033, -0.0234,
         0.0313, -0.0032, -0.0015, -0.0120, -0.0160,  0.0211,  0.0185, -0.0354])
##########################################################
encoder.blks.block4.attention.W_mix_k.weight shape: torch.Size([64, 128])
tensor([[ 0.1597, -0.0922,  0.1019,  ..., -0.0794, -0.1648,  0.1541],
        [ 0.0888, -0.0244, -0.1003,  ...,  0.0516,  0.0880, -0.0778],
        [ 0.0333,  0.0414,  0.0184,  ..., -0.1123, -0.1333,  0.1675],
        ...,
        [-0.0495, -0.0042, -0.0287,  ...,  0.1092, -0.0652,  0.0720],
        [ 0.0270, -0.0504, -0.0530,  ..., -0.0279, -0.1590,  0.0703],
        [-0.1138, -0.0516,  0.0133,  ...,  0.1729,  0.0292,  0.1629]])
tensor([[ 0.1647, -0.1062,  0.1020,  ..., -0.0710, -0.1512,  0.1590],
        [ 0.0536, -0.0292, -0.0873,  ...,  0.0293,  0.0707, -0.0983],
        [ 0.0556,  0.0506,  0.0093,  ..., -0.0760, -0.1494,  0.1878],
        ...,
        [-0.0214,  0.0314, -0.0477,  ...,  0.1277, -0.0787,  0.0420],
        [ 0.0226, -0.0766, -0.0616,  ..., -0.0492, -0.1367,  0.0760],
        [-0.1576, -0.0544,  0.0306,  ...,  0.1545,  0.0423,  0.1339]])
##########################################################
encoder.blks.block4.attention.W_mix_q.weight shape: torch.Size([64, 128])
tensor([[-0.0383, -0.0703,  0.0392,  ..., -0.1122, -0.1621, -0.1680],
        [ 0.0420, -0.1180, -0.0638,  ..., -0.1383, -0.0440, -0.0349],
        [-0.0099, -0.1505, -0.0124,  ...,  0.1168, -0.1088,  0.0909],
        ...,
        [-0.1604,  0.0056,  0.1052,  ..., -0.0232, -0.0832, -0.0469],
        [-0.1149, -0.0728,  0.1425,  ..., -0.1489, -0.0502,  0.0519],
        [-0.0194,  0.0370,  0.1017,  ..., -0.0200,  0.0650,  0.0231]])
tensor([[-0.0269, -0.0888,  0.0727,  ..., -0.0975, -0.1838, -0.1893],
        [ 0.0296, -0.1109, -0.0488,  ..., -0.1289, -0.0451, -0.0219],
        [-0.0150, -0.1177, -0.0030,  ...,  0.1127, -0.1323,  0.0878],
        ...,
        [-0.1423,  0.0009,  0.1053,  ...,  0.0053, -0.0801, -0.0315],
        [-0.1079, -0.0867,  0.1414,  ..., -0.1111, -0.0612,  0.0716],
        [-0.0276,  0.0310,  0.0905,  ..., -0.0426,  0.0825,  0.0102]])
##########################################################
encoder.blks.block4.attention.W_k.weight shape: torch.Size([64, 64])
tensor([[-0.1708,  0.0940, -0.1397,  ..., -0.0740, -0.1653,  0.0736],
        [ 0.1963, -0.0202, -0.0952,  ...,  0.1176, -0.2114,  0.0433],
        [-0.2149,  0.2059, -0.0789,  ...,  0.1033,  0.1098, -0.0062],
        ...,
        [ 0.1977, -0.1741, -0.0066,  ...,  0.1228, -0.1844,  0.0358],
        [ 0.1991, -0.1837,  0.0674,  ...,  0.0418,  0.1150, -0.0551],
        [ 0.1501, -0.0171, -0.0344,  ..., -0.2059, -0.1900, -0.0174]])
tensor([[-0.1540,  0.0774, -0.1476,  ..., -0.0618, -0.1641,  0.0529],
        [ 0.1710, -0.0066, -0.0861,  ...,  0.1005, -0.2278,  0.0634],
        [-0.2143,  0.2022, -0.0909,  ...,  0.0868,  0.1234, -0.0143],
        ...,
        [ 0.1770, -0.1740, -0.0017,  ...,  0.1108, -0.1638,  0.0192],
        [ 0.2015, -0.1748,  0.0675,  ...,  0.0424,  0.1298, -0.0623],
        [ 0.1746, -0.0040, -0.0489,  ..., -0.1904, -0.1986, -0.0190]])
##########################################################
encoder.blks.block4.attention.W_q.weight shape: torch.Size([64, 64])
tensor([[ 0.1344, -0.1516, -0.2131,  ..., -0.1254, -0.0272, -0.1599],
        [ 0.0035,  0.0101, -0.1925,  ..., -0.1588,  0.1951,  0.0312],
        [ 0.1808, -0.1681, -0.0427,  ...,  0.0519, -0.1543,  0.1358],
        ...,
        [ 0.1487, -0.0494, -0.0318,  ...,  0.0587,  0.0546, -0.1055],
        [-0.0641,  0.0040,  0.0352,  ...,  0.1572, -0.1266, -0.1686],
        [-0.2085,  0.0445, -0.1330,  ...,  0.0735,  0.0199,  0.1120]])
tensor([[ 0.1518, -0.1614, -0.1937,  ..., -0.0889, -0.0360, -0.1649],
        [-0.0117,  0.0094, -0.1806,  ..., -0.1468,  0.2123,  0.0632],
        [ 0.2035, -0.1897, -0.0363,  ...,  0.0551, -0.1714,  0.1345],
        ...,
        [ 0.1658, -0.0635, -0.0208,  ...,  0.0900,  0.0298, -0.1119],
        [-0.0432, -0.0222,  0.0506,  ...,  0.1560, -0.1386, -0.1377],
        [-0.2295,  0.0546, -0.1352,  ...,  0.0555,  0.0445,  0.1292]])
##########################################################
encoder.blks.block4.attention.W_v.weight shape: torch.Size([64, 64])
tensor([[ 0.0328, -0.1091,  0.0997,  ..., -0.1909,  0.0099,  0.2052],
        [-0.1915, -0.0499, -0.1770,  ...,  0.1276,  0.0393, -0.1004],
        [-0.0667,  0.2066,  0.2071,  ..., -0.0496, -0.0047, -0.2014],
        ...,
        [ 0.0669,  0.1663,  0.1784,  ...,  0.0525, -0.1002,  0.0490],
        [ 0.0877,  0.1797,  0.1232,  ..., -0.0469,  0.2165,  0.1708],
        [ 0.0684,  0.1821,  0.1295,  ..., -0.2090,  0.1842,  0.0827]])
tensor([[ 0.0699, -0.1211,  0.0913,  ..., -0.2104, -0.0033,  0.2196],
        [-0.1830, -0.0574, -0.1725,  ...,  0.1510,  0.0283, -0.1114],
        [-0.0862,  0.2119,  0.1934,  ..., -0.0284,  0.0233, -0.1863],
        ...,
        [ 0.0510,  0.1742,  0.1768,  ...,  0.0376, -0.0997,  0.0575],
        [ 0.0737,  0.1734,  0.1223,  ..., -0.0634,  0.1868,  0.1873],
        [ 0.0430,  0.2295,  0.1371,  ..., -0.2061,  0.1579,  0.0700]])
##########################################################
encoder.blks.block4.attention.W_o.weight shape: torch.Size([64, 64])
tensor([[-0.0226, -0.1535, -0.0794,  ..., -0.1740,  0.0523, -0.2044],
        [ 0.1107, -0.0784, -0.0583,  ...,  0.1218, -0.2132,  0.1614],
        [-0.0442,  0.1831,  0.0997,  ..., -0.2039, -0.0240,  0.1559],
        ...,
        [ 0.0498, -0.0199, -0.1630,  ..., -0.1234, -0.0517, -0.1546],
        [ 0.1224,  0.1235, -0.0943,  ...,  0.1458,  0.1021, -0.1870],
        [-0.0276,  0.0079,  0.1033,  ..., -0.1537, -0.0266,  0.0156]])
tensor([[ 0.0210, -0.1599, -0.0780,  ..., -0.1843,  0.0474, -0.2105],
        [ 0.1285, -0.1096, -0.0486,  ...,  0.1502, -0.1825,  0.1749],
        [-0.0680,  0.2105,  0.0787,  ..., -0.1929, -0.0252,  0.1314],
        ...,
        [ 0.0455,  0.0038, -0.1585,  ..., -0.1592, -0.0559, -0.1815],
        [ 0.1018,  0.1190, -0.0576,  ...,  0.1262,  0.1034, -0.1704],
        [-0.0421,  0.0088,  0.1116,  ..., -0.1402, -0.0439,  0.0469]])
##########################################################
encoder.blks.block4.addnorm1.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0134, 0.9805, 1.0055, 0.9863, 0.9780, 1.0127, 1.0076, 1.0040, 0.9634,
        0.9685, 0.9920, 1.0055, 0.9965, 1.0067, 1.0081, 0.9707, 0.9878, 0.9910,
        0.9977, 0.9879, 1.0257, 1.0067, 0.9918, 0.9973, 1.0190, 0.9999, 0.9855,
        0.9915, 1.0033, 1.0036, 0.9858, 1.0076, 1.0066, 1.0083, 1.0038, 0.9960,
        0.9975, 0.9965, 1.0611, 0.9797, 1.0028, 1.0125, 0.9962, 1.0225, 0.9898,
        1.0065, 1.0091, 0.9506, 0.9899, 0.9982, 1.0356, 0.9978, 1.0085, 0.9939,
        1.0172, 1.0079, 1.0041, 0.9657, 1.0021, 0.9945, 1.0240, 1.0174, 1.0416,
        0.9788])
##########################################################
encoder.blks.block4.addnorm1.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 0.0152,  0.0214, -0.0168,  0.0030,  0.0214,  0.0319,  0.0262, -0.0241,
        -0.0035,  0.0151, -0.0019, -0.0155,  0.0112,  0.0090, -0.0296,  0.0026,
        -0.0426,  0.0093, -0.0186, -0.0106, -0.0237, -0.0295, -0.0139, -0.0088,
         0.0199,  0.0310,  0.0055,  0.0028,  0.0035, -0.0046, -0.0025,  0.0116,
         0.0084,  0.0096, -0.0022,  0.0045,  0.0174,  0.0003, -0.0342, -0.0064,
         0.0218, -0.0032, -0.0183, -0.0020, -0.0098, -0.0029,  0.0066, -0.0010,
        -0.0025, -0.0027,  0.0216,  0.0023, -0.0010, -0.0206, -0.0029,  0.0028,
         0.0156,  0.0164, -0.0134, -0.0072, -0.0048,  0.0192,  0.0267, -0.0108])
##########################################################
encoder.blks.block4.ffn.dense1.weight shape: torch.Size([32, 64])
tensor([[-0.1003,  0.0938,  0.2211,  ...,  0.0055, -0.1560, -0.0540],
        [ 0.0598, -0.1378, -0.2251,  ..., -0.1604, -0.1869,  0.2243],
        [-0.1343, -0.0082, -0.0460,  ...,  0.0547,  0.0055,  0.2048],
        ...,
        [ 0.1795,  0.2234,  0.0117,  ..., -0.0010,  0.1190, -0.2318],
        [ 0.1041,  0.0800, -0.0633,  ...,  0.0891, -0.0158, -0.1008],
        [ 0.0061,  0.1738, -0.0329,  ..., -0.1588, -0.0745, -0.0960]])
tensor([[-0.0885,  0.0975,  0.2128,  ...,  0.0264, -0.1792, -0.0340],
        [ 0.0480, -0.1038, -0.1953,  ..., -0.1619, -0.1749,  0.2221],
        [-0.1371, -0.0201, -0.0432,  ...,  0.0782, -0.0130,  0.1661],
        ...,
        [ 0.1707,  0.2072,  0.0018,  ...,  0.0093,  0.1139, -0.2062],
        [ 0.1071,  0.0599, -0.0620,  ...,  0.0913, -0.0301, -0.1247],
        [ 0.0302,  0.1621, -0.0371,  ..., -0.1663, -0.0600, -0.0980]])
##########################################################
encoder.blks.block4.ffn.dense1.bias shape: torch.Size([32])
tensor([ 0.0892, -0.1067,  0.0777,  0.1197,  0.0320,  0.1017,  0.1137, -0.0098,
        -0.0218, -0.0744, -0.0683,  0.0367, -0.0778, -0.0970,  0.0421,  0.0163,
         0.0007,  0.0086,  0.1204,  0.0014, -0.0231, -0.0871,  0.0793, -0.0550,
        -0.0727, -0.0905, -0.0874,  0.0246,  0.1053,  0.1176, -0.0395, -0.0520])
tensor([ 0.1027, -0.1147,  0.0646,  0.1260,  0.0480,  0.0856,  0.0953,  0.0061,
        -0.0420, -0.0991, -0.0565,  0.0381, -0.0833, -0.0548,  0.0447, -0.0133,
        -0.0153,  0.0004,  0.1271,  0.0184, -0.0404, -0.0706,  0.0591, -0.0371,
        -0.0806, -0.1010, -0.0806,  0.0396,  0.0836,  0.1290, -0.0484, -0.0631])
##########################################################
encoder.blks.block4.ffn.dense2.weight shape: torch.Size([64, 32])
tensor([[ 0.2493, -0.2108,  0.1807,  ...,  0.0157,  0.0067, -0.0532],
        [-0.1402, -0.1267, -0.1294,  ...,  0.0860,  0.1434,  0.0702],
        [ 0.1907, -0.0066,  0.1407,  ...,  0.0629, -0.2261,  0.0322],
        ...,
        [-0.2114,  0.2051,  0.1131,  ...,  0.1838,  0.1603,  0.1592],
        [ 0.0465,  0.0149, -0.1280,  ..., -0.0147, -0.0551,  0.0045],
        [-0.0769, -0.1826,  0.1469,  ..., -0.0961, -0.2408, -0.1363]])
tensor([[ 0.2665, -0.1836,  0.1450,  ...,  0.0003,  0.0358, -0.0437],
        [-0.1431, -0.1340, -0.1265,  ...,  0.0718,  0.1667,  0.0655],
        [ 0.1892, -0.0037,  0.1318,  ...,  0.0113, -0.2252, -0.0039],
        ...,
        [-0.2200,  0.1689,  0.1359,  ...,  0.2005,  0.1490,  0.1714],
        [ 0.0376, -0.0064, -0.1122,  ..., -0.0134, -0.0390,  0.0089],
        [-0.0741, -0.1682,  0.1281,  ..., -0.0815, -0.2326, -0.1562]])
##########################################################
encoder.blks.block4.ffn.dense2.bias shape: torch.Size([64])
tensor([-0.0342,  0.0858, -0.0011,  0.1389,  0.0313, -0.0190, -0.0083,  0.1637,
         0.1726, -0.0744,  0.0231,  0.1689, -0.1395,  0.0788, -0.0029, -0.1430,
         0.0047, -0.0948,  0.1023,  0.0078,  0.1046,  0.0322, -0.1180, -0.0656,
         0.0590,  0.0219, -0.0523, -0.1201,  0.0157, -0.0330,  0.1090,  0.0606,
         0.0729,  0.0323, -0.0233,  0.0111,  0.1491, -0.1237,  0.1328, -0.1613,
        -0.0498,  0.1030,  0.1115,  0.1630, -0.1356,  0.0387, -0.0833, -0.0963,
        -0.1114,  0.1556,  0.0773, -0.1468, -0.0797,  0.1401,  0.0551,  0.0745,
        -0.0720,  0.0146, -0.1337,  0.0502, -0.0522, -0.1665, -0.1555,  0.1531])
tensor([-0.0306,  0.0761, -0.0231,  0.1410,  0.0247, -0.0158,  0.0037,  0.1341,
         0.1932, -0.0534,  0.0335,  0.1796, -0.1223,  0.0864, -0.0222, -0.1378,
        -0.0250, -0.0931,  0.1001,  0.0214,  0.1028,  0.0172, -0.1456, -0.1048,
         0.0566,  0.0229, -0.0521, -0.1277,  0.0096, -0.0104,  0.0929,  0.0697,
         0.0887,  0.0378, -0.0140,  0.0123,  0.1631, -0.1094,  0.1074, -0.1585,
        -0.0648,  0.1040,  0.0939,  0.1549, -0.1414,  0.0405, -0.0896, -0.0903,
        -0.1196,  0.1737,  0.1111, -0.1559, -0.0728,  0.1153,  0.0337,  0.0745,
        -0.0510,  0.0329, -0.1476,  0.0479, -0.0480, -0.1526, -0.1568,  0.1553])
##########################################################
encoder.blks.block4.addnorm2.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0149, 1.0018, 1.0114, 0.9609, 0.9753, 1.0197, 0.9949, 0.9965, 0.9854,
        0.9649, 1.0140, 1.0074, 0.9992, 0.9787, 1.0259, 1.0063, 1.0059, 0.9841,
        1.0107, 0.9838, 0.9989, 1.0094, 0.9951, 0.9906, 1.0078, 1.0212, 0.9896,
        0.9927, 1.0163, 1.0191, 0.9932, 1.0104, 0.9833, 1.0156, 0.9613, 1.0063,
        0.9980, 0.9851, 1.0383, 0.9669, 1.0023, 0.9994, 0.9997, 1.0062, 0.9868,
        1.0130, 1.0123, 0.9675, 0.9954, 1.0179, 1.0612, 0.9983, 1.0035, 1.0177,
        0.9841, 1.0057, 0.9816, 0.9668, 1.0041, 1.0021, 1.0299, 0.9919, 1.0090,
        0.9913])
##########################################################
encoder.blks.block4.addnorm2.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 1.4390e-02, -3.9292e-03, -1.4823e-02,  4.7905e-03, -1.2647e-03,
        -2.7270e-03,  9.5034e-03, -2.9510e-02,  2.4668e-02,  1.6510e-02,
         1.6856e-02,  7.1188e-03,  2.0881e-02,  7.0655e-03, -2.2142e-02,
         1.1919e-02, -3.1796e-02,  8.4295e-03, -3.2279e-03,  1.6814e-02,
         4.3562e-03, -1.0734e-02, -2.0130e-02, -3.4387e-02, -2.3421e-03,
        -2.3990e-03, -5.6394e-04, -1.0650e-02, -9.3170e-03,  2.0976e-02,
        -1.7477e-02,  1.5509e-03,  2.0433e-02, -2.7204e-04,  1.2388e-02,
         4.2273e-03,  1.4012e-02,  1.4332e-02, -2.1039e-02, -2.8188e-04,
        -2.8417e-02,  1.6739e-04, -1.4035e-02, -5.0453e-03, -2.9583e-03,
         2.5257e-03,  6.1759e-05,  7.4723e-03, -3.9452e-03,  2.4025e-02,
         3.1529e-02, -8.2172e-03, -4.4393e-03, -2.1451e-02, -2.4080e-02,
        -2.6949e-03,  2.0754e-02,  1.8245e-02, -7.6114e-03, -1.0040e-02,
         1.8099e-03,  1.2011e-02, -3.3592e-03, -9.9401e-04])
##########################################################
encoder.blks.block5.attention.W_mix_k.weight shape: torch.Size([64, 128])
tensor([[-0.1491, -0.1687, -0.0301,  ...,  0.1710, -0.1572,  0.0558],
        [-0.1349, -0.0688, -0.1741,  ...,  0.0032,  0.0711, -0.0344],
        [-0.1765, -0.0432, -0.0596,  ..., -0.0754,  0.0549,  0.1331],
        ...,
        [ 0.1539, -0.0480,  0.1733,  ...,  0.1129, -0.0153, -0.0887],
        [-0.0779, -0.1147, -0.0363,  ..., -0.0246,  0.0231,  0.0853],
        [-0.0620, -0.1070, -0.0832,  ...,  0.0828,  0.1645,  0.1694]])
tensor([[-0.1413, -0.1740, -0.0723,  ...,  0.1799, -0.1499,  0.0414],
        [-0.1226, -0.0741, -0.1988,  ..., -0.0061,  0.1140, -0.0435],
        [-0.1968, -0.0465, -0.0762,  ..., -0.0889,  0.0663,  0.1418],
        ...,
        [ 0.1672, -0.0318,  0.1976,  ...,  0.1366, -0.0377, -0.1109],
        [-0.1060, -0.1128, -0.0489,  ..., -0.0449, -0.0089,  0.0794],
        [-0.0610, -0.1083, -0.0582,  ...,  0.0849,  0.1393,  0.1389]])
##########################################################
encoder.blks.block5.attention.W_mix_q.weight shape: torch.Size([64, 128])
tensor([[ 0.0947,  0.0346, -0.0365,  ..., -0.1227,  0.0976, -0.1269],
        [-0.0662,  0.1652, -0.1115,  ...,  0.0355, -0.1143,  0.0487],
        [-0.1521, -0.0588, -0.0654,  ..., -0.0148,  0.1385, -0.0917],
        ...,
        [-0.0609,  0.1183, -0.1139,  ...,  0.1559, -0.1302, -0.0197],
        [-0.1518, -0.1344, -0.0334,  ..., -0.0224,  0.0004,  0.1743],
        [ 0.0354, -0.0007,  0.1248,  ..., -0.0006, -0.0760, -0.1318]])
tensor([[ 0.0822,  0.0382, -0.0075,  ..., -0.0995,  0.0693, -0.1082],
        [-0.0508,  0.1257, -0.1248,  ...,  0.0616, -0.1186,  0.0607],
        [-0.1416, -0.0520, -0.0785,  ..., -0.0184,  0.1386, -0.1052],
        ...,
        [-0.0792,  0.1131, -0.0791,  ...,  0.1528, -0.1519, -0.0079],
        [-0.1108, -0.1366, -0.0162,  ..., -0.0226, -0.0029,  0.1720],
        [ 0.0287, -0.0079,  0.1270,  ..., -0.0020, -0.1064, -0.1656]])
##########################################################
encoder.blks.block5.attention.W_k.weight shape: torch.Size([64, 64])
tensor([[-0.0020,  0.0204,  0.1313,  ..., -0.1930,  0.0225, -0.1596],
        [ 0.0457,  0.0766, -0.2151,  ...,  0.0899,  0.1212, -0.1378],
        [ 0.1195,  0.1269,  0.0140,  ..., -0.1530, -0.1647,  0.1852],
        ...,
        [ 0.1752, -0.0291,  0.0223,  ..., -0.1201,  0.0399, -0.0964],
        [-0.1027,  0.1407, -0.0475,  ..., -0.1167,  0.1608,  0.0448],
        [ 0.1445, -0.0051, -0.1843,  ..., -0.0506,  0.0816, -0.1147]])
tensor([[ 0.0053,  0.0200,  0.1194,  ..., -0.1912,  0.0048, -0.1699],
        [ 0.0422,  0.0953, -0.2085,  ...,  0.0865,  0.1283, -0.1296],
        [ 0.0884,  0.1209,  0.0120,  ..., -0.1258, -0.1572,  0.2016],
        ...,
        [ 0.1772, -0.0185,  0.0329,  ..., -0.1119,  0.0420, -0.0897],
        [-0.1067,  0.1443, -0.0376,  ..., -0.1472,  0.1688,  0.0639],
        [ 0.1695, -0.0013, -0.1869,  ..., -0.0552,  0.0720, -0.1214]])
##########################################################
encoder.blks.block5.attention.W_q.weight shape: torch.Size([64, 64])
tensor([[ 0.1290,  0.1801, -0.0481,  ..., -0.1821, -0.2120, -0.1355],
        [ 0.2007,  0.1663, -0.0109,  ..., -0.0726, -0.0429, -0.0893],
        [ 0.0781, -0.1656, -0.0447,  ...,  0.0640, -0.1373, -0.2155],
        ...,
        [ 0.1712,  0.0508,  0.1152,  ...,  0.1554,  0.1635,  0.0526],
        [-0.1075, -0.0335, -0.1458,  ..., -0.1830, -0.1972, -0.0423],
        [ 0.0109,  0.1729,  0.0811,  ...,  0.1504,  0.1702, -0.0787]])
tensor([[ 0.1204,  0.1797, -0.0473,  ..., -0.1939, -0.2306, -0.1579],
        [ 0.2165,  0.1590, -0.0447,  ..., -0.0763, -0.0522, -0.0853],
        [ 0.0812, -0.1564, -0.0344,  ...,  0.0579, -0.1214, -0.2339],
        ...,
        [ 0.1787,  0.0188,  0.1399,  ...,  0.1643,  0.1622,  0.0639],
        [-0.0962, -0.0178, -0.1450,  ..., -0.1932, -0.2187, -0.0745],
        [ 0.0190,  0.1342,  0.0840,  ...,  0.1477,  0.1717, -0.0803]])
##########################################################
encoder.blks.block5.attention.W_v.weight shape: torch.Size([64, 64])
tensor([[-0.0694,  0.1333,  0.0393,  ..., -0.1232, -0.1422, -0.0749],
        [ 0.1143, -0.1454, -0.0195,  ...,  0.0550,  0.2052, -0.2160],
        [ 0.0709,  0.0641, -0.1386,  ...,  0.0919, -0.1038, -0.0079],
        ...,
        [-0.0516,  0.1379, -0.0063,  ...,  0.2006, -0.0014, -0.0045],
        [ 0.0414, -0.0832, -0.1735,  ...,  0.1657, -0.1326,  0.1833],
        [ 0.0539, -0.0459,  0.1160,  ...,  0.1001,  0.1427, -0.1911]])
tensor([[-0.0647,  0.1229,  0.0305,  ..., -0.1222, -0.1419, -0.0804],
        [ 0.1162, -0.1479, -0.0101,  ...,  0.0562,  0.2029, -0.2005],
        [ 0.0917,  0.0594, -0.1291,  ...,  0.0676, -0.0910,  0.0138],
        ...,
        [-0.0502,  0.1788, -0.0133,  ...,  0.2042, -0.0024, -0.0142],
        [ 0.0120, -0.0867, -0.1823,  ...,  0.1395, -0.1571,  0.1504],
        [ 0.0881, -0.0443,  0.1082,  ...,  0.0874,  0.1516, -0.1658]])
##########################################################
encoder.blks.block5.attention.W_o.weight shape: torch.Size([64, 64])
tensor([[-0.0626,  0.0473, -0.0045,  ..., -0.1865,  0.1716, -0.1933],
        [ 0.0254,  0.2007,  0.1174,  ..., -0.0798, -0.0361,  0.1108],
        [ 0.2130,  0.0753, -0.0330,  ...,  0.2055,  0.0392, -0.1227],
        ...,
        [-0.1094,  0.0855,  0.0540,  ...,  0.1236, -0.1692,  0.0447],
        [ 0.0530, -0.1042, -0.0725,  ..., -0.1454,  0.1362, -0.0128],
        [-0.0727, -0.0218,  0.1556,  ..., -0.0183, -0.1673,  0.1011]])
tensor([[-0.0810,  0.0430, -0.0362,  ..., -0.1689,  0.1782, -0.2159],
        [-0.0020,  0.1970,  0.1265,  ..., -0.0916, -0.0475,  0.0891],
        [ 0.2133,  0.0784, -0.0095,  ...,  0.2452,  0.0305, -0.1640],
        ...,
        [-0.1163,  0.1125,  0.0484,  ...,  0.0938, -0.1762,  0.0625],
        [ 0.0485, -0.0885, -0.0488,  ..., -0.1558,  0.1186,  0.0269],
        [-0.0680, -0.0139,  0.1382,  ...,  0.0041, -0.1546,  0.0838]])
##########################################################
encoder.blks.block5.addnorm1.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0283, 1.0095, 0.9969, 0.9956, 1.0080, 0.9957, 1.0092, 0.9801, 0.9880,
        0.9754, 0.9855, 1.0290, 1.0198, 0.9967, 1.0001, 1.0026, 1.0057, 1.0054,
        1.0330, 1.0054, 1.0066, 0.9900, 1.0040, 1.0207, 0.9899, 0.9892, 0.9807,
        1.0032, 1.0202, 1.0102, 0.9918, 1.0222, 0.9861, 0.9992, 0.9992, 1.0094,
        0.9972, 1.0038, 1.0211, 1.0037, 0.9924, 1.0034, 0.9867, 0.9966, 0.9746,
        0.9891, 0.9703, 0.9732, 1.0178, 0.9961, 1.0123, 0.9683, 0.9969, 0.9520,
        0.9804, 0.9853, 1.0079, 0.9986, 1.0259, 0.9755, 1.0003, 0.9914, 1.0015,
        0.9874])
##########################################################
encoder.blks.block5.addnorm1.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 0.0190,  0.0225, -0.0076,  0.0090,  0.0017,  0.0090,  0.0112, -0.0061,
         0.0373, -0.0021, -0.0243,  0.0032,  0.0529,  0.0105,  0.0003,  0.0030,
        -0.0140, -0.0267, -0.0156,  0.0268,  0.0043, -0.0059, -0.0060, -0.0448,
        -0.0141,  0.0038,  0.0133, -0.0105, -0.0227,  0.0449, -0.0135,  0.0095,
        -0.0074,  0.0003,  0.0167,  0.0118, -0.0034, -0.0215, -0.0197, -0.0094,
        -0.0206,  0.0118, -0.0076, -0.0252,  0.0079, -0.0246,  0.0259,  0.0132,
        -0.0106, -0.0050,  0.0039,  0.0094,  0.0161, -0.0039,  0.0063,  0.0228,
         0.0208, -0.0047, -0.0069, -0.0215,  0.0192, -0.0036,  0.0110, -0.0139])
##########################################################
encoder.blks.block5.ffn.dense1.weight shape: torch.Size([32, 64])
tensor([[ 0.1268,  0.1704,  0.0273,  ..., -0.0980, -0.0547,  0.1092],
        [ 0.1517,  0.0879, -0.0550,  ..., -0.0189, -0.2433,  0.0193],
        [-0.0879,  0.2150,  0.2093,  ...,  0.1570,  0.2004, -0.0792],
        ...,
        [-0.0979, -0.2476,  0.1626,  ...,  0.0626, -0.2441,  0.1499],
        [ 0.2168, -0.2270,  0.0624,  ..., -0.2186, -0.2226,  0.0502],
        [ 0.1729, -0.1376,  0.2394,  ..., -0.2356,  0.1784,  0.2485]])
tensor([[ 0.0982,  0.1641,  0.0249,  ..., -0.0859, -0.0578,  0.1086],
        [ 0.1507,  0.1041, -0.0641,  ..., -0.0424, -0.2523, -0.0037],
        [-0.0709,  0.2192,  0.2035,  ...,  0.1845,  0.2096, -0.0676],
        ...,
        [-0.0978, -0.2571,  0.1579,  ...,  0.0494, -0.2692,  0.1428],
        [ 0.2026, -0.2310,  0.0706,  ..., -0.2061, -0.2006,  0.0351],
        [ 0.2123, -0.1174,  0.2324,  ..., -0.2212,  0.1988,  0.2913]])
##########################################################
encoder.blks.block5.ffn.dense1.bias shape: torch.Size([32])
tensor([-0.1227, -0.0942, -0.0703, -0.0596,  0.0259, -0.0927,  0.0670,  0.0441,
         0.1058, -0.0819,  0.0702,  0.1132, -0.1019,  0.0886,  0.0089,  0.1241,
         0.0479, -0.0546, -0.0992,  0.0656, -0.1214, -0.1007,  0.0987,  0.1174,
         0.1212, -0.0607, -0.0606, -0.0210, -0.1012,  0.1136, -0.0807, -0.1142])
tensor([-0.1402, -0.0906, -0.0646, -0.0802,  0.0304, -0.0628,  0.0567,  0.0266,
         0.1244, -0.1065,  0.0937,  0.1427, -0.0909,  0.1026,  0.0070,  0.1442,
         0.0435, -0.0596, -0.1184,  0.0805, -0.0984, -0.1157,  0.1232,  0.1265,
         0.1130, -0.0371, -0.0770, -0.0206, -0.1196,  0.1026, -0.0929, -0.0822])
##########################################################
encoder.blks.block5.ffn.dense2.weight shape: torch.Size([64, 32])
tensor([[-0.1701,  0.2405,  0.1216,  ...,  0.2119,  0.1438,  0.2114],
        [ 0.1922, -0.1959, -0.0311,  ..., -0.0188,  0.1203,  0.0939],
        [ 0.0407, -0.0169,  0.0731,  ..., -0.1705,  0.1158,  0.2292],
        ...,
        [-0.2374, -0.2482, -0.1182,  ..., -0.1901,  0.2426,  0.0723],
        [-0.1613, -0.1369, -0.1379,  ...,  0.0866, -0.0666,  0.0106],
        [ 0.0646, -0.1041, -0.2358,  ...,  0.0386, -0.2033,  0.1288]])
tensor([[-0.1352,  0.2657,  0.1564,  ...,  0.2598,  0.1810,  0.2388],
        [ 0.2008, -0.1817, -0.0105,  ..., -0.0117,  0.1323,  0.1114],
        [ 0.0121, -0.0422,  0.0386,  ..., -0.1809,  0.0900,  0.2045],
        ...,
        [-0.2437, -0.2578, -0.1340,  ..., -0.1782,  0.2548,  0.0758],
        [-0.1487, -0.1461, -0.1556,  ...,  0.0713, -0.0665, -0.0096],
        [ 0.0349, -0.1013, -0.2266,  ...,  0.0449, -0.1773,  0.1448]])
##########################################################
encoder.blks.block5.ffn.dense2.bias shape: torch.Size([64])
tensor([-0.0548,  0.0958,  0.0188,  0.1664,  0.0118,  0.1767,  0.1058,  0.1355,
         0.0702, -0.0082, -0.1663,  0.0054, -0.0031, -0.1197,  0.1575,  0.0147,
         0.1141, -0.0841,  0.0013, -0.1726, -0.0870, -0.0130, -0.0401,  0.0416,
        -0.0018,  0.0172,  0.1644,  0.0351,  0.0849,  0.1451,  0.1736,  0.1721,
         0.1613, -0.0296,  0.0806, -0.0738, -0.0838, -0.0702,  0.1354,  0.0029,
        -0.0717, -0.1318,  0.0941, -0.0235,  0.0813,  0.0163, -0.1205,  0.0958,
         0.1330, -0.1486,  0.0888,  0.1153, -0.0527,  0.0691,  0.0977, -0.1261,
         0.1583, -0.0684, -0.0647, -0.1466,  0.0742, -0.1667,  0.0305, -0.0641])
tensor([-2.8577e-02,  1.1300e-01, -3.3829e-03,  1.7391e-01,  1.3883e-02,
         1.8868e-01,  1.2217e-01,  1.1732e-01,  1.1887e-01,  3.0702e-05,
        -1.8902e-01,  1.8040e-02,  3.4996e-02, -1.0792e-01,  1.7094e-01,
         1.6572e-02,  9.1796e-02, -1.1871e-01, -1.8847e-02, -1.4778e-01,
        -9.2141e-02, -4.0420e-03, -4.7358e-02,  3.9077e-03, -4.9020e-03,
         1.6829e-02,  1.6822e-01,  6.0078e-03,  5.7141e-02,  1.8258e-01,
         1.5861e-01,  1.8534e-01,  1.5279e-01, -3.1312e-02,  9.7418e-02,
        -5.2994e-02, -9.7259e-02, -1.0962e-01,  1.1094e-01, -2.4096e-02,
        -9.1679e-02, -1.2175e-01,  8.9057e-02, -4.0026e-02,  9.6483e-02,
         1.8848e-03, -1.0581e-01,  9.2180e-02,  1.3077e-01, -1.5682e-01,
         8.9282e-02,  1.2959e-01, -3.6745e-02,  6.5754e-02,  9.2389e-02,
        -1.2814e-01,  1.5640e-01, -7.7457e-02, -8.5487e-02, -1.6447e-01,
         9.6949e-02, -1.7133e-01,  2.6348e-02, -6.8217e-02])
##########################################################
encoder.blks.block5.addnorm2.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0234, 1.0056, 1.0064, 0.9925, 0.9965, 0.9882, 0.9938, 0.9973, 1.0177,
        0.9922, 0.9935, 1.0093, 1.0166, 0.9902, 0.9879, 0.9910, 0.9805, 1.0172,
        1.0231, 0.9871, 0.9743, 0.9663, 1.0119, 1.0025, 0.9874, 0.9795, 1.0045,
        1.0103, 1.0253, 1.0148, 0.9898, 1.0066, 0.9927, 0.9985, 1.0039, 1.0014,
        0.9711, 0.9862, 1.0155, 1.0111, 1.0199, 1.0186, 0.9866, 0.9965, 1.0115,
        0.9737, 0.9815, 0.9881, 1.0085, 0.9900, 1.0047, 0.9846, 0.9913, 0.9858,
        0.9646, 0.9955, 0.9819, 0.9990, 1.0165, 0.9887, 1.0000, 0.9979, 0.9844,
        0.9803])
##########################################################
encoder.blks.block5.addnorm2.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 0.0206,  0.0161, -0.0234,  0.0073, -0.0010,  0.0075,  0.0123, -0.0191,
         0.0448,  0.0055, -0.0210,  0.0108,  0.0311,  0.0125,  0.0099,  0.0013,
        -0.0279, -0.0280, -0.0209,  0.0251, -0.0076,  0.0079, -0.0047, -0.0359,
        -0.0047, -0.0023,  0.0037, -0.0276, -0.0250,  0.0323, -0.0158,  0.0121,
        -0.0085, -0.0011,  0.0105,  0.0170, -0.0180, -0.0414, -0.0231, -0.0323,
        -0.0227,  0.0060, -0.0072, -0.0147,  0.0130, -0.0189,  0.0173, -0.0082,
        -0.0042, -0.0104, -0.0011,  0.0134,  0.0119, -0.0067, -0.0087, -0.0054,
        -0.0062, -0.0077, -0.0227, -0.0211,  0.0204, -0.0038, -0.0067, -0.0060])
##########################################################
decoder.embedding.weight shape: torch.Size([166, 64])
tensor([[-0.5463,  0.5858,  0.7110,  ..., -1.0519, -0.5135,  1.0814],
        [-0.9845,  0.0961,  0.4482,  ...,  1.0931, -0.5982,  3.0283],
        [-1.4331, -0.9077, -1.0096,  ...,  1.0324,  0.4119,  1.2721],
        ...,
        [ 0.2806,  1.0855,  1.6024,  ...,  0.9258,  0.5246,  0.9011],
        [-0.3997,  0.3751, -0.4466,  ...,  0.2098, -0.2127,  1.5587],
        [ 0.8449, -0.6242, -0.3290,  ...,  0.2639, -0.7322,  0.3840]])
tensor([[-0.5463,  0.5858,  0.7110,  ..., -1.0519, -0.5135,  1.0814],
        [-0.9845,  0.0961,  0.4482,  ...,  1.0931, -0.5982,  3.0283],
        [-1.4095, -0.9167, -1.0140,  ...,  1.0300,  0.4218,  1.2838],
        ...,
        [ 0.2806,  1.0855,  1.6024,  ...,  0.9258,  0.5246,  0.9011],
        [-0.3997,  0.3751, -0.4466,  ...,  0.2098, -0.2127,  1.5587],
        [ 0.8449, -0.6242, -0.3290,  ...,  0.2639, -0.7322,  0.3840]])
##########################################################
decoder.convT1d.weight shape: torch.Size([128, 64, 128, 1])
tensor([[[[-1.0929e-03],
          [ 1.2110e-03],
          [ 9.3111e-03],
          ...,
          [-7.0579e-03],
          [ 6.0119e-03],
          [ 6.0174e-03]],

         [[-6.1873e-03],
          [-7.2472e-03],
          [-8.0314e-03],
          ...,
          [-3.5010e-03],
          [-4.9364e-03],
          [ 6.1753e-03]],

         [[-7.5206e-03],
          [ 9.5708e-03],
          [-3.4999e-03],
          ...,
          [-5.0394e-03],
          [ 5.6759e-03],
          [-8.4699e-03]],

         ...,

         [[ 4.4770e-03],
          [ 9.2261e-04],
          [ 1.5061e-05],
          ...,
          [ 5.8335e-03],
          [ 1.7546e-03],
          [ 7.0263e-03]],

         [[-4.1265e-03],
          [-8.4324e-03],
          [-2.8150e-03],
          ...,
          [ 7.3585e-03],
          [ 8.7538e-03],
          [-5.2468e-03]],

         [[-5.8555e-03],
          [-3.6825e-03],
          [-6.9106e-03],
          ...,
          [-7.2071e-03],
          [ 5.1005e-04],
          [-1.0931e-02]]],


        [[[ 1.1401e-03],
          [ 3.5700e-04],
          [-2.2091e-03],
          ...,
          [-9.9308e-03],
          [ 9.7625e-03],
          [-8.0542e-03]],

         [[-9.0796e-03],
          [-2.0849e-03],
          [-3.1430e-03],
          ...,
          [-6.0873e-03],
          [ 3.1713e-03],
          [ 3.7440e-03]],

         [[ 1.9866e-03],
          [ 3.0449e-03],
          [-6.3351e-03],
          ...,
          [-4.6224e-03],
          [-7.3990e-03],
          [-4.7476e-03]],

         ...,

         [[ 8.1821e-03],
          [ 8.8866e-03],
          [-3.8809e-04],
          ...,
          [-2.9016e-03],
          [ 5.6256e-04],
          [ 4.0561e-03]],

         [[ 6.3892e-03],
          [-5.4523e-03],
          [-4.3091e-03],
          ...,
          [ 1.0427e-02],
          [ 2.5300e-03],
          [ 2.3644e-03]],

         [[-4.1640e-03],
          [-1.0674e-02],
          [-2.6917e-03],
          ...,
          [-7.3096e-04],
          [-6.7540e-03],
          [-6.5886e-03]]],


        [[[ 8.2274e-03],
          [ 1.8230e-03],
          [ 7.4395e-03],
          ...,
          [ 6.4144e-03],
          [-5.2504e-03],
          [ 3.6285e-03]],

         [[-6.7508e-03],
          [-1.7427e-03],
          [ 3.9082e-03],
          ...,
          [-4.3793e-04],
          [ 3.2100e-03],
          [-2.6792e-03]],

         [[-5.0599e-03],
          [-1.1026e-02],
          [-9.0234e-03],
          ...,
          [ 8.5885e-03],
          [ 6.6985e-03],
          [-8.3336e-03]],

         ...,

         [[-1.8717e-03],
          [ 2.7173e-03],
          [-1.0053e-02],
          ...,
          [-5.7428e-03],
          [-1.6015e-03],
          [-1.4364e-05]],

         [[-3.8899e-03],
          [-2.4412e-03],
          [-6.6465e-03],
          ...,
          [ 3.8630e-03],
          [ 5.5720e-03],
          [ 4.1929e-03]],

         [[-2.6818e-03],
          [-1.5994e-03],
          [-1.0530e-02],
          ...,
          [ 6.8952e-03],
          [ 1.0671e-02],
          [ 3.0526e-03]]],


        ...,


        [[[ 7.4078e-03],
          [-2.1756e-03],
          [-1.0475e-02],
          ...,
          [ 9.4456e-03],
          [-3.3063e-03],
          [ 1.0182e-02]],

         [[-3.9818e-03],
          [ 1.3591e-03],
          [ 6.3920e-04],
          ...,
          [-7.6859e-03],
          [ 6.4994e-03],
          [ 2.1715e-03]],

         [[ 3.2381e-03],
          [ 9.0742e-03],
          [-9.3283e-03],
          ...,
          [ 3.1338e-04],
          [ 2.9368e-04],
          [-5.4839e-03]],

         ...,

         [[-9.9294e-03],
          [-9.8670e-03],
          [ 8.0736e-03],
          ...,
          [-8.0634e-03],
          [-6.2947e-03],
          [ 1.6557e-03]],

         [[-1.1036e-02],
          [ 2.2586e-03],
          [ 4.1482e-03],
          ...,
          [ 1.0931e-02],
          [-5.8426e-03],
          [-9.8343e-03]],

         [[-6.8096e-03],
          [ 9.7504e-03],
          [-1.0631e-02],
          ...,
          [-1.0675e-02],
          [ 5.9405e-04],
          [ 2.6227e-03]]],


        [[[ 6.7340e-03],
          [ 4.7543e-05],
          [ 1.0792e-02],
          ...,
          [-9.7976e-03],
          [-6.8067e-03],
          [-3.5238e-03]],

         [[ 7.9694e-03],
          [-8.0345e-03],
          [ 9.9791e-04],
          ...,
          [ 6.9483e-03],
          [ 4.6078e-03],
          [-2.9550e-03]],

         [[-2.8871e-04],
          [ 3.1920e-04],
          [-3.5134e-03],
          ...,
          [ 9.2685e-03],
          [-4.1213e-03],
          [-1.0772e-02]],

         ...,

         [[ 5.4997e-03],
          [-4.0255e-03],
          [ 5.9621e-04],
          ...,
          [-2.2739e-03],
          [ 6.8724e-03],
          [ 1.5726e-03]],

         [[ 3.4677e-03],
          [ 3.0469e-03],
          [-3.9914e-03],
          ...,
          [-7.4979e-03],
          [ 2.3779e-03],
          [ 1.0419e-02]],

         [[ 1.7327e-03],
          [ 8.9369e-04],
          [ 1.6375e-05],
          ...,
          [-8.7015e-03],
          [-1.1028e-02],
          [-9.9011e-03]]],


        [[[-9.4850e-03],
          [-7.5446e-03],
          [-2.1882e-03],
          ...,
          [-2.6294e-03],
          [-1.0820e-02],
          [-2.0289e-03]],

         [[-1.0429e-02],
          [-7.5683e-03],
          [ 3.0170e-03],
          ...,
          [-8.3154e-03],
          [ 6.5768e-04],
          [ 7.8603e-04]],

         [[ 3.9663e-03],
          [-4.3973e-03],
          [ 1.0040e-03],
          ...,
          [ 9.5619e-03],
          [-1.0510e-02],
          [-8.2309e-03]],

         ...,

         [[ 4.2567e-03],
          [ 1.0486e-02],
          [ 1.2582e-03],
          ...,
          [-6.3995e-03],
          [ 1.0534e-02],
          [-9.1052e-03]],

         [[ 1.3666e-03],
          [-5.4226e-03],
          [-4.6537e-04],
          ...,
          [-9.1009e-03],
          [ 4.1441e-03],
          [ 8.5013e-03]],

         [[-1.8711e-03],
          [ 5.2739e-04],
          [-1.0536e-02],
          ...,
          [-5.8275e-03],
          [-2.2075e-03],
          [ 1.0424e-02]]]])
tensor([[[[ 1.2157e-02],
          [ 4.5268e-03],
          [ 1.0833e-02],
          ...,
          [ 2.3717e-03],
          [-9.5687e-03],
          [ 7.5824e-03]],

         [[-1.3361e-02],
          [ 4.5317e-03],
          [ 2.5718e-04],
          ...,
          [-1.2366e-02],
          [-1.1285e-02],
          [ 5.9209e-03]],

         [[ 6.5560e-03],
          [ 1.6656e-02],
          [-1.4582e-02],
          ...,
          [-4.1802e-03],
          [ 3.0212e-03],
          [-8.9680e-03]],

         ...,

         [[-7.4754e-03],
          [-2.0414e-03],
          [-1.3774e-02],
          ...,
          [-4.8475e-03],
          [ 6.4692e-03],
          [ 9.8765e-03]],

         [[-4.6661e-03],
          [-2.0294e-02],
          [-1.1907e-02],
          ...,
          [-4.9088e-03],
          [ 4.7209e-03],
          [-1.2796e-03]],

         [[-1.5549e-02],
          [ 2.1395e-03],
          [-1.0847e-02],
          ...,
          [-3.6810e-03],
          [ 1.4814e-03],
          [-6.4032e-03]]],


        [[[-1.2581e-02],
          [ 9.1731e-03],
          [-9.6692e-03],
          ...,
          [-1.3499e-02],
          [ 1.1484e-02],
          [ 2.3621e-03]],

         [[ 3.6553e-03],
          [-4.5457e-03],
          [ 6.3550e-03],
          ...,
          [ 2.4282e-03],
          [ 9.2426e-03],
          [ 1.3040e-03]],

         [[-4.1299e-03],
          [-9.1084e-03],
          [-6.0410e-03],
          ...,
          [-1.0354e-02],
          [-1.0817e-02],
          [ 1.3359e-03]],

         ...,

         [[ 4.9565e-03],
          [-4.2296e-03],
          [ 1.4547e-04],
          ...,
          [-1.1176e-02],
          [-2.8782e-03],
          [ 1.5550e-04]],

         [[ 3.2437e-03],
          [ 9.9151e-04],
          [-7.8622e-03],
          ...,
          [ 1.7624e-02],
          [ 3.0483e-03],
          [ 4.8343e-03]],

         [[ 9.3299e-04],
          [-4.6523e-04],
          [ 1.4627e-03],
          ...,
          [ 1.5240e-02],
          [-1.2455e-02],
          [-5.6164e-03]]],


        [[[ 1.7087e-02],
          [-9.4784e-05],
          [ 1.2506e-02],
          ...,
          [ 7.7965e-03],
          [-1.0368e-02],
          [ 9.6024e-03]],

         [[-1.1088e-02],
          [ 2.0783e-03],
          [ 1.5950e-03],
          ...,
          [ 9.5780e-03],
          [ 9.2081e-03],
          [-1.5087e-03]],

         [[-1.3484e-03],
          [-5.2741e-03],
          [-8.7240e-03],
          ...,
          [ 2.2251e-02],
          [ 2.5222e-03],
          [-1.0684e-02]],

         ...,

         [[-3.5725e-04],
          [-8.3274e-03],
          [-1.3842e-02],
          ...,
          [ 6.7234e-04],
          [-2.1592e-04],
          [-4.9784e-03]],

         [[-6.1352e-03],
          [-6.4069e-03],
          [ 1.9920e-03],
          ...,
          [ 6.0000e-03],
          [-1.6860e-02],
          [ 2.1389e-02]],

         [[ 1.3730e-03],
          [ 1.2846e-02],
          [-7.8209e-03],
          ...,
          [ 6.0038e-03],
          [ 2.4201e-02],
          [ 4.0065e-03]]],


        ...,


        [[[ 1.7746e-02],
          [ 2.8454e-04],
          [-2.3572e-02],
          ...,
          [ 1.5614e-02],
          [-1.2456e-02],
          [ 1.7921e-02]],

         [[-5.3013e-03],
          [ 1.0502e-02],
          [ 1.3067e-03],
          ...,
          [-1.3041e-02],
          [-1.1900e-02],
          [ 1.2098e-02]],

         [[ 8.5958e-03],
          [ 1.2733e-02],
          [-2.0142e-02],
          ...,
          [ 2.1506e-03],
          [ 7.5705e-03],
          [-4.7576e-03]],

         ...,

         [[-1.4535e-02],
          [-1.8507e-02],
          [ 1.1500e-02],
          ...,
          [-1.5232e-02],
          [-4.5514e-03],
          [ 2.2008e-03]],

         [[-2.8140e-03],
          [-1.7517e-02],
          [-3.4594e-03],
          ...,
          [ 1.8984e-02],
          [-2.0963e-02],
          [-3.2409e-03]],

         [[-2.7959e-02],
          [ 1.7620e-02],
          [-2.5852e-02],
          ...,
          [-3.4825e-04],
          [-1.1255e-02],
          [ 2.2949e-03]]],


        [[[ 1.5209e-02],
          [-4.8285e-03],
          [ 9.8684e-03],
          ...,
          [-2.1595e-02],
          [-1.4608e-02],
          [ 8.2556e-03]],

         [[ 4.8679e-04],
          [-1.1904e-02],
          [-1.9943e-04],
          ...,
          [ 1.1940e-02],
          [ 8.7430e-03],
          [ 3.3963e-03]],

         [[ 7.9216e-03],
          [ 8.1763e-03],
          [-2.7887e-02],
          ...,
          [ 2.1750e-02],
          [-3.3829e-02],
          [-1.0659e-02]],

         ...,

         [[ 3.0127e-03],
          [-8.4435e-03],
          [ 1.6726e-03],
          ...,
          [-8.7181e-03],
          [ 1.0636e-02],
          [ 9.2291e-03]],

         [[ 9.8315e-03],
          [ 1.8912e-03],
          [-1.3286e-03],
          ...,
          [-1.1664e-02],
          [-4.6914e-04],
          [-7.9117e-03]],

         [[-7.4033e-03],
          [ 2.3413e-02],
          [ 1.8323e-02],
          ...,
          [ 3.4710e-03],
          [ 9.4347e-03],
          [-4.2633e-03]]],


        [[[-1.9838e-02],
          [-2.6435e-03],
          [-2.6792e-02],
          ...,
          [-1.3709e-04],
          [-3.2987e-02],
          [ 6.0288e-03]],

         [[-1.9717e-03],
          [-2.7246e-04],
          [ 5.7679e-03],
          ...,
          [-1.7482e-02],
          [-5.0897e-04],
          [ 8.7735e-03]],

         [[ 6.8935e-03],
          [-1.3425e-02],
          [-1.1730e-02],
          ...,
          [ 1.5166e-02],
          [-1.2804e-02],
          [-5.8328e-03]],

         ...,

         [[ 1.1744e-02],
          [ 8.6912e-03],
          [ 8.2936e-03],
          ...,
          [-2.0148e-02],
          [ 6.4497e-03],
          [-1.4760e-02]],

         [[ 2.5760e-02],
          [-2.6349e-02],
          [-7.0522e-03],
          ...,
          [ 8.3552e-03],
          [-2.0260e-02],
          [ 5.5129e-03]],

         [[-2.6716e-02],
          [ 6.5424e-03],
          [-1.2986e-02],
          ...,
          [ 1.2683e-02],
          [-2.8841e-02],
          [ 3.9424e-02]]]])
##########################################################
decoder.convT1d.bias shape: torch.Size([64])
tensor([ 0.0002,  0.0088,  0.0058,  0.0051, -0.0097,  0.0057, -0.0105,  0.0033,
         0.0049, -0.0083,  0.0056, -0.0047, -0.0018,  0.0028, -0.0108, -0.0105,
        -0.0030, -0.0057,  0.0009, -0.0056, -0.0035, -0.0089, -0.0028,  0.0023,
         0.0032, -0.0109,  0.0048, -0.0101,  0.0083, -0.0052,  0.0054,  0.0006,
        -0.0100, -0.0011, -0.0039,  0.0003,  0.0073,  0.0028,  0.0090,  0.0009,
        -0.0107, -0.0073, -0.0041,  0.0097, -0.0011, -0.0063,  0.0100,  0.0064,
         0.0107, -0.0082,  0.0060,  0.0081,  0.0071,  0.0095, -0.0022,  0.0077,
         0.0098,  0.0080, -0.0041, -0.0100, -0.0027,  0.0088,  0.0087, -0.0080])
tensor([-0.0232,  0.0217,  0.0047,  0.0116, -0.0155,  0.0049, -0.0246, -0.0177,
        -0.0181,  0.0021, -0.0191, -0.0093, -0.0084, -0.0039, -0.0205, -0.0118,
        -0.0029,  0.0093, -0.0023,  0.0012,  0.0068, -0.0220,  0.0074,  0.0114,
        -0.0018, -0.0192,  0.0220, -0.0259, -0.0048,  0.0072,  0.0074, -0.0092,
        -0.0112,  0.0034, -0.0101,  0.0132,  0.0126,  0.0167, -0.0077,  0.0037,
        -0.0111,  0.0112,  0.0051,  0.0364, -0.0042, -0.0017,  0.0072, -0.0230,
         0.0128, -0.0011,  0.0023,  0.0186,  0.0105,  0.0028, -0.0263, -0.0052,
         0.0299,  0.0163, -0.0136, -0.0169, -0.0049,  0.0022, -0.0002, -0.0043])
##########################################################
decoder.prot_encoding.dense.weight shape: torch.Size([64, 64])
tensor([[ 0.0335, -0.1790, -0.1527,  ...,  0.1804,  0.0183,  0.2084],
        [ 0.2004,  0.0881,  0.1948,  ..., -0.0340,  0.1666, -0.0905],
        [-0.0251, -0.0803, -0.0254,  ...,  0.0726,  0.1688,  0.0812],
        ...,
        [ 0.1595,  0.0495, -0.1659,  ...,  0.0341,  0.0776, -0.1512],
        [-0.0973,  0.1731, -0.1664,  ...,  0.1238, -0.0278,  0.2110],
        [-0.2160, -0.2035, -0.1993,  ...,  0.1147, -0.1960,  0.2109]])
tensor([[ 0.0404, -0.1672, -0.1794,  ...,  0.1940,  0.0085,  0.2106],
        [ 0.2212,  0.0766,  0.1800,  ..., -0.0492,  0.1778, -0.1017],
        [-0.0363, -0.0843, -0.0355,  ...,  0.0465,  0.1890,  0.0873],
        ...,
        [ 0.1641,  0.0438, -0.1698,  ...,  0.0312,  0.0738, -0.1450],
        [-0.0863,  0.1641, -0.1776,  ...,  0.1049, -0.0318,  0.2153],
        [-0.2235, -0.2179, -0.1856,  ...,  0.1165, -0.1916,  0.2133]])
##########################################################
decoder.prot_encoding.dense.bias shape: torch.Size([64])
tensor([-0.0156,  0.0060, -0.1152, -0.0461,  0.0664,  0.1012, -0.0208,  0.0462,
         0.0692, -0.1189, -0.1227,  0.0053,  0.0758,  0.0431,  0.0303,  0.0631,
         0.0900,  0.0492,  0.1227,  0.0172, -0.0114,  0.0532, -0.0696,  0.0837,
        -0.0711,  0.0254, -0.0238, -0.1181,  0.0075,  0.1029,  0.0336, -0.0964,
        -0.0595, -0.1142,  0.0240, -0.0286, -0.0314,  0.0602, -0.0494,  0.0691,
        -0.0596, -0.0131,  0.0335,  0.1081, -0.1111,  0.0402, -0.0340,  0.0720,
         0.1160, -0.1161,  0.0089, -0.1178, -0.1167,  0.0720, -0.0471, -0.1061,
         0.0195, -0.0869,  0.0099,  0.0546, -0.1015,  0.0413,  0.0491, -0.0867])
tensor([-0.0103,  0.0069, -0.0994, -0.0619,  0.0745,  0.0924, -0.0140,  0.0396,
         0.0733, -0.1249, -0.1260,  0.0172,  0.0890,  0.0518,  0.0169,  0.0516,
         0.0987,  0.0530,  0.1417,  0.0104, -0.0032,  0.0531, -0.0603,  0.0969,
        -0.0890,  0.0229, -0.0449, -0.0947,  0.0101,  0.1163,  0.0475, -0.0942,
        -0.0412, -0.1134,  0.0482, -0.0165, -0.0438,  0.0502, -0.0540,  0.0534,
        -0.0666, -0.0241,  0.0156,  0.1172, -0.1117,  0.0444, -0.0169,  0.0759,
         0.0956, -0.1091,  0.0008, -0.1078, -0.0971,  0.0768, -0.0647, -0.1179,
         0.0181, -0.0852,  0.0025,  0.0540, -0.0973,  0.0456,  0.0499, -0.0801])
##########################################################
decoder.prot_encoding.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([0.9886, 0.9959, 1.0011, 0.9887, 1.0366, 0.9877, 1.0005, 0.9987, 0.9996,
        0.9901, 0.9980, 1.0022, 1.0188, 1.0181, 0.9797, 0.9906, 0.9941, 0.9987,
        1.0053, 0.9891, 1.0182, 0.9946, 1.0226, 1.0155, 1.0104, 1.0034, 0.9911,
        1.0211, 0.9843, 1.0043, 1.0101, 1.0114, 1.0121, 1.0060, 1.0113, 0.9909,
        0.9816, 0.9893, 0.9930, 0.9782, 0.9887, 0.9941, 0.9814, 1.0087, 1.0036,
        1.0010, 1.0007, 0.9932, 0.9866, 1.0011, 0.9954, 1.0077, 1.0252, 0.9913,
        0.9855, 0.9961, 1.0143, 1.0051, 1.0172, 1.0021, 1.0212, 1.0088, 0.9933,
        1.0083])
##########################################################
decoder.prot_encoding.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 0.0213, -0.0018,  0.0094, -0.0014, -0.0268, -0.0030,  0.0051,  0.0060,
         0.0159,  0.0008, -0.0081,  0.0282, -0.0018, -0.0109, -0.0263,  0.0076,
         0.0041,  0.0048,  0.0175, -0.0062,  0.0058,  0.0093, -0.0104, -0.0051,
        -0.0240, -0.0283, -0.0202,  0.0136,  0.0040,  0.0095,  0.0144,  0.0274,
         0.0072, -0.0265, -0.0056,  0.0121,  0.0135,  0.0154,  0.0034,  0.0022,
        -0.0151, -0.0189, -0.0017, -0.0153, -0.0067, -0.0022, -0.0093, -0.0083,
        -0.0209,  0.0263, -0.0150, -0.0045,  0.0084,  0.0324, -0.0245, -0.0219,
        -0.0238, -0.0279, -0.0361, -0.0044,  0.0233, -0.0213,  0.0189,  0.0048])
##########################################################
decoder.blks.block0.attention1.W_mix_k.weight shape: torch.Size([64, 128])
tensor([[-0.0204,  0.1018,  0.0357,  ...,  0.1241,  0.1748, -0.1421],
        [-0.1178, -0.0439, -0.1716,  ...,  0.1428,  0.0793, -0.1088],
        [-0.1522, -0.0637,  0.1326,  ...,  0.1419, -0.1311, -0.0066],
        ...,
        [-0.0935,  0.1171,  0.0839,  ..., -0.1188,  0.1670,  0.1342],
        [-0.1690, -0.1246, -0.1113,  ...,  0.0020, -0.0168,  0.1168],
        [ 0.1588,  0.0187,  0.0664,  ..., -0.0316, -0.0216,  0.1584]])
tensor([[-0.0323,  0.0984,  0.0342,  ...,  0.1232,  0.1736, -0.1491],
        [-0.1045, -0.0295, -0.1690,  ...,  0.1299,  0.0816, -0.1052],
        [-0.1495, -0.0707,  0.1331,  ...,  0.1517, -0.1142,  0.0008],
        ...,
        [-0.0747,  0.1150,  0.0723,  ..., -0.1302,  0.1702,  0.1333],
        [-0.1596, -0.1267, -0.1260,  ..., -0.0161, -0.0153,  0.1279],
        [ 0.1557,  0.0277,  0.0594,  ..., -0.0209, -0.0422,  0.1697]])
##########################################################
decoder.blks.block0.attention1.W_mix_q.weight shape: torch.Size([64, 128])
tensor([[ 0.0676,  0.1459, -0.1482,  ...,  0.1376, -0.1695,  0.1232],
        [-0.0269,  0.0988,  0.0836,  ...,  0.0571,  0.0165, -0.1210],
        [ 0.0943,  0.0790,  0.0803,  ..., -0.0697, -0.1601, -0.1394],
        ...,
        [-0.1712, -0.1340,  0.1267,  ..., -0.1250,  0.1028,  0.1115],
        [-0.1443, -0.0539,  0.0336,  ..., -0.1402,  0.1653, -0.0944],
        [-0.1626, -0.1415,  0.1562,  ...,  0.0717,  0.1706,  0.1512]])
tensor([[ 0.0829,  0.1530, -0.1549,  ...,  0.1292, -0.1569,  0.1405],
        [-0.0227,  0.1025,  0.0869,  ...,  0.0487,  0.0466, -0.1363],
        [ 0.1082,  0.0805,  0.0818,  ..., -0.0894, -0.1432, -0.1368],
        ...,
        [-0.1620, -0.1550,  0.1241,  ..., -0.1125,  0.0951,  0.1295],
        [-0.1435, -0.0721,  0.0346,  ..., -0.1238,  0.1482, -0.0898],
        [-0.1789, -0.1391,  0.1485,  ...,  0.0806,  0.1644,  0.1389]])
##########################################################
decoder.blks.block0.attention1.W_k.weight shape: torch.Size([64, 64])
tensor([[ 0.0221,  0.0418, -0.0892,  ...,  0.0701, -0.0799,  0.0776],
        [-0.0411, -0.0617, -0.0106,  ..., -0.0651, -0.0969, -0.1611],
        [-0.0899, -0.1377,  0.1754,  ..., -0.1358, -0.0089, -0.0950],
        ...,
        [-0.1149,  0.0361,  0.0503,  ..., -0.0388, -0.1757,  0.0566],
        [-0.0244, -0.0423, -0.0163,  ...,  0.1142, -0.0165,  0.0019],
        [ 0.1238, -0.0728,  0.0745,  ..., -0.0050,  0.1315,  0.1710]])
tensor([[ 2.5739e-02,  2.8492e-02, -8.0444e-02,  ...,  5.7146e-02,
         -8.4814e-02,  8.5078e-02],
        [-4.4795e-02, -4.3390e-02, -1.8359e-02,  ..., -5.0684e-02,
         -8.8942e-02, -1.7140e-01],
        [-9.2046e-02, -1.3183e-01,  1.6922e-01,  ..., -1.4016e-01,
         -7.2141e-05, -9.3685e-02],
        ...,
        [-9.6204e-02,  9.0875e-03,  6.7468e-02,  ..., -6.3703e-02,
         -1.8691e-01,  6.7422e-02],
        [-2.2835e-02, -4.3197e-02,  7.4142e-04,  ...,  1.0969e-01,
         -3.1473e-02,  4.9375e-03],
        [ 1.1229e-01, -6.7843e-02,  6.8259e-02,  ..., -6.4648e-03,
          1.3506e-01,  1.6709e-01]])
##########################################################
decoder.blks.block0.attention1.W_q.weight shape: torch.Size([64, 64])
tensor([[-0.1025,  0.1854,  0.0244,  ..., -0.1348, -0.1908,  0.0962],
        [-0.1447, -0.1444, -0.1502,  ..., -0.2021,  0.0442,  0.0562],
        [ 0.0526, -0.1381, -0.1857,  ...,  0.0957,  0.0306, -0.1029],
        ...,
        [-0.1452,  0.0784,  0.1983,  ...,  0.0395, -0.0046,  0.1873],
        [ 0.1893, -0.0845, -0.0427,  ...,  0.0230,  0.2162,  0.0200],
        [ 0.1258, -0.0430,  0.1634,  ...,  0.0866, -0.1375, -0.0578]])
tensor([[-0.0828,  0.1898,  0.0289,  ..., -0.1523, -0.2026,  0.0883],
        [-0.1562, -0.1425, -0.1564,  ..., -0.1890,  0.0612,  0.0659],
        [ 0.0534, -0.1266, -0.1648,  ...,  0.0873,  0.0208, -0.1186],
        ...,
        [-0.1393,  0.0853,  0.2089,  ...,  0.0192, -0.0095,  0.1781],
        [ 0.1931, -0.0998, -0.0564,  ...,  0.0275,  0.2155,  0.0309],
        [ 0.1263, -0.0469,  0.1540,  ...,  0.0951, -0.1437, -0.0489]])
##########################################################
decoder.blks.block0.attention1.W_v.weight shape: torch.Size([64, 64])
tensor([[-0.1868,  0.0112,  0.2099,  ...,  0.1759,  0.1997,  0.0598],
        [-0.0872,  0.0531,  0.0615,  ...,  0.2068, -0.0845,  0.0565],
        [-0.0967,  0.1381,  0.1697,  ...,  0.1923, -0.0446, -0.0026],
        ...,
        [ 0.0319,  0.2134,  0.1472,  ...,  0.0178,  0.0650,  0.1543],
        [ 0.1705, -0.1474,  0.1248,  ..., -0.1176,  0.1805,  0.1996],
        [ 0.0697, -0.0971,  0.0983,  ..., -0.1236,  0.1054,  0.1346]])
tensor([[-0.1781,  0.0250,  0.1964,  ...,  0.2060,  0.2468,  0.0424],
        [-0.0923,  0.0302,  0.0820,  ...,  0.1999, -0.1061,  0.0472],
        [-0.1044,  0.1432,  0.1768,  ...,  0.2000, -0.0389, -0.0033],
        ...,
        [ 0.0131,  0.2012,  0.1519,  ...,  0.0395,  0.0828,  0.1382],
        [ 0.1409, -0.1427,  0.0896,  ..., -0.1131,  0.1993,  0.2315],
        [ 0.0723, -0.1009,  0.1000,  ..., -0.1504,  0.0968,  0.1387]])
##########################################################
decoder.blks.block0.attention1.W_o.weight shape: torch.Size([64, 64])
tensor([[ 0.1482, -0.1853,  0.1155,  ...,  0.2024,  0.2006, -0.0896],
        [ 0.2162, -0.1011,  0.1475,  ...,  0.0706, -0.1086,  0.0247],
        [ 0.1503, -0.1010, -0.1917,  ..., -0.0497, -0.2161,  0.0635],
        ...,
        [-0.0493, -0.1094,  0.0331,  ..., -0.1006, -0.0438,  0.0451],
        [-0.0743, -0.0851, -0.0125,  ...,  0.1411, -0.1957,  0.1871],
        [ 0.0464,  0.0995, -0.0821,  ...,  0.0279,  0.0796, -0.0896]])
tensor([[ 0.1350, -0.1980,  0.1316,  ...,  0.2328,  0.2088, -0.0943],
        [ 0.2138, -0.1177,  0.1574,  ...,  0.0593, -0.1100,  0.0195],
        [ 0.1540, -0.1287, -0.2303,  ..., -0.0737, -0.2283,  0.0695],
        ...,
        [-0.0500, -0.1106,  0.0202,  ..., -0.1123, -0.0530,  0.0582],
        [-0.0833, -0.0865, -0.0055,  ...,  0.1425, -0.2101,  0.1735],
        [ 0.0294,  0.0823, -0.0844,  ...,  0.0017,  0.0915, -0.0786]])
##########################################################
decoder.blks.block0.addnorm1.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0309, 0.9889, 1.0173, 0.9984, 1.0035, 0.9904, 0.9845, 0.9975, 1.0035,
        0.9931, 0.9942, 0.9790, 0.9947, 0.9804, 0.9665, 1.0000, 1.0218, 1.0265,
        1.0269, 0.9760, 1.0206, 0.9977, 0.9985, 0.9945, 0.9960, 0.9948, 0.9852,
        0.9952, 0.9939, 0.9984, 0.9745, 0.9829, 0.9731, 1.0102, 1.0276, 0.9917,
        0.9867, 0.9790, 1.0133, 1.0007, 0.9948, 0.9911, 0.9809, 1.0113, 0.9930,
        0.9953, 0.9954, 1.0155, 1.0064, 0.9722, 1.0168, 1.0049, 0.9947, 1.0030,
        0.9901, 0.9916, 0.9997, 1.0190, 0.9744, 1.0076, 1.0120, 0.9642, 1.0078,
        0.9942])
##########################################################
decoder.blks.block0.addnorm1.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-0.0123,  0.0134, -0.0018, -0.0275, -0.0074, -0.0087,  0.0141, -0.0110,
         0.0132,  0.0009,  0.0205,  0.0181, -0.0174,  0.0044, -0.0166,  0.0235,
         0.0120,  0.0054, -0.0067, -0.0018,  0.0111,  0.0020, -0.0252,  0.0159,
        -0.0197,  0.0197, -0.0134, -0.0017, -0.0186, -0.0168, -0.0182, -0.0093,
        -0.0078, -0.0066,  0.0248,  0.0008, -0.0044,  0.0193,  0.0044, -0.0077,
        -0.0025,  0.0225, -0.0111,  0.0150,  0.0035, -0.0172, -0.0116,  0.0196,
         0.0071,  0.0215,  0.0063,  0.0008,  0.0094,  0.0317, -0.0185, -0.0012,
        -0.0094, -0.0036,  0.0304, -0.0148,  0.0015,  0.0003, -0.0146, -0.0087])
##########################################################
decoder.blks.block0.attention2.W_q.weight shape: torch.Size([64, 64])
tensor([[-0.0691,  0.0758,  0.1404,  ...,  0.1877, -0.0326, -0.0757],
        [-0.1031, -0.1113,  0.1783,  ...,  0.1314,  0.1099, -0.1244],
        [-0.0850, -0.1597, -0.1802,  ...,  0.1255,  0.0430,  0.1390],
        ...,
        [ 0.0822, -0.0973, -0.0098,  ..., -0.0767,  0.0151, -0.1456],
        [ 0.1883, -0.0241,  0.1165,  ...,  0.0843, -0.1806,  0.0956],
        [ 0.1467, -0.0226, -0.1144,  ..., -0.0643,  0.1439, -0.2106]])
tensor([[-0.0727,  0.0558,  0.1542,  ...,  0.1824, -0.0256, -0.0741],
        [-0.0838, -0.1069,  0.1647,  ...,  0.1152,  0.1234, -0.1196],
        [-0.0810, -0.1558, -0.1948,  ...,  0.1155,  0.0469,  0.1552],
        ...,
        [ 0.0849, -0.0922,  0.0085,  ..., -0.0737,  0.0028, -0.1405],
        [ 0.1687, -0.0314,  0.1037,  ...,  0.0734, -0.1937,  0.1078],
        [ 0.1118, -0.0536, -0.1379,  ..., -0.0506,  0.1472, -0.2186]])
##########################################################
decoder.blks.block0.attention2.W_k.weight shape: torch.Size([64, 64])
tensor([[-0.1140, -0.1788, -0.2116,  ...,  0.0832, -0.1181, -0.1158],
        [ 0.0787,  0.0302,  0.0830,  ..., -0.1052,  0.0807, -0.1525],
        [-0.0764,  0.1545,  0.0485,  ..., -0.1538,  0.1419, -0.2147],
        ...,
        [-0.0829, -0.1888,  0.2036,  ..., -0.1339, -0.1101, -0.1939],
        [-0.1621, -0.1408, -0.0798,  ...,  0.0013,  0.1951,  0.0651],
        [-0.0210,  0.1961, -0.1125,  ..., -0.1737,  0.1177,  0.1646]])
tensor([[-0.1135, -0.1634, -0.2421,  ...,  0.0887, -0.1352, -0.1179],
        [ 0.0874,  0.0410,  0.0795,  ..., -0.1093,  0.0915, -0.1656],
        [-0.0630,  0.1317,  0.0596,  ..., -0.1538,  0.1558, -0.2265],
        ...,
        [-0.0786, -0.1979,  0.1820,  ..., -0.1332, -0.0997, -0.1597],
        [-0.1639, -0.1425, -0.0903,  ..., -0.0039,  0.1906,  0.0776],
        [-0.0175,  0.1795, -0.0913,  ..., -0.1777,  0.1070,  0.1768]])
##########################################################
decoder.blks.block0.attention2.W_v.weight shape: torch.Size([64, 64])
tensor([[ 0.0518,  0.0608, -0.0615,  ..., -0.0470, -0.1433, -0.1595],
        [ 0.1597,  0.2039, -0.2061,  ..., -0.0797,  0.0496, -0.1001],
        [-0.1244, -0.0443, -0.0842,  ...,  0.0645,  0.0645, -0.2095],
        ...,
        [-0.0395,  0.0505, -0.1057,  ...,  0.0602, -0.1286, -0.0749],
        [ 0.0149,  0.0835,  0.1724,  ...,  0.1060,  0.0199, -0.1500],
        [ 0.0082,  0.1256,  0.0204,  ...,  0.0714, -0.1205,  0.0181]])
tensor([[ 0.0741,  0.0698, -0.0743,  ..., -0.0627, -0.1461, -0.1368],
        [ 0.1791,  0.2093, -0.1750,  ..., -0.0838,  0.0428, -0.0842],
        [-0.1299, -0.0616, -0.0821,  ...,  0.0619,  0.0832, -0.2197],
        ...,
        [-0.0517,  0.0490, -0.1048,  ...,  0.0744, -0.1540, -0.0916],
        [ 0.0026,  0.0852,  0.1746,  ...,  0.1082,  0.0175, -0.1669],
        [ 0.0033,  0.1388, -0.0138,  ...,  0.0835, -0.1095,  0.0239]])
##########################################################
decoder.blks.block0.attention2.W_o.weight shape: torch.Size([64, 64])
tensor([[-0.2103, -0.1486, -0.0401,  ..., -0.2131, -0.1988, -0.1521],
        [ 0.1318,  0.0712, -0.1000,  ...,  0.0831, -0.0643,  0.0529],
        [ 0.1127,  0.1811,  0.1943,  ...,  0.0569, -0.0748, -0.0218],
        ...,
        [-0.0093,  0.1429,  0.1092,  ...,  0.1594, -0.0807, -0.1498],
        [-0.1817, -0.1447, -0.0326,  ...,  0.0306,  0.0006,  0.0831],
        [-0.0967,  0.0828,  0.1044,  ..., -0.1256, -0.2036,  0.0643]])
tensor([[-0.2233, -0.1332, -0.0160,  ..., -0.2024, -0.1899, -0.1345],
        [ 0.1235,  0.0926, -0.0879,  ...,  0.1134, -0.0600,  0.0461],
        [ 0.0883,  0.1709,  0.1862,  ...,  0.0532, -0.0614, -0.0145],
        ...,
        [ 0.0136,  0.1228,  0.0972,  ...,  0.1537, -0.0934, -0.1407],
        [-0.1932, -0.1578, -0.0324,  ...,  0.0397,  0.0105,  0.0738],
        [-0.1080,  0.0972,  0.1204,  ..., -0.0966, -0.1947,  0.0660]])
##########################################################
decoder.blks.block0.addnorm2.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0201, 0.9900, 1.0027, 1.0056, 1.0042, 0.9980, 0.9882, 1.0066, 0.9960,
        1.0069, 0.9870, 1.0339, 0.9917, 0.9955, 0.9788, 1.0179, 1.0143, 1.0440,
        1.0272, 0.9703, 1.0140, 0.9876, 1.0100, 0.9970, 0.9901, 0.9800, 0.9871,
        0.9969, 0.9889, 1.0028, 1.0094, 0.9773, 0.9826, 1.0045, 1.0283, 0.9803,
        0.9803, 1.0108, 1.0021, 1.0032, 0.9851, 0.9827, 0.9810, 1.0106, 1.0052,
        1.0057, 1.0145, 1.0365, 1.0004, 0.9743, 1.0021, 0.9980, 0.9885, 0.9909,
        0.9968, 0.9901, 0.9986, 1.0196, 1.0172, 1.0108, 1.0085, 0.9627, 1.0158,
        1.0028])
##########################################################
decoder.blks.block0.addnorm2.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-0.0082,  0.0154,  0.0048, -0.0276, -0.0112, -0.0059,  0.0170, -0.0105,
         0.0160, -0.0006,  0.0137,  0.0152, -0.0145,  0.0032, -0.0183,  0.0226,
         0.0037, -0.0165, -0.0086, -0.0028,  0.0100, -0.0029, -0.0283,  0.0156,
        -0.0215,  0.0127, -0.0123,  0.0004, -0.0159, -0.0204, -0.0222, -0.0132,
        -0.0033, -0.0145,  0.0211,  0.0022, -0.0035,  0.0169,  0.0135, -0.0096,
         0.0110,  0.0200,  0.0006,  0.0153,  0.0030, -0.0326, -0.0207,  0.0207,
         0.0005,  0.0141,  0.0029, -0.0010,  0.0032,  0.0302, -0.0191, -0.0022,
        -0.0126, -0.0050,  0.0346, -0.0202, -0.0103,  0.0013, -0.0158, -0.0127])
##########################################################
decoder.blks.block0.ffn.dense1.weight shape: torch.Size([32, 64])
tensor([[-0.0919,  0.0558,  0.1574,  ...,  0.1809, -0.2082, -0.1139],
        [-0.1896,  0.1674,  0.2206,  ..., -0.1591, -0.2205, -0.1206],
        [ 0.0909,  0.2251,  0.1839,  ..., -0.0723,  0.0082,  0.2127],
        ...,
        [ 0.0190,  0.2087, -0.0288,  ..., -0.2036,  0.0859, -0.0161],
        [-0.0380,  0.0026,  0.1380,  ..., -0.1277, -0.1021,  0.0753],
        [ 0.1747,  0.0612,  0.1566,  ...,  0.0689,  0.0628, -0.1935]])
tensor([[-0.0825,  0.0620,  0.1449,  ...,  0.1350, -0.2394, -0.0874],
        [-0.1609,  0.1588,  0.2140,  ..., -0.1656, -0.2269, -0.1306],
        [ 0.1053,  0.2255,  0.1581,  ..., -0.0642, -0.0049,  0.2066],
        ...,
        [ 0.0347,  0.2029, -0.0297,  ..., -0.1918,  0.0895, -0.0054],
        [-0.0229, -0.0006,  0.1326,  ..., -0.1216, -0.1019,  0.0566],
        [ 0.1850,  0.0498,  0.1486,  ...,  0.0837,  0.0845, -0.1857]])
##########################################################
decoder.blks.block0.ffn.dense1.bias shape: torch.Size([32])
tensor([-0.0453, -0.1134, -0.0903, -0.0117,  0.0948, -0.0667,  0.0452,  0.0476,
         0.0641,  0.0528,  0.1018,  0.1019,  0.1093,  0.0345,  0.0986, -0.0900,
        -0.1136, -0.0401, -0.0901,  0.0659, -0.0307, -0.0715, -0.1055,  0.1057,
        -0.0629, -0.0035,  0.1037, -0.0327, -0.0488, -0.0441, -0.0415, -0.0498])
tensor([-0.0532, -0.0869, -0.0847, -0.0216,  0.1063, -0.0729,  0.0503,  0.0450,
         0.0806,  0.0144,  0.0914,  0.0866,  0.0945,  0.0357,  0.1449, -0.0818,
        -0.1187, -0.0267, -0.0770,  0.0464, -0.0077, -0.0775, -0.0963,  0.1323,
        -0.0819, -0.0345,  0.1181, -0.0531, -0.0588, -0.0363, -0.0300, -0.0416])
##########################################################
decoder.blks.block0.ffn.dense2.weight shape: torch.Size([64, 32])
tensor([[ 0.2355, -0.2392,  0.0246,  ..., -0.1807,  0.1809, -0.0800],
        [-0.0050,  0.1349, -0.1331,  ...,  0.0311, -0.2375,  0.1449],
        [ 0.2011,  0.0836, -0.0628,  ...,  0.0158, -0.1426,  0.0425],
        ...,
        [ 0.2003, -0.0480, -0.2347,  ..., -0.1683,  0.0306,  0.1440],
        [-0.1572, -0.0829, -0.0591,  ...,  0.0479, -0.0415, -0.1178],
        [-0.0088,  0.1864,  0.1947,  ..., -0.0635,  0.0642, -0.0705]])
tensor([[ 0.2276, -0.1977,  0.0173,  ..., -0.1831,  0.1774, -0.0950],
        [ 0.0071,  0.1594, -0.1175,  ...,  0.0228, -0.2503,  0.1780],
        [ 0.1777,  0.0624, -0.0722,  ...,  0.0121, -0.1673,  0.0327],
        ...,
        [ 0.2165, -0.0264, -0.2253,  ..., -0.1712,  0.0249,  0.1418],
        [-0.1547, -0.0647, -0.0474,  ...,  0.0276, -0.0584, -0.0963],
        [ 0.0026,  0.1795,  0.2065,  ..., -0.0763,  0.0448, -0.0823]])
##########################################################
decoder.blks.block0.ffn.dense2.bias shape: torch.Size([64])
tensor([-0.0304, -0.0036, -0.1003, -0.0717, -0.0723, -0.0703, -0.0937,  0.0652,
         0.1315,  0.0826, -0.0931,  0.0230, -0.0892, -0.0011, -0.0084,  0.0934,
        -0.0945,  0.0881,  0.0558,  0.1500,  0.1418, -0.0745,  0.0483, -0.0668,
         0.1475,  0.1312,  0.1296,  0.1154, -0.1151,  0.0371, -0.0881,  0.0610,
        -0.1113,  0.1497,  0.0067,  0.1080,  0.1214, -0.0733,  0.1538,  0.0889,
         0.1405, -0.1701,  0.1073,  0.0230,  0.0937, -0.0431,  0.1613,  0.1104,
         0.0452,  0.0583, -0.1577, -0.0533,  0.1438,  0.0804, -0.1673, -0.0665,
         0.1067,  0.0991,  0.0666,  0.1039, -0.0888,  0.1077, -0.1041,  0.0649])
tensor([-0.0313,  0.0185, -0.1232, -0.0678, -0.0888, -0.0936, -0.0750,  0.0473,
         0.1298,  0.0976, -0.0813,  0.0298, -0.0908,  0.0274, -0.0125,  0.1034,
        -0.0920,  0.0711,  0.0745,  0.1375,  0.1419, -0.1111,  0.0568, -0.0548,
         0.1425,  0.1464,  0.1014,  0.0880, -0.0975,  0.0242, -0.1052,  0.0646,
        -0.1332,  0.1616,  0.0050,  0.1194,  0.1399, -0.0529,  0.1545,  0.0643,
         0.1280, -0.1908,  0.0949,  0.0201,  0.0801, -0.0457,  0.1468,  0.1372,
         0.0508,  0.0469, -0.1747, -0.0423,  0.1401,  0.1164, -0.1699, -0.0639,
         0.0842,  0.1151,  0.0710,  0.0878, -0.1074,  0.1300, -0.0901,  0.0703])
##########################################################
decoder.blks.block0.addnorm3.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0138, 0.9953, 1.0157, 0.9967, 1.0270, 1.0012, 0.9971, 0.9719, 1.0019,
        1.0110, 0.9933, 1.0126, 1.0038, 1.0053, 0.9974, 0.9777, 0.9995, 1.0409,
        1.0129, 0.9830, 1.0069, 1.0109, 0.9829, 0.9992, 0.9976, 1.0080, 1.0136,
        1.0064, 0.9907, 0.9775, 0.9850, 1.0017, 1.0062, 0.9680, 0.9982, 0.9900,
        1.0029, 1.0130, 1.0083, 1.0016, 0.9533, 0.9600, 0.9819, 0.9961, 0.9806,
        0.9906, 1.0024, 1.0234, 0.9825, 0.9885, 0.9902, 0.9956, 0.9901, 1.0111,
        0.9959, 0.9914, 1.0251, 1.0113, 1.0166, 1.0087, 1.0129, 1.0125, 0.9971,
        0.9945])
##########################################################
decoder.blks.block0.addnorm3.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-0.0165,  0.0038, -0.0070, -0.0184, -0.0139, -0.0404,  0.0112, -0.0039,
         0.0068,  0.0036,  0.0380, -0.0065,  0.0086,  0.0119, -0.0001, -0.0123,
         0.0116, -0.0281,  0.0076, -0.0100,  0.0105, -0.0365, -0.0010,  0.0011,
        -0.0178,  0.0100, -0.0150, -0.0211,  0.0127, -0.0205, -0.0051,  0.0198,
        -0.0241,  0.0200, -0.0015, -0.0171,  0.0183,  0.0138,  0.0151, -0.0330,
        -0.0213, -0.0018,  0.0060,  0.0107, -0.0146, -0.0306, -0.0244,  0.0187,
         0.0090,  0.0273, -0.0200, -0.0094,  0.0199,  0.0335, -0.0183, -0.0029,
        -0.0123, -0.0069,  0.0032, -0.0140, -0.0138,  0.0021,  0.0075,  0.0149])
##########################################################
decoder.blks.block1.attention1.W_mix_k.weight shape: torch.Size([64, 128])
tensor([[-0.0963,  0.0824, -0.0641,  ..., -0.0939,  0.1170,  0.0913],
        [ 0.0846, -0.0796, -0.0981,  ...,  0.0278,  0.0875, -0.1211],
        [-0.0551,  0.0967, -0.0967,  ..., -0.1689, -0.0471, -0.1147],
        ...,
        [-0.1071,  0.1065, -0.0821,  ...,  0.0216, -0.0381,  0.1489],
        [-0.1328,  0.1220, -0.1075,  ...,  0.1348,  0.0442, -0.1171],
        [ 0.1380,  0.0144, -0.0495,  ..., -0.1445, -0.1375, -0.0036]])
tensor([[-0.1016,  0.0882, -0.0873,  ..., -0.0813,  0.1047,  0.0938],
        [ 0.1042, -0.0841, -0.1121,  ...,  0.0415,  0.0690, -0.1409],
        [-0.0713,  0.1056, -0.1010,  ..., -0.1680, -0.0546, -0.0943],
        ...,
        [-0.1101,  0.1015, -0.0811,  ..., -0.0067, -0.0244,  0.1480],
        [-0.1216,  0.1008, -0.1164,  ...,  0.1290,  0.0620, -0.1345],
        [ 0.1415,  0.0371, -0.0619,  ..., -0.1452, -0.1488, -0.0053]])
##########################################################
decoder.blks.block1.attention1.W_mix_q.weight shape: torch.Size([64, 128])
tensor([[ 0.0440,  0.1284,  0.1257,  ..., -0.1731, -0.1373, -0.0192],
        [ 0.0015, -0.1302, -0.0612,  ...,  0.1489, -0.1636, -0.1560],
        [ 0.0605, -0.1003, -0.0171,  ...,  0.0858, -0.1453, -0.0165],
        ...,
        [ 0.1733,  0.1657, -0.1713,  ...,  0.1730, -0.1101,  0.0171],
        [ 0.0159, -0.0527,  0.0883,  ...,  0.0248,  0.0683,  0.0225],
        [-0.0963, -0.0088,  0.0929,  ..., -0.0279,  0.0971, -0.1329]])
tensor([[ 0.0184,  0.1249,  0.1283,  ..., -0.1959, -0.1284, -0.0226],
        [ 0.0141, -0.1453, -0.0335,  ...,  0.1667, -0.1467, -0.1439],
        [ 0.0687, -0.1203, -0.0222,  ...,  0.0605, -0.1632, -0.0022],
        ...,
        [ 0.1870,  0.1673, -0.1689,  ...,  0.1850, -0.0979,  0.0171],
        [ 0.0176, -0.0308,  0.0514,  ...,  0.0243,  0.0571,  0.0282],
        [-0.1163, -0.0021,  0.0923,  ..., -0.0420,  0.0914, -0.1304]])
##########################################################
decoder.blks.block1.attention1.W_k.weight shape: torch.Size([64, 64])
tensor([[ 0.1215, -0.2036, -0.0414,  ...,  0.2153,  0.0653, -0.0494],
        [-0.2085, -0.1176, -0.0461,  ...,  0.1126, -0.0158,  0.0806],
        [ 0.0624,  0.1461, -0.2122,  ..., -0.0509,  0.0909, -0.1441],
        ...,
        [-0.0951,  0.1423, -0.0229,  ...,  0.0422,  0.0723, -0.1373],
        [ 0.1598,  0.1558,  0.2056,  ...,  0.1996, -0.1933, -0.0460],
        [ 0.1845,  0.0374, -0.1276,  ..., -0.2034, -0.0449,  0.0754]])
tensor([[ 0.1236, -0.1989, -0.0401,  ...,  0.2297,  0.0689, -0.0350],
        [-0.2302, -0.1149, -0.0354,  ...,  0.1211, -0.0151,  0.0968],
        [ 0.0519,  0.1320, -0.2259,  ..., -0.0769,  0.0815, -0.1573],
        ...,
        [-0.0883,  0.1377, -0.0491,  ...,  0.0356,  0.0568, -0.1467],
        [ 0.1681,  0.1341,  0.2083,  ...,  0.2081, -0.1867, -0.0427],
        [ 0.1714,  0.0408, -0.1276,  ..., -0.1714, -0.0513,  0.0813]])
##########################################################
decoder.blks.block1.attention1.W_q.weight shape: torch.Size([64, 64])
tensor([[-0.1762, -0.0939, -0.0204,  ...,  0.1555, -0.0069,  0.0915],
        [ 0.1140, -0.1191,  0.1260,  ...,  0.1462,  0.2104, -0.0423],
        [-0.1771,  0.1171,  0.0109,  ..., -0.0895,  0.0580,  0.1330],
        ...,
        [-0.0567,  0.0353, -0.0481,  ..., -0.0776, -0.0806, -0.1365],
        [-0.1044,  0.1726,  0.0323,  ..., -0.2018,  0.1349,  0.0471],
        [-0.0931, -0.0772,  0.1735,  ..., -0.1515, -0.0685, -0.1494]])
tensor([[-0.1739, -0.1103, -0.0078,  ...,  0.1781,  0.0289,  0.1028],
        [ 0.1049, -0.1317,  0.1445,  ...,  0.1609,  0.2041, -0.0236],
        [-0.1764,  0.1229,  0.0147,  ..., -0.0794,  0.0350,  0.1462],
        ...,
        [-0.0753,  0.0259, -0.0416,  ..., -0.0707, -0.0624, -0.1453],
        [-0.0874,  0.1840,  0.0409,  ..., -0.2087,  0.1328,  0.0449],
        [-0.1123, -0.1263,  0.1989,  ..., -0.1347, -0.0511, -0.1480]])
##########################################################
decoder.blks.block1.attention1.W_v.weight shape: torch.Size([64, 64])
tensor([[ 0.0991,  0.1416,  0.1118,  ..., -0.0123,  0.1151, -0.1952],
        [-0.1224,  0.1650, -0.1619,  ...,  0.0931,  0.0133,  0.0561],
        [-0.1012, -0.1777, -0.0408,  ..., -0.1274,  0.0250,  0.1338],
        ...,
        [-0.1382, -0.0085, -0.0122,  ...,  0.0467, -0.1091, -0.0212],
        [-0.1034, -0.1500, -0.1460,  ..., -0.0778, -0.0181,  0.1999],
        [ 0.1758, -0.0684,  0.1269,  ..., -0.1695,  0.1695,  0.0775]])
tensor([[ 0.0898,  0.1522,  0.1274,  ..., -0.0225,  0.1311, -0.1803],
        [-0.0925,  0.1502, -0.1863,  ...,  0.0936,  0.0228,  0.0521],
        [-0.0803, -0.1832, -0.0239,  ..., -0.1487,  0.0297,  0.0986],
        ...,
        [-0.1562, -0.0229, -0.0276,  ...,  0.0537, -0.1240,  0.0112],
        [-0.1119, -0.1458, -0.1350,  ..., -0.0654, -0.0346,  0.2016],
        [ 0.1694, -0.0834,  0.1236,  ..., -0.1771,  0.1706,  0.0921]])
##########################################################
decoder.blks.block1.attention1.W_o.weight shape: torch.Size([64, 64])
tensor([[-0.1316, -0.1885,  0.0824,  ...,  0.0675, -0.1851,  0.0119],
        [ 0.0905,  0.1075,  0.0174,  ...,  0.1812, -0.0011,  0.0322],
        [ 0.0864,  0.0777,  0.0506,  ..., -0.1952, -0.1086,  0.1257],
        ...,
        [-0.1329, -0.0964, -0.1933,  ..., -0.1003, -0.1761, -0.0462],
        [-0.1585, -0.0017, -0.0723,  ...,  0.1187,  0.0522,  0.0040],
        [-0.0420,  0.0068, -0.0448,  ..., -0.2085,  0.1838, -0.0174]])
tensor([[-0.1090, -0.2292,  0.0914,  ...,  0.0648, -0.1893,  0.0403],
        [ 0.0575,  0.1134,  0.0157,  ...,  0.1833,  0.0401,  0.0159],
        [ 0.0644,  0.0875,  0.0288,  ..., -0.2116, -0.1003,  0.1516],
        ...,
        [-0.1471, -0.0912, -0.2184,  ..., -0.1108, -0.1855, -0.0526],
        [-0.1282,  0.0047, -0.0529,  ...,  0.1055,  0.0600,  0.0260],
        [-0.0403, -0.0049, -0.0317,  ..., -0.2311,  0.1617,  0.0160]])
##########################################################
decoder.blks.block1.addnorm1.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0218, 0.9837, 0.9906, 1.0068, 1.0101, 0.9902, 1.0345, 0.9824, 0.9800,
        0.9704, 1.0000, 0.9738, 0.9799, 0.9872, 0.9953, 0.9789, 0.9758, 1.0170,
        0.9991, 0.9899, 1.0022, 0.9819, 0.9868, 1.0078, 1.0212, 0.9809, 1.0272,
        1.0175, 0.9971, 1.0155, 1.0076, 0.9866, 1.0020, 1.0247, 1.0269, 1.0241,
        1.0188, 0.9943, 1.0139, 1.0109, 0.9542, 1.0073, 1.0113, 1.0238, 0.9887,
        0.9857, 1.0037, 0.9824, 0.9910, 0.9869, 0.9892, 1.0066, 1.0094, 1.0130,
        0.9888, 1.0531, 0.9912, 1.0089, 0.9970, 1.0105, 1.0395, 0.9940, 0.9981,
        1.0132])
##########################################################
decoder.blks.block1.addnorm1.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-0.0375,  0.0125,  0.0160, -0.0006, -0.0243,  0.0110,  0.0091,  0.0110,
         0.0293,  0.0027,  0.0040,  0.0082,  0.0038, -0.0076,  0.0084, -0.0179,
        -0.0086, -0.0202, -0.0005, -0.0202,  0.0219,  0.0040,  0.0336,  0.0157,
         0.0102, -0.0075, -0.0478, -0.0146, -0.0039, -0.0067, -0.0187,  0.0091,
        -0.0247, -0.0174,  0.0134, -0.0290,  0.0045,  0.0231,  0.0234,  0.0150,
        -0.0163,  0.0003,  0.0137,  0.0090, -0.0045, -0.0020, -0.0268, -0.0163,
        -0.0197,  0.0366,  0.0111,  0.0100, -0.0083,  0.0287, -0.0003, -0.0098,
         0.0082, -0.0246,  0.0318, -0.0282,  0.0053,  0.0166, -0.0127,  0.0163])
##########################################################
decoder.blks.block1.attention2.W_q.weight shape: torch.Size([64, 64])
tensor([[ 0.0636, -0.2159,  0.1387,  ...,  0.0606,  0.1620, -0.1273],
        [ 0.0893, -0.1643, -0.1626,  ..., -0.0017,  0.1586, -0.0247],
        [-0.0500,  0.0587, -0.1459,  ..., -0.0104,  0.1531,  0.0331],
        ...,
        [-0.0938, -0.1620,  0.1250,  ...,  0.1938, -0.1574,  0.1119],
        [ 0.1944, -0.0295,  0.0461,  ..., -0.1919,  0.1668,  0.1783],
        [ 0.1023,  0.2091, -0.1217,  ...,  0.1605, -0.0265, -0.0995]])
tensor([[ 0.0737, -0.1972,  0.1572,  ...,  0.0819,  0.1498, -0.1317],
        [ 0.0948, -0.1546, -0.1858,  ...,  0.0171,  0.1278,  0.0051],
        [-0.0427,  0.0760, -0.1279,  ..., -0.0152,  0.1744,  0.0096],
        ...,
        [-0.0602, -0.1851,  0.0990,  ...,  0.1824, -0.1820,  0.1398],
        [ 0.2241, -0.0408,  0.0653,  ..., -0.1678,  0.1737,  0.1708],
        [ 0.0763,  0.2167, -0.1144,  ...,  0.1479, -0.0316, -0.0994]])
##########################################################
decoder.blks.block1.attention2.W_k.weight shape: torch.Size([64, 64])
tensor([[-0.1826, -0.2065,  0.0828,  ...,  0.1194,  0.1246,  0.1187],
        [-0.2083, -0.0878, -0.1365,  ..., -0.1616,  0.1450,  0.1440],
        [-0.1426, -0.0837,  0.0412,  ..., -0.0575,  0.0421, -0.0090],
        ...,
        [-0.0188,  0.1010,  0.0725,  ...,  0.0251,  0.2157,  0.1234],
        [ 0.1395, -0.0697, -0.0079,  ...,  0.0703, -0.0725,  0.0547],
        [-0.2163, -0.1680, -0.0821,  ..., -0.1776,  0.1434,  0.0224]])
tensor([[-0.1883, -0.2096,  0.0890,  ...,  0.1380,  0.1211,  0.0932],
        [-0.2051, -0.1020, -0.1364,  ..., -0.1700,  0.1484,  0.1369],
        [-0.1582, -0.0932,  0.0425,  ..., -0.0679,  0.0200, -0.0032],
        ...,
        [-0.0462,  0.1151,  0.0395,  ...,  0.0600,  0.2267,  0.0971],
        [ 0.1290, -0.0734,  0.0131,  ...,  0.1039, -0.0689,  0.0461],
        [-0.1819, -0.1625, -0.0761,  ..., -0.2019,  0.1457,  0.0398]])
##########################################################
decoder.blks.block1.attention2.W_v.weight shape: torch.Size([64, 64])
tensor([[ 0.1217, -0.1858,  0.1654,  ..., -0.1121,  0.2093,  0.1673],
        [-0.0456,  0.2057, -0.1528,  ...,  0.0043,  0.1855, -0.0920],
        [ 0.0538,  0.1224,  0.0374,  ..., -0.0657,  0.1736, -0.0709],
        ...,
        [ 0.1416, -0.0501,  0.0664,  ..., -0.1606,  0.1604, -0.1389],
        [ 0.1394, -0.0838,  0.1753,  ...,  0.1203, -0.1719,  0.0201],
        [ 0.2102,  0.1272,  0.0699,  ..., -0.1300, -0.1573,  0.0142]])
tensor([[ 0.1653, -0.1679,  0.1275,  ..., -0.1356,  0.2375,  0.1895],
        [-0.0492,  0.2194, -0.1585,  ...,  0.0003,  0.1876, -0.0981],
        [ 0.0171,  0.0960,  0.0594,  ..., -0.0405,  0.1500, -0.0799],
        ...,
        [ 0.1300, -0.0449,  0.0999,  ..., -0.1492,  0.1276, -0.1422],
        [ 0.1500, -0.0609,  0.1551,  ...,  0.1052, -0.1655,  0.0347],
        [ 0.2168,  0.1040,  0.0770,  ..., -0.1230, -0.1623,  0.0421]])
##########################################################
decoder.blks.block1.attention2.W_o.weight shape: torch.Size([64, 64])
tensor([[ 0.0447, -0.1905, -0.0354,  ..., -0.1265, -0.0583, -0.1835],
        [-0.1789,  0.1132,  0.1675,  ..., -0.1557, -0.0220, -0.2026],
        [-0.0428, -0.0598,  0.0468,  ..., -0.1301, -0.0322, -0.1231],
        ...,
        [ 0.0345, -0.1110,  0.2101,  ...,  0.0534,  0.0189, -0.0689],
        [ 0.1774, -0.0561,  0.0254,  ...,  0.1286,  0.1264, -0.1492],
        [ 0.1218, -0.0118, -0.1972,  ..., -0.1129,  0.2081,  0.0584]])
tensor([[ 0.0081, -0.1618, -0.0300,  ..., -0.1451, -0.1002, -0.2017],
        [-0.1713,  0.1140,  0.1580,  ..., -0.1634, -0.0268, -0.2031],
        [-0.0216, -0.0858,  0.0132,  ..., -0.0965, -0.0159, -0.1130],
        ...,
        [ 0.0525, -0.1214,  0.1975,  ...,  0.0502,  0.0259, -0.0759],
        [ 0.1525, -0.0304,  0.0218,  ...,  0.1151,  0.1238, -0.1325],
        [ 0.1565, -0.0603, -0.2043,  ..., -0.0834,  0.2421,  0.0901]])
##########################################################
decoder.blks.block1.addnorm2.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0264, 0.9753, 1.0186, 1.0101, 1.0296, 1.0007, 1.0227, 0.9935, 0.9914,
        0.9837, 0.9800, 0.9919, 0.9688, 1.0133, 0.9929, 1.0167, 0.9947, 0.9950,
        0.9703, 0.9934, 1.0012, 0.9977, 0.9830, 1.0085, 1.0177, 0.9731, 1.0231,
        1.0204, 0.9937, 1.0013, 1.0037, 0.9944, 0.9915, 1.0175, 1.0408, 1.0194,
        1.0082, 0.9899, 1.0318, 1.0118, 0.9838, 1.0044, 1.0073, 1.0114, 0.9876,
        0.9989, 1.0066, 0.9802, 0.9930, 0.9627, 0.9765, 1.0007, 0.9957, 0.9728,
        0.9860, 1.0434, 0.9851, 1.0087, 0.9943, 1.0209, 1.0274, 1.0010, 1.0078,
        1.0376])
##########################################################
decoder.blks.block1.addnorm2.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-0.0308,  0.0037,  0.0191,  0.0001, -0.0176,  0.0076,  0.0184,  0.0075,
         0.0471,  0.0020,  0.0038,  0.0020,  0.0091, -0.0116,  0.0079, -0.0304,
        -0.0196, -0.0221, -0.0023, -0.0330,  0.0184,  0.0080,  0.0334,  0.0182,
         0.0063, -0.0085, -0.0479, -0.0147,  0.0021, -0.0097, -0.0120,  0.0105,
        -0.0236, -0.0196,  0.0262, -0.0240,  0.0070,  0.0189,  0.0293,  0.0100,
        -0.0199,  0.0037,  0.0178,  0.0155, -0.0035,  0.0002, -0.0187, -0.0195,
        -0.0158,  0.0417,  0.0077,  0.0133, -0.0060,  0.0408, -0.0083,  0.0031,
         0.0085, -0.0228,  0.0402, -0.0435,  0.0076,  0.0214, -0.0107,  0.0148])
##########################################################
decoder.blks.block1.ffn.dense1.weight shape: torch.Size([32, 64])
tensor([[ 0.1401, -0.0027, -0.1930,  ...,  0.0029,  0.0220,  0.0398],
        [-0.1561,  0.0789,  0.0904,  ..., -0.2115, -0.2406,  0.0928],
        [-0.0927,  0.1488,  0.0592,  ..., -0.1592, -0.0730,  0.0263],
        ...,
        [ 0.2490,  0.2184,  0.1427,  ..., -0.0995, -0.0434, -0.0025],
        [-0.0461, -0.2280, -0.1902,  ...,  0.1725, -0.0887, -0.2428],
        [-0.0891,  0.1157,  0.2111,  ..., -0.1289, -0.0443, -0.1196]])
tensor([[ 0.1276, -0.0035, -0.1918,  ...,  0.0116,  0.0193,  0.0448],
        [-0.1741,  0.0442,  0.1433,  ..., -0.2144, -0.2655,  0.1137],
        [-0.1152,  0.1258,  0.0670,  ..., -0.1743, -0.0816,  0.0223],
        ...,
        [ 0.2051,  0.2103,  0.1514,  ..., -0.0684, -0.0454,  0.0246],
        [-0.0827, -0.2547, -0.1705,  ...,  0.1793, -0.1100, -0.2394],
        [-0.0773,  0.1004,  0.1809,  ..., -0.1152, -0.0307, -0.1518]])
##########################################################
decoder.blks.block1.ffn.dense1.bias shape: torch.Size([32])
tensor([ 0.0592, -0.0885, -0.0201,  0.0998,  0.0798,  0.1084, -0.0895, -0.0230,
        -0.0754, -0.0746, -0.0783,  0.0939,  0.0851, -0.0619, -0.1204, -0.1110,
         0.0620, -0.0600,  0.0529, -0.0556,  0.0550, -0.1121,  0.1247,  0.1207,
        -0.0296, -0.0378,  0.0497, -0.0267, -0.0908, -0.1246, -0.0098, -0.0189])
tensor([ 0.0755, -0.0580, -0.0089,  0.1121,  0.0714,  0.1004, -0.0815, -0.0027,
        -0.0900, -0.0588, -0.0428,  0.1133,  0.1038, -0.0523, -0.1016, -0.1123,
         0.0437, -0.0622,  0.0340, -0.0620,  0.0731, -0.1259,  0.1464,  0.0799,
        -0.0021, -0.0375,  0.0305, -0.0386, -0.0669, -0.1047,  0.0130, -0.0313])
##########################################################
decoder.blks.block1.ffn.dense2.weight shape: torch.Size([64, 32])
tensor([[-0.1315,  0.0789, -0.2052,  ...,  0.0543,  0.1202, -0.2090],
        [ 0.0817, -0.0603,  0.1202,  ...,  0.0091, -0.1263, -0.1933],
        [-0.2104, -0.1966, -0.0277,  ..., -0.0351,  0.0301, -0.1169],
        ...,
        [-0.1273,  0.1969,  0.0494,  ..., -0.1996,  0.1375, -0.0977],
        [-0.1250, -0.1290,  0.0411,  ...,  0.0019, -0.1998, -0.1691],
        [ 0.1059, -0.2107, -0.1183,  ...,  0.0743, -0.0144, -0.2205]])
tensor([[-0.1186,  0.0869, -0.1707,  ...,  0.0371,  0.1166, -0.1963],
        [ 0.0654, -0.0519,  0.1223,  ...,  0.0203, -0.1324, -0.2013],
        [-0.2088, -0.1902, -0.0368,  ..., -0.0321,  0.0326, -0.1025],
        ...,
        [-0.1325,  0.2474,  0.0808,  ..., -0.1622,  0.1535, -0.1030],
        [-0.1204, -0.1468,  0.0318,  ...,  0.0008, -0.2067, -0.1729],
        [ 0.1080, -0.2340, -0.1240,  ...,  0.0430, -0.0046, -0.2099]])
##########################################################
decoder.blks.block1.ffn.dense2.bias shape: torch.Size([64])
tensor([-0.0690, -0.0411, -0.0658, -0.1233, -0.0911,  0.1355, -0.1684, -0.1461,
        -0.0819, -0.1400,  0.1613, -0.0127, -0.1755,  0.1185,  0.0956, -0.0853,
         0.1143,  0.0760,  0.1330, -0.0978, -0.0875, -0.1648, -0.1365, -0.0507,
        -0.0303,  0.1517, -0.0701,  0.1414, -0.1725, -0.0278, -0.1679,  0.0401,
        -0.1003, -0.0911,  0.0704,  0.1167,  0.0517, -0.0336, -0.1112, -0.1103,
         0.0274,  0.0698, -0.1211, -0.1358, -0.1118,  0.1607, -0.0260,  0.0791,
        -0.1188, -0.0633,  0.0070,  0.1417,  0.0855, -0.1126, -0.0252, -0.0186,
        -0.1411,  0.0818,  0.1369,  0.0333, -0.0573,  0.1277, -0.0330, -0.1331])
tensor([-0.0639, -0.0362, -0.0678, -0.1618, -0.1045,  0.1432, -0.1593, -0.1363,
        -0.0571, -0.1338,  0.1707, -0.0164, -0.1869,  0.0923,  0.0577, -0.0913,
         0.1236,  0.0859,  0.1158, -0.1111, -0.0876, -0.1424, -0.1243, -0.0394,
        -0.0157,  0.1325, -0.0779,  0.1273, -0.1746, -0.0186, -0.2026,  0.0511,
        -0.1140, -0.1183,  0.0933,  0.1275,  0.0654, -0.0216, -0.1163, -0.1190,
         0.0368,  0.0579, -0.1608, -0.1451, -0.1507,  0.1404, -0.0342,  0.0692,
        -0.1321, -0.0299,  0.0063,  0.1600,  0.1049, -0.0990, -0.0222, -0.0337,
        -0.1249,  0.0833,  0.1820,  0.0303, -0.0642,  0.1652, -0.0398, -0.1419])
##########################################################
decoder.blks.block1.addnorm3.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0029, 1.0006, 1.0068, 1.0112, 1.0138, 0.9878, 0.9855, 0.9896, 0.9972,
        0.9995, 0.9926, 0.9663, 1.0055, 1.0321, 0.9937, 0.9792, 0.9963, 0.9979,
        0.9723, 1.0068, 1.0060, 1.0079, 0.9850, 0.9647, 0.9794, 0.9825, 1.0012,
        0.9719, 1.0179, 0.9945, 1.0206, 0.9975, 0.9969, 1.0392, 1.0414, 1.0061,
        0.9771, 0.9929, 1.0122, 1.0309, 1.0114, 0.9776, 1.0320, 0.9928, 0.9962,
        0.9890, 0.9651, 0.9998, 0.9881, 0.9686, 1.0095, 0.9973, 1.0008, 0.9870,
        1.0207, 1.0042, 1.0111, 1.0033, 1.0138, 1.0080, 1.0375, 1.0301, 1.0053,
        1.0289])
##########################################################
decoder.blks.block1.addnorm3.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-1.1599e-02,  2.1028e-03,  6.6489e-03, -2.4199e-02, -1.8997e-02,
         1.0910e-02, -2.0326e-03,  1.3906e-02,  6.8601e-03, -1.0768e-02,
        -3.9611e-03, -5.1238e-02,  1.5237e-02, -2.0292e-02, -1.5900e-02,
        -3.1370e-02,  1.3270e-02,  2.0079e-02,  7.7274e-03, -2.1750e-02,
        -4.4129e-04,  1.0264e-03,  1.2300e-02, -6.2685e-03,  1.7584e-02,
        -1.1068e-02, -8.1059e-03, -1.1229e-02,  5.4348e-04, -2.1974e-03,
         5.4804e-03, -4.1251e-03, -2.4380e-03, -4.4806e-02,  1.8554e-02,
         1.3517e-02,  1.9218e-02,  1.5111e-02,  3.7467e-03,  2.0082e-02,
        -2.8178e-03, -5.0984e-05, -8.1252e-03, -7.5369e-03, -3.0699e-02,
        -1.9139e-02, -1.4916e-02, -1.1736e-02, -1.7195e-02,  8.7006e-03,
         1.7200e-02, -5.9435e-03, -1.0870e-02,  1.8462e-02, -1.8143e-03,
        -1.3604e-02, -1.7866e-03, -1.8459e-02,  1.7292e-02, -4.1586e-02,
         4.0093e-03,  3.0548e-02, -3.3061e-02,  1.9235e-02])
##########################################################
decoder.blks.block2.attention1.W_mix_k.weight shape: torch.Size([64, 128])
tensor([[-0.1266,  0.1678, -0.0332,  ..., -0.0538,  0.1763, -0.1553],
        [-0.0814, -0.1401,  0.1471,  ...,  0.0469, -0.0035, -0.1507],
        [-0.0802,  0.0280, -0.0145,  ..., -0.1359, -0.0565, -0.0915],
        ...,
        [ 0.0925, -0.1495, -0.1165,  ..., -0.0933,  0.0266, -0.1516],
        [-0.0923, -0.1549, -0.0592,  ...,  0.0375,  0.0875,  0.0603],
        [-0.0685, -0.1640,  0.1027,  ..., -0.0464,  0.0221,  0.0046]])
tensor([[-0.1087,  0.1967, -0.0297,  ..., -0.0515,  0.1734, -0.1684],
        [-0.0519, -0.1046,  0.1399,  ...,  0.0757,  0.0342, -0.1441],
        [-0.0785,  0.0110, -0.0073,  ..., -0.1540, -0.0896, -0.1046],
        ...,
        [ 0.1379, -0.1291, -0.1060,  ..., -0.0843,  0.0186, -0.1636],
        [-0.0867, -0.1603, -0.0779,  ...,  0.0304,  0.1122,  0.0391],
        [-0.0746, -0.1542,  0.0926,  ..., -0.0456,  0.0127, -0.0060]])
##########################################################
decoder.blks.block2.attention1.W_mix_q.weight shape: torch.Size([64, 128])
tensor([[ 0.0890, -0.0446,  0.0687,  ...,  0.1520, -0.1638, -0.1041],
        [-0.0135, -0.0224,  0.1144,  ...,  0.1385, -0.0702, -0.0337],
        [ 0.1147, -0.0334,  0.0446,  ..., -0.0037,  0.0560,  0.0423],
        ...,
        [ 0.0043, -0.1393,  0.1434,  ..., -0.1666, -0.0965, -0.0652],
        [ 0.1207,  0.1328,  0.1602,  ..., -0.0731,  0.0025, -0.1650],
        [-0.1406,  0.0643,  0.0282,  ...,  0.0225,  0.1152,  0.1345]])
tensor([[ 0.0887, -0.0547,  0.0364,  ...,  0.1581, -0.1801, -0.0892],
        [-0.0187, -0.0424,  0.1062,  ...,  0.1241, -0.0871, -0.0048],
        [ 0.1305, -0.0217,  0.0488,  ...,  0.0217,  0.0644,  0.0211],
        ...,
        [ 0.0126, -0.1117,  0.1512,  ..., -0.1635, -0.0909, -0.0696],
        [ 0.1201,  0.1274,  0.1411,  ..., -0.0785, -0.0043, -0.1568],
        [-0.1269,  0.0614,  0.0322,  ...,  0.0228,  0.0670,  0.1560]])
##########################################################
decoder.blks.block2.attention1.W_k.weight shape: torch.Size([64, 64])
tensor([[-0.0528,  0.0847, -0.0303,  ..., -0.0154,  0.0353, -0.1796],
        [-0.0577, -0.1600,  0.1239,  ...,  0.1713, -0.0724,  0.0713],
        [-0.0433, -0.1774, -0.1331,  ...,  0.0490, -0.1914, -0.1054],
        ...,
        [ 0.1965, -0.1588, -0.0659,  ...,  0.1251,  0.1888,  0.1525],
        [-0.0016,  0.1102, -0.0469,  ...,  0.1352,  0.1724,  0.1054],
        [-0.1179, -0.1319,  0.0134,  ..., -0.0947, -0.1262,  0.0677]])
tensor([[-0.0333,  0.0772, -0.0076,  ...,  0.0055,  0.0154, -0.1809],
        [-0.0505, -0.1645,  0.1765,  ...,  0.1758, -0.0917,  0.0935],
        [-0.0355, -0.1642, -0.0950,  ...,  0.0593, -0.1608, -0.1068],
        ...,
        [ 0.2022, -0.1325, -0.0628,  ...,  0.1318,  0.2167,  0.1638],
        [-0.0041,  0.1309, -0.0396,  ...,  0.1580,  0.1691,  0.1028],
        [-0.1382, -0.1380,  0.0313,  ..., -0.1035, -0.1272,  0.0355]])
##########################################################
decoder.blks.block2.attention1.W_q.weight shape: torch.Size([64, 64])
tensor([[ 0.0029, -0.1510, -0.0938,  ...,  0.2031, -0.0859,  0.0109],
        [-0.1301,  0.0337, -0.1493,  ..., -0.0356, -0.1732, -0.0802],
        [-0.0045, -0.0484, -0.0126,  ..., -0.2142,  0.1388, -0.1299],
        ...,
        [ 0.1777, -0.2075, -0.0922,  ..., -0.0772, -0.1437,  0.1545],
        [ 0.1130, -0.1638,  0.1693,  ...,  0.1544,  0.1632,  0.1406],
        [-0.0738, -0.1475, -0.2130,  ...,  0.1867,  0.0328,  0.0316]])
tensor([[ 0.0032, -0.1499, -0.1025,  ...,  0.1962, -0.0790,  0.0105],
        [-0.1424,  0.0352, -0.1596,  ..., -0.0042, -0.1604, -0.0957],
        [-0.0175, -0.0420, -0.0101,  ..., -0.2315,  0.1549, -0.1366],
        ...,
        [ 0.2071, -0.2065, -0.0618,  ..., -0.0663, -0.1494,  0.1719],
        [ 0.1038, -0.1742,  0.1735,  ...,  0.1758,  0.1588,  0.1291],
        [-0.0875, -0.1697, -0.2317,  ...,  0.1752,  0.0214,  0.0660]])
##########################################################
decoder.blks.block2.attention1.W_v.weight shape: torch.Size([64, 64])
tensor([[ 0.2010,  0.1948,  0.1923,  ...,  0.1777, -0.1552, -0.0193],
        [-0.0944,  0.0560, -0.0624,  ...,  0.0103,  0.0946,  0.0898],
        [-0.1762, -0.0685,  0.0757,  ...,  0.1229, -0.1787, -0.0298],
        ...,
        [ 0.1166, -0.1775, -0.1008,  ..., -0.0439,  0.2092,  0.0204],
        [-0.1778,  0.0102,  0.0723,  ...,  0.1058,  0.0198, -0.1642],
        [ 0.0723,  0.1919, -0.0213,  ...,  0.1916, -0.1487,  0.1366]])
tensor([[ 0.1868,  0.1922,  0.2028,  ...,  0.2071, -0.1841, -0.0053],
        [-0.1008,  0.0714, -0.0626,  ...,  0.0255,  0.1017,  0.1124],
        [-0.1827, -0.0751,  0.0615,  ...,  0.1333, -0.1761, -0.0230],
        ...,
        [ 0.1047, -0.1639, -0.1063,  ..., -0.0331,  0.2037,  0.0239],
        [-0.1918,  0.0292,  0.0829,  ...,  0.1072,  0.0337, -0.1860],
        [ 0.0735,  0.1961, -0.0252,  ...,  0.2055, -0.1282,  0.1285]])
##########################################################
decoder.blks.block2.attention1.W_o.weight shape: torch.Size([64, 64])
tensor([[-0.0970, -0.1753,  0.2067,  ..., -0.1340, -0.1428, -0.0846],
        [ 0.0817, -0.0438,  0.1290,  ..., -0.1442, -0.1527, -0.0250],
        [ 0.1697, -0.0803, -0.1014,  ..., -0.2016,  0.1537, -0.0714],
        ...,
        [-0.0391,  0.2138, -0.0439,  ..., -0.0632,  0.1315,  0.1933],
        [-0.0375,  0.0332,  0.0772,  ..., -0.2070, -0.0525, -0.1574],
        [ 0.1462, -0.0108, -0.1600,  ..., -0.0913,  0.0615, -0.0853]])
tensor([[-0.0924, -0.1782,  0.2085,  ..., -0.1152, -0.1531, -0.1031],
        [ 0.0903, -0.0725,  0.1207,  ..., -0.1442, -0.1527, -0.0333],
        [ 0.1760, -0.0941, -0.0718,  ..., -0.1942,  0.1152, -0.0791],
        ...,
        [-0.0422,  0.2016, -0.0695,  ..., -0.0718,  0.1590,  0.2056],
        [-0.0540,  0.0369,  0.0804,  ..., -0.2253, -0.0336, -0.1574],
        [ 0.1663,  0.0109, -0.1504,  ..., -0.0692,  0.0713, -0.0514]])
##########################################################
decoder.blks.block2.addnorm1.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([0.9786, 1.0127, 1.0086, 1.0017, 0.9784, 1.0182, 0.9871, 0.9618, 1.0119,
        0.9861, 1.0031, 0.9573, 0.9978, 1.0259, 0.9732, 0.9633, 0.9761, 0.9837,
        1.0061, 1.0159, 1.0019, 1.0170, 1.0078, 0.9854, 1.0143, 0.9916, 0.9935,
        0.9979, 1.0716, 0.9975, 0.9791, 1.0143, 1.0054, 1.0153, 1.0210, 0.9934,
        0.9987, 1.0001, 1.0024, 1.0180, 0.9842, 0.9922, 1.0145, 1.0508, 0.9879,
        1.0206, 0.9939, 1.0123, 0.9969, 0.9739, 1.0136, 1.0076, 1.0126, 1.0039,
        1.0098, 0.9985, 0.9838, 1.0155, 1.0390, 1.0000, 1.0140, 1.0170, 0.9806,
        0.9890])
##########################################################
decoder.blks.block2.addnorm1.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 2.4211e-03, -2.2050e-02,  1.9373e-02, -1.2426e-02, -8.5888e-03,
         2.9260e-02,  1.0191e-02,  1.8188e-02,  2.0080e-02,  4.4892e-03,
        -3.2917e-03, -1.0144e-02,  6.7062e-03, -3.8871e-02, -1.7041e-02,
         8.6283e-04,  4.5743e-02,  1.8847e-02, -1.6161e-02, -5.7981e-03,
         2.3548e-03,  3.9166e-03,  3.9967e-02, -2.7715e-03,  2.7535e-02,
         1.0474e-03,  6.3051e-03, -1.0209e-03, -1.8309e-02,  8.0406e-03,
         3.5778e-02,  8.4880e-03, -7.8523e-03, -8.1065e-03, -3.8414e-04,
        -4.4489e-02,  1.0628e-03, -3.8255e-02, -9.6692e-03,  1.7362e-02,
         2.0795e-02, -1.3025e-02,  8.1390e-05,  2.7971e-03, -4.3452e-03,
         1.7333e-02, -6.3957e-03, -4.4653e-02, -4.5521e-03, -8.4756e-03,
        -8.4792e-03,  3.0778e-03, -1.9485e-02, -7.3548e-03, -1.9125e-02,
        -8.1758e-03,  1.1949e-02, -2.1297e-02,  3.7496e-02,  9.3733e-07,
        -3.4671e-02, -7.2801e-04,  1.4349e-02,  4.7257e-03])
##########################################################
decoder.blks.block2.attention2.W_q.weight shape: torch.Size([64, 64])
tensor([[-0.1772,  0.1649, -0.0923,  ...,  0.0135, -0.1310,  0.0445],
        [ 0.0147,  0.0501, -0.0915,  ...,  0.0647, -0.1811,  0.0259],
        [-0.1520, -0.2075,  0.0256,  ...,  0.1296,  0.0233,  0.1908],
        ...,
        [-0.0263, -0.1704,  0.0966,  ...,  0.1085,  0.1134, -0.1282],
        [-0.1855,  0.0781, -0.0621,  ..., -0.0308, -0.2128, -0.0266],
        [-0.0216, -0.0834, -0.0124,  ..., -0.1587,  0.1902, -0.2088]])
tensor([[-0.1527,  0.2012, -0.0951,  ..., -0.0141, -0.1202,  0.0252],
        [-0.0357,  0.0391, -0.0968,  ...,  0.0827, -0.1707,  0.0301],
        [-0.1349, -0.1938,  0.0162,  ...,  0.1416, -0.0113,  0.1810],
        ...,
        [-0.0611, -0.1672,  0.1154,  ...,  0.1246,  0.1083, -0.1648],
        [-0.2042,  0.0853, -0.0347,  ..., -0.0162, -0.2518, -0.0195],
        [-0.0277, -0.0786,  0.0295,  ..., -0.1509,  0.1536, -0.2307]])
##########################################################
decoder.blks.block2.attention2.W_k.weight shape: torch.Size([64, 64])
tensor([[ 7.0135e-02,  1.8603e-01, -6.1947e-02,  ...,  1.7292e-05,
         -4.4355e-02,  1.2187e-01],
        [-2.0511e-01,  2.0064e-01, -9.6248e-02,  ..., -1.5265e-01,
          1.2083e-01,  1.1876e-01],
        [ 1.5374e-01, -1.6390e-01,  2.0789e-01,  ..., -5.8494e-02,
         -1.6110e-01,  3.7474e-02],
        ...,
        [-1.2438e-01,  1.3613e-01, -2.7994e-02,  ..., -1.9859e-01,
          2.0104e-01, -7.3164e-02],
        [ 8.6803e-02, -1.9592e-01, -9.4385e-02,  ...,  2.0737e-01,
          1.1864e-01, -8.9420e-02],
        [ 1.5597e-01,  1.5106e-01, -1.4176e-01,  ..., -7.5488e-02,
          2.0734e-01,  1.3211e-01]])
tensor([[ 0.0685,  0.1976, -0.0810,  ..., -0.0057, -0.0342,  0.1123],
        [-0.1948,  0.2338, -0.1110,  ..., -0.1521,  0.1353,  0.1052],
        [ 0.1372, -0.1712,  0.2195,  ..., -0.0394, -0.1750,  0.0397],
        ...,
        [-0.1212,  0.1316, -0.0198,  ..., -0.2164,  0.1828, -0.0513],
        [ 0.0933, -0.1594, -0.0862,  ...,  0.2206,  0.1427, -0.0552],
        [ 0.1674,  0.1602, -0.1363,  ..., -0.0903,  0.2004,  0.1185]])
##########################################################
decoder.blks.block2.attention2.W_v.weight shape: torch.Size([64, 64])
tensor([[ 0.0908,  0.0075, -0.0890,  ..., -0.0119, -0.1590, -0.0347],
        [-0.1662, -0.0912, -0.1477,  ..., -0.1261, -0.1916,  0.1355],
        [ 0.2049, -0.1288, -0.1802,  ...,  0.1898, -0.0734, -0.0188],
        ...,
        [-0.2147, -0.0481, -0.2136,  ...,  0.0946, -0.0409,  0.2084],
        [ 0.0971, -0.1241,  0.0924,  ..., -0.0524,  0.1667, -0.1924],
        [ 0.0460,  0.0936,  0.1956,  ...,  0.1263,  0.0254, -0.1759]])
tensor([[ 0.0685,  0.0104, -0.0690,  ...,  0.0035, -0.1792, -0.0345],
        [-0.1706, -0.0792, -0.1139,  ..., -0.1230, -0.1991,  0.1296],
        [ 0.1552, -0.1638, -0.1699,  ...,  0.2229, -0.0962, -0.0571],
        ...,
        [-0.2377, -0.0671, -0.1851,  ...,  0.1161, -0.0290,  0.1973],
        [ 0.0933, -0.1180,  0.0874,  ..., -0.0496,  0.1719, -0.2028],
        [ 0.0525,  0.0990,  0.1731,  ...,  0.1235,  0.0477, -0.1518]])
##########################################################
decoder.blks.block2.attention2.W_o.weight shape: torch.Size([64, 64])
tensor([[ 0.1622,  0.2101, -0.0772,  ...,  0.0835, -0.1935, -0.1328],
        [ 0.1965,  0.1396,  0.2119,  ..., -0.1706, -0.0401,  0.1545],
        [-0.0560,  0.1609,  0.0615,  ..., -0.2065,  0.1747,  0.0236],
        ...,
        [-0.0409,  0.1955, -0.0532,  ...,  0.1031,  0.0257,  0.1661],
        [-0.0649, -0.0689,  0.0679,  ..., -0.0733,  0.0406,  0.0114],
        [-0.1000,  0.1563, -0.2154,  ...,  0.0331, -0.0255,  0.2048]])
tensor([[ 0.1702,  0.2059, -0.0863,  ...,  0.0755, -0.1840, -0.1555],
        [ 0.1961,  0.1455,  0.1969,  ..., -0.1942, -0.0600,  0.1495],
        [-0.0195,  0.1486,  0.0771,  ..., -0.2313,  0.1856,  0.0210],
        ...,
        [-0.0018,  0.1654, -0.0241,  ...,  0.0835,  0.0441,  0.1692],
        [-0.0719, -0.0742,  0.0758,  ..., -0.0618,  0.0435,  0.0087],
        [-0.1232,  0.1906, -0.2137,  ...,  0.0658, -0.0195,  0.1709]])
##########################################################
decoder.blks.block2.addnorm2.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([0.9880, 1.0027, 1.0129, 0.9956, 0.9912, 1.0073, 0.9880, 0.9610, 1.0101,
        0.9735, 1.0099, 0.9684, 0.9980, 1.0178, 1.0058, 0.9809, 0.9857, 0.9847,
        0.9731, 0.9996, 0.9872, 1.0011, 1.0439, 0.9824, 1.0384, 1.0034, 1.0072,
        1.0060, 1.0590, 1.0062, 0.9912, 0.9990, 1.0005, 1.0010, 0.9998, 1.0124,
        0.9947, 0.9968, 1.0032, 0.9899, 0.9786, 0.9777, 1.0135, 1.0027, 0.9854,
        1.0296, 0.9760, 1.0099, 0.9849, 0.9940, 1.0286, 1.0030, 1.0051, 0.9981,
        1.0112, 1.0003, 0.9745, 1.0095, 1.0370, 0.9895, 1.0022, 1.0116, 0.9760,
        0.9787])
##########################################################
decoder.blks.block2.addnorm2.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 0.0096, -0.0155,  0.0228, -0.0171, -0.0140,  0.0328,  0.0179,  0.0151,
         0.0223,  0.0021,  0.0059, -0.0098,  0.0051, -0.0291, -0.0205,  0.0066,
         0.0465,  0.0222, -0.0105, -0.0056,  0.0053, -0.0101,  0.0399, -0.0006,
         0.0312, -0.0046,  0.0240,  0.0046, -0.0182,  0.0002,  0.0407,  0.0068,
        -0.0054, -0.0092, -0.0039, -0.0467,  0.0045, -0.0408, -0.0040,  0.0215,
         0.0262, -0.0081,  0.0148,  0.0192,  0.0006,  0.0170, -0.0101, -0.0425,
         0.0018, -0.0054,  0.0139,  0.0068, -0.0185, -0.0024, -0.0172, -0.0033,
         0.0135, -0.0171,  0.0344, -0.0051, -0.0327, -0.0061,  0.0105,  0.0090])
##########################################################
decoder.blks.block2.ffn.dense1.weight shape: torch.Size([32, 64])
tensor([[-0.0573, -0.1359, -0.2323,  ..., -0.1040,  0.0165,  0.1911],
        [ 0.0105,  0.1350,  0.1224,  ...,  0.0060, -0.0072,  0.1160],
        [-0.1628,  0.1403,  0.1133,  ...,  0.0924,  0.2010,  0.1542],
        ...,
        [-0.1916, -0.0138, -0.0148,  ..., -0.0093, -0.0659, -0.2330],
        [-0.2173,  0.0465, -0.1536,  ...,  0.1917,  0.1512, -0.1607],
        [-0.2438,  0.1418, -0.2441,  ...,  0.0825,  0.2177,  0.0315]])
tensor([[-0.0683, -0.1250, -0.2233,  ..., -0.0909,  0.0231,  0.1733],
        [ 0.0047,  0.1311,  0.1019,  ..., -0.0097, -0.0032,  0.1321],
        [-0.1299,  0.1228,  0.1255,  ...,  0.1046,  0.1685,  0.1339],
        ...,
        [-0.1930, -0.0188, -0.0215,  ..., -0.0369, -0.0566, -0.2494],
        [-0.2367,  0.0506, -0.1279,  ...,  0.1912,  0.1442, -0.1454],
        [-0.2519,  0.1017, -0.2479,  ...,  0.0853,  0.2220,  0.0027]])
##########################################################
decoder.blks.block2.ffn.dense1.bias shape: torch.Size([32])
tensor([-0.0995, -0.0309,  0.0697,  0.0920, -0.0482,  0.0531, -0.0413, -0.1150,
        -0.0352, -0.0874,  0.0206,  0.0951, -0.0112, -0.0344, -0.0339,  0.0536,
        -0.0643,  0.0910, -0.1233, -0.0548,  0.1006, -0.0150,  0.0683,  0.0817,
         0.0724,  0.0926, -0.1059,  0.0162, -0.0618, -0.0131, -0.0523,  0.0920])
tensor([-0.1158, -0.0349,  0.0889,  0.0777, -0.0729,  0.0688, -0.0557, -0.1116,
        -0.0466, -0.0914,  0.0321,  0.0765, -0.0193, -0.0074, -0.0630,  0.0481,
        -0.0579,  0.0556, -0.1313, -0.0321,  0.0948,  0.0143,  0.0570,  0.0652,
         0.1065,  0.0838, -0.1263,  0.0298, -0.0888, -0.0241, -0.0225,  0.0820])
##########################################################
decoder.blks.block2.ffn.dense2.weight shape: torch.Size([64, 32])
tensor([[-0.0933,  0.2242, -0.0953,  ...,  0.0960,  0.2443, -0.2081],
        [-0.1702, -0.2100,  0.2233,  ..., -0.0072,  0.0340, -0.1506],
        [-0.0530, -0.1535, -0.0536,  ..., -0.0268, -0.0564,  0.0740],
        ...,
        [ 0.0672,  0.2052,  0.2273,  ...,  0.1218,  0.2355,  0.1313],
        [ 0.1223,  0.1095,  0.0796,  ..., -0.1165,  0.1850, -0.0604],
        [ 0.2320,  0.1081, -0.0362,  ..., -0.2181, -0.0878, -0.2495]])
tensor([[-0.1104,  0.2233, -0.1268,  ...,  0.0850,  0.2475, -0.2051],
        [-0.1782, -0.2240,  0.2197,  ..., -0.0260,  0.0423, -0.1591],
        [-0.0822, -0.1503, -0.0817,  ..., -0.0378, -0.0906,  0.0408],
        ...,
        [ 0.0553,  0.2238,  0.2316,  ...,  0.1218,  0.2405,  0.1792],
        [ 0.1166,  0.0874,  0.0700,  ..., -0.1164,  0.1741, -0.0716],
        [ 0.2309,  0.1047, -0.0529,  ..., -0.2150, -0.0947, -0.2507]])
##########################################################
decoder.blks.block2.ffn.dense2.bias shape: torch.Size([64])
tensor([ 0.1635,  0.1591,  0.1475, -0.0776, -0.0146,  0.1045, -0.0223,  0.1598,
        -0.0233,  0.1720, -0.0466,  0.1349, -0.1552,  0.0830, -0.1622,  0.1756,
         0.1136,  0.0032,  0.0170, -0.0662,  0.0671,  0.1757,  0.1031,  0.1229,
        -0.0655,  0.0035, -0.0340,  0.0685,  0.0305,  0.1299,  0.1509,  0.1765,
        -0.0548, -0.0318, -0.0083, -0.0503,  0.0255,  0.0439,  0.0627,  0.0841,
         0.0339,  0.0786, -0.0372,  0.0811, -0.1083, -0.0882, -0.0741, -0.1487,
        -0.1765, -0.1354,  0.1212,  0.0378,  0.0215, -0.1508,  0.0476, -0.0736,
         0.1718,  0.0026,  0.0378,  0.0019, -0.0390,  0.0446,  0.1238, -0.0666])
tensor([ 0.1520,  0.1435,  0.1411, -0.0821, -0.0535,  0.1183, -0.0369,  0.1653,
        -0.0130,  0.2030, -0.0465,  0.1242, -0.1451,  0.0832, -0.1922,  0.1823,
         0.1220,  0.0110,  0.0056, -0.0655,  0.0599,  0.1791,  0.1240,  0.1395,
        -0.0725,  0.0083, -0.0502,  0.0727,  0.0084,  0.1247,  0.1815,  0.1805,
        -0.0496, -0.0189, -0.0181, -0.0591,  0.0278,  0.0166,  0.0563,  0.0833,
         0.0554,  0.0519, -0.0472,  0.0767, -0.1464, -0.0941, -0.1076, -0.1758,
        -0.1943, -0.1320,  0.1146,  0.0842, -0.0181, -0.1468,  0.0171, -0.0699,
         0.1450, -0.0014,  0.0430, -0.0165, -0.0512,  0.0395,  0.0987, -0.0574])
##########################################################
decoder.blks.block2.addnorm3.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([0.9877, 1.0008, 1.0047, 0.9892, 1.0196, 1.0022, 0.9552, 0.9770, 1.0070,
        1.0147, 0.9835, 0.9745, 1.0067, 1.0187, 1.0374, 0.9761, 1.0085, 1.0045,
        0.9641, 1.0068, 0.9925, 1.0085, 1.0167, 0.9856, 1.0022, 1.0269, 0.9851,
        1.0231, 1.0373, 0.9953, 0.9861, 1.0083, 1.0227, 1.0073, 1.0013, 0.9631,
        1.0026, 0.9587, 1.0244, 0.9821, 1.0172, 1.0117, 0.9856, 0.9933, 0.9745,
        1.0118, 1.0090, 1.0283, 0.9749, 0.9971, 0.9773, 1.0056, 0.9923, 1.0188,
        1.0180, 1.0148, 1.0018, 0.9891, 0.9993, 0.9778, 1.0015, 1.0459, 0.9887,
        0.9554])
##########################################################
decoder.blks.block2.addnorm3.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 0.0107, -0.0066, -0.0090, -0.0199, -0.0381,  0.0159, -0.0233, -0.0105,
         0.0161,  0.0197,  0.0012, -0.0107,  0.0088, -0.0177, -0.0475,  0.0034,
         0.0142,  0.0067, -0.0308,  0.0016, -0.0013,  0.0219,  0.0429,  0.0114,
         0.0091,  0.0125, -0.0039,  0.0084,  0.0025,  0.0003,  0.0147,  0.0014,
         0.0076,  0.0097, -0.0161, -0.0110,  0.0042, -0.0247,  0.0218,  0.0024,
         0.0227, -0.0212,  0.0063,  0.0217,  0.0255,  0.0127, -0.0123, -0.0319,
        -0.0321, -0.0097,  0.0183,  0.0388, -0.0375, -0.0038,  0.0099, -0.0024,
        -0.0162,  0.0038, -0.0010, -0.0118, -0.0036,  0.0189, -0.0002,  0.0153])
##########################################################
decoder.blks.block3.attention1.W_mix_k.weight shape: torch.Size([64, 128])
tensor([[-0.1075, -0.1684, -0.1302,  ..., -0.0697, -0.1288, -0.1533],
        [ 0.1619, -0.0093, -0.0654,  ...,  0.1333, -0.0679,  0.0900],
        [ 0.1563, -0.1153,  0.1321,  ...,  0.0979, -0.1184,  0.0717],
        ...,
        [ 0.0220,  0.1110,  0.0832,  ...,  0.0646, -0.0680, -0.1745],
        [-0.1527,  0.1114, -0.1181,  ..., -0.0985,  0.1664,  0.1447],
        [ 0.0011,  0.1091, -0.0671,  ...,  0.1102, -0.0058,  0.1152]])
tensor([[-0.1148, -0.1577, -0.1399,  ..., -0.0303, -0.1389, -0.1820],
        [ 0.1511, -0.0256, -0.0774,  ...,  0.1370, -0.0697,  0.0629],
        [ 0.1447, -0.1244,  0.1098,  ...,  0.0888, -0.1456,  0.0519],
        ...,
        [ 0.0161,  0.1232,  0.0631,  ...,  0.0377, -0.0910, -0.1532],
        [-0.1533,  0.1150, -0.0805,  ..., -0.0762,  0.1725,  0.1754],
        [-0.0083,  0.1199, -0.0912,  ...,  0.1036, -0.0135,  0.0776]])
##########################################################
decoder.blks.block3.attention1.W_mix_q.weight shape: torch.Size([64, 128])
tensor([[ 0.1446, -0.1428,  0.1446,  ..., -0.0758, -0.0526, -0.0295],
        [ 0.1379,  0.0542, -0.0472,  ..., -0.1606, -0.1322, -0.0603],
        [ 0.1135, -0.1126,  0.0430,  ..., -0.0167,  0.1621, -0.1069],
        ...,
        [ 0.1023,  0.1557,  0.0347,  ...,  0.1496,  0.0091, -0.0861],
        [-0.0100, -0.0373, -0.0645,  ...,  0.0874,  0.1087,  0.1163],
        [ 0.0788, -0.0937,  0.1384,  ..., -0.1512,  0.0234, -0.0512]])
tensor([[ 0.1146, -0.1839,  0.1200,  ..., -0.0862, -0.0674, -0.0346],
        [ 0.1490,  0.0838, -0.0289,  ..., -0.1786, -0.1384, -0.0750],
        [ 0.0713, -0.1259,  0.0115,  ..., -0.0096,  0.1583, -0.1148],
        ...,
        [ 0.1147,  0.1704,  0.0437,  ...,  0.1284,  0.0065, -0.0946],
        [ 0.0009, -0.0485, -0.0677,  ...,  0.0744,  0.0869,  0.1281],
        [ 0.0981, -0.0727,  0.1447,  ..., -0.1640,  0.0266, -0.0273]])
##########################################################
decoder.blks.block3.attention1.W_k.weight shape: torch.Size([64, 64])
tensor([[ 0.2145,  0.1091,  0.1422,  ..., -0.0627, -0.1644,  0.0395],
        [ 0.1352,  0.0935,  0.0544,  ...,  0.1005,  0.1542, -0.1376],
        [-0.1151, -0.1599, -0.0198,  ..., -0.2041,  0.1489,  0.0089],
        ...,
        [ 0.0605, -0.1298,  0.0930,  ..., -0.1854, -0.0229,  0.0928],
        [ 0.1092,  0.2079,  0.1699,  ..., -0.0525, -0.0379,  0.0998],
        [ 0.0421,  0.1294, -0.0473,  ..., -0.1964,  0.2109, -0.1549]])
tensor([[ 0.2031,  0.1216,  0.1507,  ..., -0.0673, -0.1740,  0.0246],
        [ 0.1277,  0.1114,  0.0685,  ...,  0.0919,  0.1546, -0.1743],
        [-0.1096, -0.1525, -0.0083,  ..., -0.1930,  0.1460,  0.0191],
        ...,
        [ 0.0817, -0.1254,  0.1004,  ..., -0.2339, -0.0145,  0.0977],
        [ 0.1519,  0.2026,  0.1673,  ..., -0.0788, -0.0381,  0.0956],
        [ 0.0433,  0.1440, -0.0429,  ..., -0.2130,  0.2138, -0.1463]])
##########################################################
decoder.blks.block3.attention1.W_q.weight shape: torch.Size([64, 64])
tensor([[ 0.1784, -0.0008, -0.1321,  ...,  0.1314,  0.0329, -0.0624],
        [-0.1429, -0.1439, -0.1947,  ..., -0.1477, -0.0028, -0.1126],
        [ 0.0742, -0.0715, -0.0952,  ..., -0.0057, -0.0974, -0.1313],
        ...,
        [-0.0166, -0.0886,  0.2066,  ...,  0.0620,  0.1218, -0.0507],
        [-0.0746, -0.1005, -0.1289,  ...,  0.0104,  0.0668, -0.0618],
        [ 0.1583,  0.1237,  0.1494,  ..., -0.1616,  0.0638, -0.1586]])
tensor([[ 0.1916, -0.0057, -0.1382,  ...,  0.1157,  0.0408, -0.0544],
        [-0.1304, -0.1500, -0.1773,  ..., -0.1562,  0.0113, -0.0969],
        [ 0.0537, -0.0510, -0.0969,  ..., -0.0007, -0.0946, -0.1094],
        ...,
        [-0.0438, -0.0795,  0.2026,  ...,  0.0666,  0.1214, -0.0634],
        [-0.0359, -0.1016, -0.1220,  ...,  0.0050,  0.0920, -0.0592],
        [ 0.1604,  0.1236,  0.1760,  ..., -0.1787,  0.0743, -0.1636]])
##########################################################
decoder.blks.block3.attention1.W_v.weight shape: torch.Size([64, 64])
tensor([[ 0.1524, -0.0640,  0.2011,  ..., -0.1126,  0.0324,  0.1605],
        [ 0.1317, -0.0792, -0.1619,  ..., -0.1094, -0.0524,  0.0528],
        [ 0.0123,  0.0687,  0.2079,  ...,  0.1192, -0.1716, -0.1487],
        ...,
        [-0.0221,  0.1685,  0.0914,  ...,  0.1025,  0.1068,  0.0366],
        [ 0.0803,  0.1792, -0.0155,  ...,  0.0906, -0.1288, -0.1369],
        [-0.0307, -0.0203, -0.0989,  ...,  0.1971, -0.1497,  0.2015]])
tensor([[ 0.1792, -0.0701,  0.1816,  ..., -0.1110,  0.0533,  0.1438],
        [ 0.1460, -0.1047, -0.1644,  ..., -0.1155, -0.0574,  0.0519],
        [ 0.0017,  0.0597,  0.2077,  ...,  0.1105, -0.1818, -0.1269],
        ...,
        [-0.0124,  0.1883,  0.1314,  ...,  0.0841,  0.0838,  0.0282],
        [ 0.0926,  0.1435, -0.0071,  ...,  0.0782, -0.1279, -0.0998],
        [-0.0383,  0.0409, -0.1066,  ...,  0.1921, -0.1247,  0.1739]])
##########################################################
decoder.blks.block3.attention1.W_o.weight shape: torch.Size([64, 64])
tensor([[-0.0380, -0.0514,  0.1603,  ...,  0.1751,  0.1964, -0.0638],
        [ 0.1208, -0.1976,  0.2025,  ..., -0.1161, -0.1209, -0.0030],
        [ 0.0498, -0.1153, -0.0619,  ..., -0.0906, -0.0690, -0.0896],
        ...,
        [-0.0194,  0.0501,  0.0256,  ...,  0.2152, -0.0030,  0.0693],
        [ 0.0471,  0.1958,  0.0122,  ..., -0.1196, -0.0149, -0.0869],
        [-0.0571,  0.1486, -0.0782,  ..., -0.0483, -0.1275,  0.0529]])
tensor([[-0.0251, -0.0246,  0.1695,  ...,  0.1982,  0.2330, -0.0776],
        [ 0.1219, -0.1937,  0.1769,  ..., -0.1318, -0.1296,  0.0230],
        [ 0.0663, -0.1020, -0.0634,  ..., -0.0802, -0.0643, -0.1059],
        ...,
        [-0.0157,  0.0340,  0.0263,  ...,  0.2530,  0.0201,  0.0382],
        [ 0.0751,  0.1940,  0.0023,  ..., -0.1034,  0.0032, -0.0683],
        [-0.0343,  0.1577, -0.0471,  ..., -0.0190, -0.0930,  0.0719]])
##########################################################
decoder.blks.block3.addnorm1.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0142, 0.9858, 0.9720, 0.9608, 0.9946, 0.9937, 0.9824, 0.9981, 0.9948,
        1.0498, 1.0366, 0.9730, 1.0042, 0.9840, 1.0408, 0.9900, 1.0176, 0.9959,
        1.0076, 1.0122, 1.0035, 1.0102, 0.9928, 1.0198, 0.9998, 0.9970, 1.0007,
        0.9997, 1.0272, 0.9971, 0.9943, 1.0027, 1.0058, 0.9933, 1.0101, 1.0131,
        0.9994, 0.9787, 1.0083, 1.0028, 1.0057, 0.9841, 0.9813, 1.0240, 1.0167,
        1.0164, 1.0279, 1.0141, 1.0100, 0.9865, 1.0116, 0.9918, 0.9737, 1.0098,
        1.0190, 1.0229, 0.9853, 1.0260, 1.0018, 1.0031, 0.9829, 1.0006, 0.9757,
        0.9781])
##########################################################
decoder.blks.block3.addnorm1.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 0.0033, -0.0010, -0.0010, -0.0052, -0.0052,  0.0362,  0.0139, -0.0062,
        -0.0068,  0.0285,  0.0387,  0.0197,  0.0041, -0.0099,  0.0039, -0.0124,
        -0.0194,  0.0217, -0.0039, -0.0050, -0.0374,  0.0033,  0.0347,  0.0362,
         0.0231, -0.0013, -0.0043, -0.0169, -0.0378, -0.0167, -0.0083, -0.0223,
         0.0130,  0.0365, -0.0293, -0.0122, -0.0333, -0.0262, -0.0091,  0.0101,
        -0.0094, -0.0162,  0.0215, -0.0249,  0.0206,  0.0325,  0.0160, -0.0477,
        -0.0354,  0.0190,  0.0114,  0.0221,  0.0054, -0.0272,  0.0045,  0.0025,
        -0.0058, -0.0325, -0.0043, -0.0113,  0.0405,  0.0040, -0.0186, -0.0037])
##########################################################
decoder.blks.block3.attention2.W_q.weight shape: torch.Size([64, 64])
tensor([[-0.0334,  0.0138, -0.1213,  ...,  0.0008,  0.0982, -0.1781],
        [ 0.2028,  0.0016,  0.0310,  ..., -0.0443,  0.1811,  0.1442],
        [ 0.1304,  0.1033,  0.1596,  ..., -0.1300,  0.0609, -0.2052],
        ...,
        [ 0.1786, -0.0429, -0.1533,  ...,  0.2052,  0.1588,  0.0410],
        [-0.0818,  0.1663, -0.0813,  ...,  0.2030, -0.0798,  0.1768],
        [-0.0510,  0.0327, -0.1392,  ..., -0.1370,  0.0572,  0.0247]])
tensor([[-0.0376,  0.0140, -0.1067,  ..., -0.0045,  0.1008, -0.1805],
        [ 0.2394,  0.0299,  0.0405,  ..., -0.0450,  0.1699,  0.1739],
        [ 0.1432,  0.1398,  0.1637,  ..., -0.1589,  0.0600, -0.2239],
        ...,
        [ 0.1572, -0.0189, -0.1144,  ...,  0.1874,  0.1099,  0.0393],
        [-0.0908,  0.1630, -0.0628,  ...,  0.2138, -0.0481,  0.2092],
        [-0.0804,  0.0514, -0.1421,  ..., -0.1563,  0.0408,  0.0185]])
##########################################################
decoder.blks.block3.attention2.W_k.weight shape: torch.Size([64, 64])
tensor([[ 0.1783,  0.1318, -0.0323,  ...,  0.1324,  0.0378, -0.0553],
        [-0.0017,  0.1997,  0.0381,  ..., -0.2107, -0.0765,  0.1808],
        [ 0.0059,  0.0980, -0.1961,  ...,  0.0200,  0.1588,  0.0462],
        ...,
        [-0.0493,  0.2129,  0.2107,  ..., -0.1012, -0.1736, -0.1959],
        [ 0.2091,  0.1191, -0.1413,  ...,  0.1047,  0.1141, -0.1704],
        [-0.1564,  0.1497,  0.1706,  ..., -0.1947, -0.0324,  0.1015]])
tensor([[ 0.2055,  0.1380, -0.0040,  ...,  0.1181,  0.0294, -0.0496],
        [-0.0143,  0.1794,  0.0203,  ..., -0.1869, -0.1141,  0.2036],
        [ 0.0165,  0.1096, -0.1688,  ...,  0.0050,  0.1675,  0.0554],
        ...,
        [-0.0362,  0.2220,  0.1807,  ..., -0.0838, -0.1773, -0.1849],
        [ 0.2076,  0.0833, -0.1722,  ...,  0.1302,  0.1018, -0.1512],
        [-0.1670,  0.1359,  0.1496,  ..., -0.1629, -0.0585,  0.0825]])
##########################################################
decoder.blks.block3.attention2.W_v.weight shape: torch.Size([64, 64])
tensor([[ 0.0074, -0.0818, -0.0877,  ..., -0.0249, -0.0319,  0.0899],
        [-0.0061, -0.1736, -0.1461,  ..., -0.1810,  0.0867,  0.0873],
        [-0.1079,  0.1043, -0.1588,  ..., -0.0283, -0.1904, -0.0052],
        ...,
        [-0.1000,  0.0595, -0.0994,  ..., -0.0195, -0.1252, -0.1505],
        [ 0.2025, -0.0662, -0.1552,  ..., -0.0756, -0.1200, -0.1542],
        [-0.0838, -0.1118,  0.0464,  ..., -0.1738, -0.1010, -0.0233]])
tensor([[-0.0150, -0.0914, -0.0552,  ...,  0.0027, -0.0564,  0.0735],
        [ 0.0157, -0.1465, -0.1632,  ..., -0.2023,  0.0802,  0.0987],
        [-0.0878,  0.1136, -0.1728,  ..., -0.0279, -0.1911,  0.0333],
        ...,
        [-0.1063,  0.0483, -0.0831,  ..., -0.0036, -0.1369, -0.1518],
        [ 0.2129, -0.0616, -0.1749,  ..., -0.0952, -0.1037, -0.1371],
        [-0.1049, -0.1120,  0.0537,  ..., -0.1647, -0.1366, -0.0139]])
##########################################################
decoder.blks.block3.attention2.W_o.weight shape: torch.Size([64, 64])
tensor([[-0.1292, -0.0802, -0.0204,  ...,  0.0942,  0.0753,  0.0846],
        [-0.0477,  0.0638,  0.2080,  ..., -0.1816, -0.1033,  0.0468],
        [ 0.1177, -0.0562, -0.0344,  ...,  0.0382,  0.0842,  0.1512],
        ...,
        [ 0.1546, -0.0678, -0.0668,  ..., -0.1389, -0.0430, -0.0235],
        [ 0.1244, -0.1064, -0.1996,  ...,  0.0424, -0.0916, -0.0113],
        [ 0.2149,  0.0090,  0.0588,  ...,  0.1071, -0.1263,  0.1072]])
tensor([[-0.1060, -0.0939, -0.0394,  ...,  0.1208,  0.0639,  0.1045],
        [-0.0456,  0.0456,  0.1764,  ..., -0.1641, -0.1350,  0.0573],
        [ 0.1464, -0.0661, -0.0734,  ...,  0.0679,  0.0606,  0.1701],
        ...,
        [ 0.1845, -0.0801, -0.0531,  ..., -0.1686, -0.0358, -0.0187],
        [ 0.1341, -0.1495, -0.2281,  ...,  0.0411, -0.1175, -0.0265],
        [ 0.1930,  0.0197,  0.0871,  ...,  0.1090, -0.1227,  0.0373]])
##########################################################
decoder.blks.block3.addnorm2.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0110, 0.9769, 0.9642, 0.9601, 0.9881, 0.9982, 0.9867, 0.9809, 0.9930,
        1.0314, 1.0497, 0.9747, 0.9912, 1.0122, 1.0319, 1.0045, 1.0275, 0.9939,
        1.0079, 1.0060, 0.9936, 0.9944, 1.0010, 1.0196, 0.9886, 1.0414, 0.9911,
        0.9766, 1.0412, 1.0161, 0.9921, 0.9829, 1.0021, 0.9783, 0.9902, 1.0214,
        0.9908, 0.9914, 1.0008, 0.9969, 0.9968, 1.0086, 0.9665, 1.0226, 1.0075,
        1.0196, 1.0131, 1.0019, 1.0355, 0.9997, 0.9909, 0.9722, 0.9504, 1.0168,
        0.9929, 1.0202, 0.9554, 1.0006, 0.9921, 1.0053, 1.0108, 0.9880, 1.0078,
        0.9926])
##########################################################
decoder.blks.block3.addnorm2.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 0.0107, -0.0159, -0.0044,  0.0094,  0.0034,  0.0211,  0.0102, -0.0166,
        -0.0141,  0.0226,  0.0401,  0.0116,  0.0030, -0.0100,  0.0028, -0.0220,
        -0.0230,  0.0109, -0.0091, -0.0027, -0.0349,  0.0086,  0.0279,  0.0451,
         0.0186, -0.0077,  0.0098, -0.0314, -0.0452, -0.0125,  0.0064, -0.0188,
         0.0040,  0.0298, -0.0232, -0.0149, -0.0337, -0.0228, -0.0150,  0.0116,
         0.0026, -0.0140,  0.0130, -0.0416,  0.0179,  0.0347,  0.0076, -0.0503,
        -0.0237,  0.0001,  0.0159,  0.0344,  0.0077, -0.0358,  0.0070,  0.0020,
         0.0088, -0.0276, -0.0049, -0.0187,  0.0422,  0.0103, -0.0100, -0.0015])
##########################################################
decoder.blks.block3.ffn.dense1.weight shape: torch.Size([32, 64])
tensor([[-0.1284,  0.1108,  0.2366,  ..., -0.0669,  0.1078, -0.1035],
        [-0.1339, -0.0590, -0.0044,  ...,  0.0214,  0.1181, -0.0221],
        [ 0.1909, -0.0584, -0.1635,  ...,  0.0018, -0.1862,  0.2259],
        ...,
        [ 0.1104,  0.1107, -0.1336,  ..., -0.2048, -0.1309, -0.0741],
        [-0.1745,  0.0051,  0.0205,  ..., -0.0271,  0.1833,  0.2053],
        [ 0.2165,  0.1771, -0.1552,  ..., -0.1804, -0.1676, -0.0009]])
tensor([[-0.1314,  0.1182,  0.2295,  ..., -0.0593,  0.0879, -0.1002],
        [-0.1041, -0.0827,  0.0223,  ..., -0.0058,  0.1321, -0.0778],
        [ 0.1908, -0.0613, -0.1217,  ...,  0.0230, -0.1852,  0.2610],
        ...,
        [ 0.1050,  0.1198, -0.1248,  ..., -0.1980, -0.1173, -0.0561],
        [-0.1730,  0.0008,  0.0282,  ..., -0.0167,  0.1877,  0.1923],
        [ 0.1912,  0.1533, -0.1259,  ..., -0.2191, -0.1837,  0.0408]])
##########################################################
decoder.blks.block3.ffn.dense1.bias shape: torch.Size([32])
tensor([-0.0420, -0.0950, -0.0047,  0.0450,  0.0443,  0.0623,  0.0107, -0.0228,
         0.1071, -0.1009,  0.0897,  0.0699,  0.1139, -0.0055, -0.0159, -0.0351,
        -0.0196,  0.1083,  0.0459,  0.0087,  0.0424,  0.0754,  0.1159,  0.0078,
        -0.0044, -0.1238, -0.1128,  0.0113,  0.0579, -0.0539, -0.0354,  0.0997])
tensor([-0.0504, -0.0652, -0.0013,  0.0218,  0.0280,  0.0701, -0.0132, -0.0446,
         0.0972, -0.1348,  0.0867,  0.0657,  0.1393, -0.0318, -0.0238, -0.0473,
         0.0183,  0.0937,  0.0464, -0.0353,  0.0553,  0.0887,  0.1378, -0.0076,
        -0.0244, -0.1016, -0.0871, -0.0234,  0.0593, -0.0590, -0.0399,  0.1251])
##########################################################
decoder.blks.block3.ffn.dense2.weight shape: torch.Size([64, 32])
tensor([[-0.1855, -0.0157, -0.2289,  ...,  0.2351,  0.0608, -0.2394],
        [-0.1799, -0.2045,  0.1851,  ..., -0.2006,  0.0525,  0.0847],
        [-0.2478,  0.2140, -0.0596,  ..., -0.0130, -0.2357,  0.1286],
        ...,
        [-0.1001,  0.1109, -0.0663,  ...,  0.1131, -0.0232,  0.2333],
        [-0.1222,  0.0161, -0.1074,  ...,  0.2302, -0.1104,  0.1794],
        [ 0.1463,  0.1578,  0.0373,  ..., -0.1137, -0.0917, -0.0475]])
tensor([[-0.2017, -0.0152, -0.2194,  ...,  0.2394,  0.0494, -0.2218],
        [-0.1614, -0.1708,  0.1527,  ..., -0.1878,  0.0551,  0.0852],
        [-0.2750,  0.2187, -0.0534,  ..., -0.0069, -0.2458,  0.1346],
        ...,
        [-0.0986,  0.1379, -0.0414,  ...,  0.1063, -0.0020,  0.2911],
        [-0.1138,  0.0283, -0.1236,  ...,  0.2087, -0.1255,  0.1443],
        [ 0.1458,  0.1136, -0.0022,  ..., -0.1174, -0.0846, -0.0907]])
##########################################################
decoder.blks.block3.ffn.dense2.bias shape: torch.Size([64])
tensor([-0.0774, -0.0950, -0.0992, -0.0365,  0.0223,  0.0595,  0.0116,  0.1214,
         0.1084,  0.1761,  0.0840,  0.0343,  0.0144, -0.0809,  0.1239,  0.0356,
        -0.0175, -0.1652, -0.0736,  0.1752,  0.0116,  0.1681,  0.1242, -0.0316,
        -0.0075, -0.1677,  0.0354, -0.0802,  0.0543, -0.1725, -0.0652,  0.0344,
        -0.0418,  0.0454, -0.1251, -0.0742,  0.0090,  0.0257,  0.0235, -0.0701,
        -0.1265, -0.0615, -0.0671, -0.0200, -0.0180,  0.0957, -0.1596, -0.0253,
        -0.1287,  0.1618, -0.0728, -0.0387, -0.0628, -0.0600,  0.0070,  0.1043,
        -0.1768, -0.1581,  0.0761,  0.0943,  0.1291, -0.0141,  0.1107, -0.0722])
tensor([-0.0411, -0.0870, -0.1021,  0.0115,  0.0692,  0.0644,  0.0540,  0.1353,
         0.1273,  0.2054,  0.1033,  0.0403,  0.0324, -0.0924,  0.1427,  0.0535,
        -0.0536, -0.1849, -0.0569,  0.1786, -0.0223,  0.1780,  0.1310, -0.0024,
         0.0264, -0.1817,  0.0442, -0.1000,  0.0391, -0.2075, -0.0564,  0.0380,
        -0.0403,  0.0491, -0.1395, -0.0938, -0.0113,  0.0380,  0.0081, -0.1075,
        -0.1084, -0.0932, -0.0806, -0.0365, -0.0409,  0.0441, -0.1729, -0.0300,
        -0.1326,  0.1505, -0.0620, -0.0246, -0.0486, -0.0662,  0.0203,  0.0643,
        -0.1469, -0.1703,  0.0900,  0.1051,  0.1004,  0.0030,  0.0978, -0.1029])
##########################################################
decoder.blks.block3.addnorm3.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0061, 0.9745, 0.9815, 1.0000, 0.9968, 0.9999, 1.0189, 0.9743, 0.9753,
        1.0211, 1.0307, 1.0029, 0.9762, 0.9938, 1.0057, 1.0044, 1.0373, 0.9887,
        1.0213, 1.0095, 1.0367, 0.9807, 1.0037, 0.9975, 1.0023, 1.0254, 1.0028,
        0.9805, 1.0016, 1.0276, 0.9929, 0.9884, 0.9897, 0.9922, 1.0129, 1.0035,
        0.9845, 0.9940, 0.9916, 1.0139, 1.0029, 1.0058, 0.9820, 0.9877, 0.9709,
        1.0453, 1.0267, 0.9975, 0.9948, 0.9921, 0.9889, 1.0066, 0.9681, 1.0359,
        0.9962, 1.0141, 0.9807, 1.0184, 0.9967, 0.9967, 0.9998, 0.9972, 1.0295,
        1.0138])
##########################################################
decoder.blks.block3.addnorm3.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 0.0136, -0.0332, -0.0046,  0.0277,  0.0200,  0.0005,  0.0331,  0.0047,
         0.0008,  0.0202,  0.0178,  0.0058,  0.0111,  0.0147,  0.0066,  0.0101,
        -0.0481, -0.0098,  0.0355,  0.0049, -0.0480,  0.0078, -0.0193,  0.0454,
         0.0341, -0.0089,  0.0016, -0.0048, -0.0143, -0.0089, -0.0004, -0.0057,
         0.0078,  0.0084, -0.0089, -0.0317, -0.0126,  0.0048, -0.0069, -0.0367,
         0.0009,  0.0053,  0.0072, -0.0358, -0.0155, -0.0059,  0.0004, -0.0313,
        -0.0161,  0.0130, -0.0131,  0.0239, -0.0247, -0.0421, -0.0198, -0.0005,
         0.0081,  0.0013,  0.0239,  0.0051, -0.0133, -0.0057, -0.0111, -0.0231])
##########################################################
decoder.blks.block4.attention1.W_mix_k.weight shape: torch.Size([64, 128])
tensor([[-0.1510,  0.1321, -0.0791,  ...,  0.0293, -0.0153, -0.0809],
        [ 0.0094,  0.0865, -0.0333,  ..., -0.1720,  0.0797, -0.0634],
        [-0.1104, -0.1582,  0.0922,  ...,  0.0362, -0.0619,  0.0258],
        ...,
        [ 0.1361, -0.1410, -0.0022,  ...,  0.0755,  0.1256, -0.0079],
        [ 0.0885, -0.1218, -0.1608,  ..., -0.1584,  0.0830, -0.1455],
        [-0.1082, -0.1180,  0.0659,  ...,  0.1349, -0.0068, -0.1406]])
tensor([[-1.3431e-01,  1.1777e-01, -5.0228e-02,  ..., -8.2866e-05,
         -5.6388e-03, -6.1509e-02],
        [ 5.5505e-03,  6.2590e-02, -1.0497e-02,  ..., -1.5208e-01,
          7.2242e-02, -5.6766e-02],
        [-1.3890e-01, -1.6557e-01,  1.2355e-01,  ...,  5.1057e-02,
         -9.2805e-02,  7.0694e-03],
        ...,
        [ 1.7134e-01, -1.4199e-01,  2.0177e-02,  ...,  7.3747e-02,
          1.2259e-01,  3.1353e-03],
        [ 8.3831e-02, -1.1278e-01, -1.7629e-01,  ..., -1.7223e-01,
          8.5637e-02, -1.7172e-01],
        [-1.1914e-01, -1.1729e-01,  4.6112e-02,  ...,  1.3291e-01,
         -1.1333e-02, -1.6504e-01]])
##########################################################
decoder.blks.block4.attention1.W_mix_q.weight shape: torch.Size([64, 128])
tensor([[-0.0206, -0.1602,  0.0974,  ...,  0.0899,  0.0615,  0.0797],
        [ 0.1459,  0.0826, -0.0273,  ..., -0.1482,  0.1110,  0.0080],
        [-0.0125, -0.1512, -0.1179,  ..., -0.1526,  0.0284,  0.1427],
        ...,
        [ 0.1083, -0.0602,  0.1258,  ..., -0.0846,  0.1284, -0.1470],
        [ 0.1245,  0.1281, -0.0783,  ..., -0.0967,  0.0583,  0.1321],
        [-0.1173,  0.1332,  0.1597,  ...,  0.1679, -0.1192, -0.1198]])
tensor([[-0.0273, -0.1574,  0.0834,  ...,  0.1199,  0.0658,  0.1022],
        [ 0.1400,  0.0900, -0.0045,  ..., -0.1241,  0.0810,  0.0074],
        [-0.0051, -0.1819, -0.1029,  ..., -0.1538,  0.0133,  0.1394],
        ...,
        [ 0.0954, -0.0749,  0.1199,  ..., -0.0978,  0.1245, -0.1456],
        [ 0.1072,  0.0919, -0.0495,  ..., -0.0854,  0.0531,  0.1229],
        [-0.0885,  0.1780,  0.1501,  ...,  0.1812, -0.1206, -0.1195]])
##########################################################
decoder.blks.block4.attention1.W_k.weight shape: torch.Size([64, 64])
tensor([[ 0.1889, -0.1324,  0.2006,  ...,  0.0893,  0.0666,  0.0192],
        [-0.0634,  0.0259,  0.1044,  ..., -0.0488,  0.1478, -0.0054],
        [-0.0014,  0.1577,  0.0124,  ..., -0.2083,  0.1266, -0.0208],
        ...,
        [ 0.1705,  0.0332,  0.1787,  ...,  0.1398,  0.0661, -0.1362],
        [-0.1820, -0.1146, -0.0471,  ..., -0.1721,  0.0566, -0.1231],
        [ 0.1731,  0.0207,  0.1395,  ..., -0.0318, -0.1482, -0.0147]])
tensor([[ 0.1830, -0.1138,  0.2213,  ...,  0.0911,  0.0600,  0.0184],
        [-0.0428,  0.0124,  0.0962,  ..., -0.0553,  0.1925,  0.0043],
        [ 0.0267,  0.1551,  0.0404,  ..., -0.1807,  0.1317, -0.0172],
        ...,
        [ 0.1880,  0.0178,  0.1660,  ...,  0.1410,  0.0406, -0.1395],
        [-0.2050, -0.1231, -0.0798,  ..., -0.1803,  0.0537, -0.1261],
        [ 0.2183,  0.0159,  0.1204,  ..., -0.0434, -0.1905, -0.0271]])
##########################################################
decoder.blks.block4.attention1.W_q.weight shape: torch.Size([64, 64])
tensor([[-0.0802,  0.2153,  0.0734,  ...,  0.0884, -0.1208,  0.2087],
        [ 0.0032,  0.0051,  0.0942,  ..., -0.1435,  0.0597,  0.1744],
        [-0.1900,  0.1093,  0.1135,  ...,  0.2024,  0.2070, -0.1680],
        ...,
        [-0.1307, -0.1752, -0.1795,  ...,  0.1496, -0.1422, -0.0042],
        [-0.1767, -0.1821,  0.0774,  ..., -0.1001, -0.0682, -0.0369],
        [ 0.0666, -0.1908,  0.0333,  ...,  0.0634, -0.0015, -0.1593]])
tensor([[-0.0810,  0.2172,  0.0780,  ...,  0.0942, -0.1001,  0.2190],
        [ 0.0332,  0.0187,  0.0991,  ..., -0.1426,  0.0827,  0.2006],
        [-0.1732,  0.1091,  0.1096,  ...,  0.2274,  0.2035, -0.1911],
        ...,
        [-0.1376, -0.2143, -0.1530,  ...,  0.1507, -0.1734, -0.0118],
        [-0.1580, -0.1257,  0.0456,  ..., -0.1017, -0.0857, -0.0464],
        [ 0.0576, -0.2162,  0.0382,  ...,  0.0621, -0.0163, -0.1765]])
##########################################################
decoder.blks.block4.attention1.W_v.weight shape: torch.Size([64, 64])
tensor([[ 0.1901, -0.0110,  0.0468,  ...,  0.1828, -0.1666, -0.0430],
        [ 0.1239, -0.0818, -0.0545,  ..., -0.1966,  0.0842, -0.0199],
        [-0.1685, -0.0745, -0.1481,  ..., -0.1672,  0.1939,  0.0829],
        ...,
        [ 0.1582,  0.1390,  0.0712,  ...,  0.1809,  0.0822,  0.1987],
        [ 0.1251,  0.0830,  0.1560,  ..., -0.1861, -0.1478,  0.0272],
        [-0.0889, -0.1542, -0.1221,  ..., -0.1975, -0.0011,  0.0034]])
tensor([[ 0.2011,  0.0185,  0.0620,  ...,  0.1538, -0.1303, -0.0195],
        [ 0.1300, -0.0536,  0.0037,  ..., -0.2384,  0.1094, -0.0440],
        [-0.1616, -0.0657, -0.1723,  ..., -0.1711,  0.1650,  0.0966],
        ...,
        [ 0.1865,  0.1384,  0.0678,  ...,  0.1658,  0.0764,  0.1724],
        [ 0.1282,  0.0631,  0.1630,  ..., -0.1500, -0.1866,  0.0388],
        [-0.0622, -0.1455, -0.1574,  ..., -0.2013, -0.0290,  0.0127]])
##########################################################
decoder.blks.block4.attention1.W_o.weight shape: torch.Size([64, 64])
tensor([[ 0.1671,  0.1480,  0.2044,  ...,  0.0884,  0.0007,  0.2059],
        [-0.2060, -0.0540, -0.0117,  ..., -0.0726, -0.1305, -0.1623],
        [ 0.0971, -0.2012,  0.0274,  ..., -0.0672,  0.1985, -0.1853],
        ...,
        [ 0.0007,  0.0651, -0.1368,  ...,  0.1522, -0.0182,  0.0623],
        [-0.1317, -0.1196, -0.1100,  ...,  0.1560,  0.1006, -0.2060],
        [ 0.0859,  0.0585,  0.2082,  ..., -0.0353,  0.1637,  0.1630]])
tensor([[ 0.1902,  0.1522,  0.1969,  ...,  0.0965, -0.0165,  0.2200],
        [-0.2097, -0.0658, -0.0127,  ..., -0.0828, -0.1266, -0.1548],
        [ 0.0389, -0.1526,  0.0781,  ..., -0.0723,  0.2032, -0.1938],
        ...,
        [ 0.0204,  0.0470, -0.1521,  ...,  0.1234, -0.0138,  0.0830],
        [-0.1639, -0.1012, -0.0748,  ...,  0.1415,  0.1046, -0.2062],
        [ 0.0897,  0.0644,  0.2446,  ..., -0.0343,  0.1371,  0.1251]])
##########################################################
decoder.blks.block4.addnorm1.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0045, 0.9793, 0.9925, 1.0362, 1.0225, 1.0227, 1.0405, 0.9601, 0.9665,
        0.9969, 0.9979, 0.9495, 0.9941, 0.9946, 0.9582, 1.0154, 1.0040, 1.0093,
        0.9607, 0.9910, 1.0068, 1.0068, 1.0217, 0.9910, 0.9799, 0.9920, 1.0024,
        1.0066, 0.9949, 0.9476, 0.9991, 0.9872, 0.9991, 0.9795, 0.9967, 1.0147,
        0.9671, 0.9859, 0.9763, 1.0082, 0.9777, 0.9992, 1.0248, 1.0143, 1.0194,
        0.9897, 1.0366, 0.9728, 0.9523, 0.9865, 1.0116, 0.9797, 0.9930, 0.9772,
        1.0448, 1.0329, 1.0131, 0.9946, 1.0096, 0.9736, 1.0165, 1.0185, 1.0027,
        0.9841])
##########################################################
decoder.blks.block4.addnorm1.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 2.2092e-02, -2.8596e-02, -1.8320e-02,  4.3243e-02,  3.0587e-02,
        -1.6090e-03,  4.4341e-02, -3.2391e-02, -1.7132e-02, -1.3500e-02,
         4.1405e-02, -3.8422e-02,  2.4658e-02,  6.3928e-02,  5.3269e-02,
        -8.7286e-03, -1.4450e-02,  3.1625e-02,  5.5297e-02,  1.0744e-02,
        -3.4797e-02, -7.4064e-03, -4.7652e-02, -1.0999e-02,  2.8308e-02,
        -9.9087e-03,  2.0294e-02,  1.4299e-02,  1.2161e-02, -9.7375e-05,
        -1.9007e-03, -2.1845e-02, -4.9176e-03,  2.7878e-02,  3.3274e-03,
        -4.4991e-02, -7.9753e-03,  3.3481e-03, -2.4322e-02, -2.6668e-02,
        -2.6651e-02,  1.6655e-02, -5.0438e-04, -5.8167e-02,  4.8846e-02,
         2.1852e-02, -1.1506e-02, -4.6335e-03,  6.5131e-03,  1.2230e-02,
        -3.5884e-02, -2.2921e-02, -1.5892e-02, -2.0189e-02, -4.5580e-02,
         4.9904e-02,  4.8201e-02, -5.5856e-02, -1.1159e-02, -2.6466e-02,
         2.6436e-02, -2.2739e-02,  3.7406e-03, -4.9612e-02])
##########################################################
decoder.blks.block4.attention2.W_q.weight shape: torch.Size([64, 64])
tensor([[-0.1643, -0.1997, -0.1772,  ..., -0.0678, -0.0510, -0.1091],
        [-0.1273, -0.1558, -0.0265,  ..., -0.0382,  0.0266, -0.1097],
        [ 0.0213, -0.1715,  0.0920,  ...,  0.1230, -0.0655,  0.1405],
        ...,
        [ 0.0635,  0.1701, -0.1339,  ...,  0.1194,  0.1548,  0.0479],
        [-0.0708, -0.0471, -0.0320,  ..., -0.0128,  0.1829, -0.0454],
        [ 0.1017, -0.1453, -0.0794,  ..., -0.0671,  0.1962,  0.0985]])
tensor([[-0.1683, -0.1954, -0.2074,  ..., -0.0577, -0.0618, -0.1012],
        [-0.1551, -0.1531, -0.0218,  ..., -0.0286,  0.0455, -0.0996],
        [ 0.0087, -0.1616,  0.1000,  ...,  0.1134, -0.0432,  0.1543],
        ...,
        [ 0.0511,  0.1504, -0.1298,  ...,  0.1257,  0.1426,  0.0658],
        [-0.0614, -0.0755, -0.0352,  ..., -0.0213,  0.1639, -0.0753],
        [ 0.1128, -0.1683, -0.0809,  ..., -0.0786,  0.1753,  0.0668]])
##########################################################
decoder.blks.block4.attention2.W_k.weight shape: torch.Size([64, 64])
tensor([[-0.1496,  0.1634, -0.1154,  ..., -0.1706,  0.0946, -0.1219],
        [ 0.1825, -0.0738,  0.1664,  ..., -0.2142, -0.1078,  0.2064],
        [ 0.0788,  0.0722,  0.1786,  ..., -0.0438,  0.0149, -0.0576],
        ...,
        [-0.1496,  0.1212, -0.1828,  ..., -0.1457,  0.0959, -0.1833],
        [ 0.1352,  0.1122,  0.0335,  ..., -0.0928,  0.0088,  0.1046],
        [-0.2091,  0.1995, -0.0018,  ..., -0.0921, -0.2019, -0.0009]])
tensor([[-0.1398,  0.1455, -0.1391,  ..., -0.1505,  0.1135, -0.1098],
        [ 0.1791, -0.1010,  0.1509,  ..., -0.1847, -0.0996,  0.2002],
        [ 0.0723,  0.0772,  0.1806,  ..., -0.0552, -0.0040, -0.0539],
        ...,
        [-0.1199,  0.1090, -0.1992,  ..., -0.1564,  0.1014, -0.2022],
        [ 0.1040,  0.0965,  0.0348,  ..., -0.0567,  0.0198,  0.1237],
        [-0.2013,  0.2044, -0.0312,  ..., -0.0893, -0.1584, -0.0115]])
##########################################################
decoder.blks.block4.attention2.W_v.weight shape: torch.Size([64, 64])
tensor([[-0.0140, -0.1560,  0.0209,  ...,  0.0067,  0.0074,  0.1144],
        [-0.1711,  0.0864, -0.0193,  ...,  0.0261, -0.0019, -0.1289],
        [ 0.0002, -0.1809, -0.0244,  ..., -0.0304,  0.2089,  0.1971],
        ...,
        [-0.0021, -0.1073, -0.2083,  ...,  0.1536,  0.0769,  0.0579],
        [ 0.1913,  0.0583,  0.0512,  ...,  0.0632,  0.0828,  0.0836],
        [-0.1512, -0.1208, -0.0293,  ..., -0.2090, -0.1573, -0.0510]])
tensor([[-0.0394, -0.1817,  0.0462,  ...,  0.0327,  0.0032,  0.1170],
        [-0.1473,  0.0708, -0.0432,  ...,  0.0095,  0.0166, -0.1129],
        [ 0.0162, -0.1827, -0.0249,  ..., -0.0447,  0.2003,  0.1903],
        ...,
        [-0.0188, -0.1126, -0.2193,  ...,  0.1861,  0.0645,  0.0836],
        [ 0.1570,  0.0372,  0.0571,  ...,  0.0908,  0.0488,  0.0753],
        [-0.2023, -0.1572, -0.0135,  ..., -0.1732, -0.1868, -0.0489]])
##########################################################
decoder.blks.block4.attention2.W_o.weight shape: torch.Size([64, 64])
tensor([[-0.1435, -0.1909, -0.0244,  ..., -0.1466,  0.2133,  0.1255],
        [ 0.1059,  0.1176, -0.0604,  ..., -0.1716, -0.0339, -0.1072],
        [-0.0428,  0.0553,  0.0322,  ...,  0.1495,  0.1969,  0.1881],
        ...,
        [-0.0163,  0.0499, -0.2122,  ...,  0.1661, -0.1514, -0.1177],
        [-0.2035, -0.1005,  0.0488,  ..., -0.0777,  0.0644,  0.1647],
        [-0.1523, -0.1442, -0.0022,  ..., -0.1301,  0.1883, -0.1674]])
tensor([[-0.0932, -0.1865, -0.0416,  ..., -0.1726,  0.2093,  0.1140],
        [ 0.1118,  0.1116, -0.0601,  ..., -0.1843, -0.0419, -0.0938],
        [-0.0487,  0.0765,  0.0408,  ...,  0.1695,  0.2172,  0.1852],
        ...,
        [ 0.0143,  0.0441, -0.2127,  ...,  0.1828, -0.1517, -0.1079],
        [-0.2441, -0.1133,  0.0620,  ..., -0.0401,  0.0432,  0.1830],
        [-0.1762, -0.1183, -0.0172,  ..., -0.1088,  0.1737, -0.1753]])
##########################################################
decoder.blks.block4.addnorm2.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([0.9845, 0.9704, 0.9833, 0.9961, 0.9978, 1.0011, 1.0166, 0.9974, 0.9497,
        0.9770, 0.9819, 0.9790, 1.0095, 1.0041, 0.9541, 1.0071, 1.0181, 1.0218,
        1.0147, 0.9927, 1.0019, 1.0000, 1.0542, 0.9761, 1.0035, 0.9952, 1.0070,
        1.0103, 0.9989, 0.9470, 1.0005, 0.9848, 0.9727, 1.0065, 1.0149, 1.0336,
        0.9583, 1.0024, 0.9906, 1.0298, 0.9899, 0.9966, 0.9748, 1.0204, 1.0319,
        0.9872, 1.0440, 0.9776, 0.9562, 0.9981, 0.9788, 0.9829, 0.9856, 0.9745,
        1.0512, 1.0155, 1.0149, 1.0397, 1.0016, 0.9579, 1.0084, 1.0241, 1.0110,
        0.9658])
##########################################################
decoder.blks.block4.addnorm2.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 0.0412, -0.0261, -0.0086,  0.0533,  0.0252, -0.0030,  0.0333, -0.0305,
        -0.0300, -0.0103,  0.0389, -0.0333,  0.0331,  0.0639,  0.0466, -0.0135,
        -0.0193,  0.0395,  0.0671,  0.0151, -0.0228, -0.0070, -0.0400, -0.0090,
         0.0303, -0.0092,  0.0261,  0.0212,  0.0227, -0.0041,  0.0051, -0.0147,
        -0.0036,  0.0401,  0.0058, -0.0383, -0.0088,  0.0035, -0.0386, -0.0352,
        -0.0342,  0.0033,  0.0015, -0.0554,  0.0565,  0.0306, -0.0172,  0.0209,
         0.0076,  0.0033, -0.0459, -0.0349, -0.0043, -0.0144, -0.0524,  0.0575,
         0.0411, -0.0619, -0.0213, -0.0340,  0.0424, -0.0177, -0.0151, -0.0523])
##########################################################
decoder.blks.block4.ffn.dense1.weight shape: torch.Size([32, 64])
tensor([[-1.3906e-01, -4.7830e-02, -2.0199e-01,  ...,  2.0719e-01,
          1.1237e-01,  1.2751e-01],
        [ 2.2836e-01,  1.8368e-01, -1.9328e-01,  ...,  2.2147e-01,
         -2.4798e-01,  4.8806e-03],
        [-5.9382e-02,  2.3097e-01, -5.7425e-02,  ...,  1.2219e-04,
         -1.3956e-01,  6.5692e-02],
        ...,
        [ 1.8205e-01,  2.0550e-01,  1.4732e-02,  ..., -5.5810e-02,
          1.2669e-01,  2.1800e-01],
        [-1.6302e-01,  1.9375e-01, -1.4562e-01,  ...,  1.2697e-01,
         -2.2065e-01, -2.4757e-02],
        [-4.9928e-02,  1.7571e-02, -1.8137e-01,  ..., -4.4441e-02,
          5.2739e-02, -5.1272e-02]])
tensor([[-0.1197, -0.0460, -0.2000,  ...,  0.2341,  0.1166,  0.1349],
        [ 0.2353,  0.1481, -0.2107,  ...,  0.2014, -0.2907,  0.0013],
        [-0.0365,  0.2270, -0.0393,  ...,  0.0061, -0.1120,  0.0663],
        ...,
        [ 0.1580,  0.2115,  0.0153,  ..., -0.0615,  0.1650,  0.2204],
        [-0.1639,  0.1931, -0.1500,  ...,  0.1653, -0.2218, -0.0042],
        [-0.0384, -0.0085, -0.1668,  ..., -0.0535,  0.0526, -0.0530]])
##########################################################
decoder.blks.block4.ffn.dense1.bias shape: torch.Size([32])
tensor([-0.0808, -0.0578,  0.0971,  0.0023, -0.1069, -0.0028, -0.0018,  0.0495,
        -0.0260, -0.0178,  0.0656, -0.0019, -0.0429,  0.0448, -0.0985, -0.0607,
        -0.0198, -0.0033, -0.1051, -0.1127, -0.1114,  0.0085, -0.1183, -0.0931,
         0.1070,  0.0962, -0.0476, -0.0016,  0.0176, -0.1240, -0.0100, -0.0667])
tensor([-0.0962,  0.0009,  0.0625,  0.0500, -0.1036, -0.0226, -0.0053,  0.0533,
        -0.0236,  0.0240,  0.0576,  0.0082, -0.0354,  0.0325, -0.1186, -0.0351,
        -0.0051,  0.0013, -0.1124, -0.0814, -0.1349,  0.0073, -0.1161, -0.1201,
         0.0872,  0.0893, -0.0402, -0.0081,  0.0368, -0.1366, -0.0237, -0.0686])
##########################################################
decoder.blks.block4.ffn.dense2.weight shape: torch.Size([64, 32])
tensor([[-0.1627,  0.2445, -0.1307,  ...,  0.1993,  0.0835, -0.2132],
        [-0.0890, -0.0633, -0.2245,  ..., -0.2027, -0.1242, -0.0776],
        [ 0.0608, -0.1968,  0.1845,  ..., -0.0399, -0.1880, -0.2018],
        ...,
        [ 0.0449, -0.0437, -0.0920,  ...,  0.0446,  0.0841,  0.0753],
        [ 0.2442, -0.1047,  0.1568,  ...,  0.0349,  0.0985,  0.1717],
        [ 0.0431, -0.1317,  0.2054,  ..., -0.1387, -0.1776, -0.2341]])
tensor([[-0.1482,  0.2652, -0.1010,  ...,  0.2269,  0.0906, -0.2203],
        [-0.0875, -0.0918, -0.2424,  ..., -0.2151, -0.1126, -0.0813],
        [ 0.0393, -0.1979,  0.1683,  ..., -0.0478, -0.1779, -0.2112],
        ...,
        [ 0.0567, -0.0786, -0.0787,  ...,  0.0363,  0.0584,  0.0524],
        [ 0.2472, -0.1399,  0.1274,  ...,  0.0365,  0.0694,  0.1150],
        [ 0.0350, -0.1447,  0.1936,  ..., -0.1370, -0.2198, -0.2097]])
##########################################################
decoder.blks.block4.ffn.dense2.bias shape: torch.Size([64])
tensor([ 0.0670,  0.0245, -0.1387,  0.0058, -0.0563,  0.1720,  0.1626,  0.1457,
         0.0822, -0.1357, -0.1762,  0.1014, -0.0566, -0.1095, -0.0969,  0.1578,
         0.0468,  0.1660,  0.0537,  0.1201, -0.0934, -0.1160, -0.1437, -0.0055,
        -0.0114, -0.1682,  0.1418,  0.0502,  0.0506, -0.1366,  0.0383,  0.0133,
        -0.0199,  0.0213,  0.1663,  0.0230, -0.1531, -0.1408,  0.0814, -0.0886,
        -0.0595,  0.1129, -0.1352, -0.0024, -0.1741,  0.0459,  0.0787,  0.0014,
         0.0330,  0.1486, -0.0961,  0.0022, -0.0128,  0.1078,  0.0470,  0.1205,
         0.1689,  0.1352,  0.0650, -0.1266, -0.0309, -0.0268, -0.0728,  0.0310])
tensor([ 0.0880,  0.0058, -0.1407,  0.0483, -0.0725,  0.1712,  0.2376,  0.1302,
         0.0807, -0.1227, -0.1235,  0.1211, -0.0213, -0.0606, -0.0949,  0.1935,
         0.0767,  0.1939,  0.0629,  0.1312, -0.0747, -0.1385, -0.1466, -0.0372,
        -0.0197, -0.1766,  0.1462,  0.0702,  0.0931, -0.1355,  0.0572,  0.0112,
        -0.0257,  0.0565,  0.1465,  0.0174, -0.1637, -0.1258,  0.0076, -0.1293,
        -0.0599,  0.1144, -0.1441, -0.0295, -0.1291,  0.0450,  0.0858,  0.0351,
         0.0399,  0.1158, -0.1589, -0.0399,  0.0107,  0.1195,  0.0266,  0.1972,
         0.1992,  0.1384,  0.0754, -0.1479,  0.0284, -0.0517, -0.1213, -0.0005])
##########################################################
decoder.blks.block4.addnorm3.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([0.9945, 0.9846, 0.9722, 0.9580, 1.0250, 0.9766, 1.0509, 0.9689, 0.9612,
        0.9950, 1.0652, 0.9609, 1.0310, 1.0249, 0.9817, 0.9705, 1.0330, 1.0066,
        0.9421, 1.0093, 0.9873, 1.0047, 0.9962, 0.9998, 0.9735, 0.9945, 0.9847,
        0.9764, 0.9778, 0.9662, 1.0020, 1.0056, 0.9844, 1.0070, 0.9629, 0.9956,
        0.9793, 0.9734, 1.0505, 1.0300, 0.9838, 0.9961, 1.0037, 1.0015, 1.0336,
        0.9951, 1.0037, 1.0170, 0.9831, 0.9789, 0.9681, 1.0161, 0.9907, 1.0252,
        1.0576, 1.0537, 1.0194, 1.0007, 0.9666, 0.9606, 0.9557, 0.9859, 1.0376,
        0.9886])
##########################################################
decoder.blks.block4.addnorm3.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 0.0259, -0.0435, -0.0251,  0.0702, -0.0035, -0.0195,  0.0729,  0.0542,
         0.0139,  0.0114,  0.0941,  0.0058,  0.0275,  0.0527,  0.0148, -0.0163,
        -0.0333,  0.0419,  0.0226,  0.0230, -0.0090, -0.0224,  0.0221, -0.0266,
         0.0095, -0.0108, -0.0101,  0.0319,  0.0195, -0.0134,  0.0297,  0.0496,
        -0.0157,  0.0497, -0.0182, -0.0055, -0.0332, -0.0271, -0.0839, -0.0671,
        -0.0054, -0.0324, -0.0365, -0.0540,  0.0583,  0.0115,  0.0310, -0.0037,
        -0.0202, -0.0186, -0.0856, -0.0542,  0.0377, -0.0203, -0.0944,  0.0713,
         0.0689, -0.0492, -0.0051, -0.0326,  0.0525, -0.0396, -0.0374, -0.0539])
##########################################################
decoder.blks.block5.attention1.W_mix_k.weight shape: torch.Size([64, 128])
tensor([[-0.1233, -0.0221,  0.0250,  ..., -0.0456,  0.0584, -0.0923],
        [-0.1417,  0.1344, -0.1742,  ..., -0.0017,  0.1233,  0.0149],
        [-0.1700, -0.1111,  0.0065,  ...,  0.1117,  0.1653,  0.1336],
        ...,
        [ 0.0475,  0.0219,  0.1606,  ..., -0.0260,  0.1296,  0.0631],
        [ 0.0853,  0.0931, -0.1399,  ..., -0.1355,  0.0725, -0.0863],
        [ 0.0761,  0.0348,  0.0298,  ..., -0.0510,  0.1690,  0.0040]])
tensor([[-0.1357, -0.0261,  0.0434,  ..., -0.0061,  0.0450, -0.1059],
        [-0.1270,  0.1290, -0.1841,  ..., -0.0253,  0.1588,  0.0273],
        [-0.1526, -0.1470,  0.0067,  ...,  0.0926,  0.1597,  0.1245],
        ...,
        [ 0.0468,  0.0241,  0.1605,  ..., -0.0115,  0.1696,  0.0773],
        [ 0.0679,  0.0721, -0.1686,  ..., -0.1464,  0.0296, -0.0601],
        [ 0.0750,  0.0151,  0.0172,  ..., -0.0635,  0.1419,  0.0023]])
##########################################################
decoder.blks.block5.attention1.W_mix_q.weight shape: torch.Size([64, 128])
tensor([[ 0.0940, -0.0217,  0.1443,  ..., -0.1175,  0.1464,  0.1057],
        [ 0.0739,  0.1281,  0.0029,  ...,  0.0507,  0.1686, -0.1418],
        [-0.0160,  0.1116,  0.0804,  ...,  0.1609,  0.0070,  0.0821],
        ...,
        [-0.0717, -0.0483, -0.0256,  ...,  0.0641,  0.0088, -0.0400],
        [ 0.1012,  0.1621,  0.1322,  ...,  0.1234,  0.1479,  0.0435],
        [-0.1157, -0.0377,  0.0893,  ..., -0.0838,  0.1019, -0.1331]])
tensor([[ 0.0881, -0.0539,  0.1389,  ..., -0.1363,  0.1813,  0.1189],
        [ 0.0540,  0.0919, -0.0048,  ...,  0.0463,  0.1489, -0.1372],
        [-0.0080,  0.0876,  0.1000,  ...,  0.1517,  0.0408,  0.0953],
        ...,
        [-0.0547, -0.0762, -0.0375,  ...,  0.0437, -0.0002, -0.0292],
        [ 0.0899,  0.1582,  0.1268,  ...,  0.1247,  0.1479,  0.0476],
        [-0.1258,  0.0008,  0.1126,  ..., -0.0703,  0.1038, -0.1237]])
##########################################################
decoder.blks.block5.attention1.W_k.weight shape: torch.Size([64, 64])
tensor([[-0.0125, -0.0063,  0.1399,  ...,  0.1872,  0.0311, -0.1127],
        [-0.1250,  0.1228, -0.1669,  ...,  0.1949,  0.1174,  0.1334],
        [ 0.0321, -0.1562, -0.2017,  ..., -0.1236, -0.2060,  0.0652],
        ...,
        [-0.0781, -0.1653,  0.1444,  ...,  0.0792, -0.0727,  0.2059],
        [ 0.0493,  0.1795, -0.1177,  ..., -0.1954, -0.1240,  0.0603],
        [ 0.2042,  0.0996, -0.0213,  ..., -0.1980, -0.0007, -0.0905]])
tensor([[-3.0459e-02, -7.6905e-04,  1.4074e-01,  ...,  1.8978e-01,
          2.2114e-02, -1.0758e-01],
        [-1.5234e-01,  1.3577e-01, -1.6799e-01,  ...,  1.8992e-01,
          1.2751e-01,  1.4269e-01],
        [ 3.6363e-03, -1.4526e-01, -1.7425e-01,  ..., -1.3458e-01,
         -1.7948e-01,  4.6352e-02],
        ...,
        [-8.1422e-02, -1.4083e-01,  1.3462e-01,  ...,  9.7904e-02,
         -9.1430e-02,  1.7195e-01],
        [ 6.1672e-02,  1.6715e-01, -1.2209e-01,  ..., -2.0778e-01,
         -1.1748e-01,  6.3158e-02],
        [ 1.8480e-01,  1.1999e-01, -1.2624e-04,  ..., -2.3952e-01,
          4.4681e-02, -8.2716e-02]])
##########################################################
decoder.blks.block5.attention1.W_q.weight shape: torch.Size([64, 64])
tensor([[-0.1887, -0.2010,  0.1558,  ..., -0.1600, -0.2131,  0.0315],
        [ 0.0942,  0.1461,  0.0312,  ..., -0.1635,  0.1421,  0.1304],
        [-0.0942,  0.0259, -0.0121,  ..., -0.1154,  0.1286,  0.0956],
        ...,
        [-0.1710, -0.1032, -0.2070,  ..., -0.2159, -0.1700,  0.2084],
        [-0.0604, -0.0227,  0.0777,  ...,  0.0618, -0.1830, -0.0870],
        [-0.0036,  0.0188, -0.0405,  ..., -0.1253, -0.1768,  0.1039]])
tensor([[-0.1691, -0.1934,  0.1833,  ..., -0.1391, -0.2091,  0.0004],
        [ 0.1082,  0.1358,  0.0703,  ..., -0.1319,  0.1495,  0.1118],
        [-0.1327,  0.0357, -0.0214,  ..., -0.1383,  0.1481,  0.0808],
        ...,
        [-0.2075, -0.0785, -0.2021,  ..., -0.2509, -0.1737,  0.1886],
        [-0.0665, -0.0360,  0.0590,  ...,  0.0758, -0.1996, -0.0548],
        [ 0.0150,  0.0120, -0.0548,  ..., -0.1099, -0.1644,  0.1266]])
##########################################################
decoder.blks.block5.attention1.W_v.weight shape: torch.Size([64, 64])
tensor([[-0.1398, -0.0935,  0.2025,  ..., -0.1744,  0.0493,  0.0999],
        [ 0.0180,  0.2013,  0.0842,  ..., -0.1883, -0.0739, -0.1566],
        [ 0.1266,  0.1766,  0.1203,  ...,  0.0778,  0.1646, -0.0736],
        ...,
        [-0.0881, -0.0041, -0.1581,  ..., -0.0408,  0.2103, -0.0573],
        [ 0.0898, -0.1043, -0.1770,  ...,  0.1640, -0.0779,  0.0493],
        [-0.2109,  0.0017,  0.1267,  ..., -0.2060,  0.2132,  0.1114]])
tensor([[-0.1360, -0.1198,  0.1851,  ..., -0.1510,  0.0408,  0.0778],
        [ 0.0038,  0.2110,  0.0796,  ..., -0.1898, -0.0586, -0.1309],
        [ 0.1303,  0.1628,  0.1161,  ...,  0.0931,  0.1504, -0.0860],
        ...,
        [-0.0854,  0.0305, -0.1276,  ..., -0.0543,  0.2414, -0.0388],
        [ 0.1265, -0.1286, -0.2022,  ...,  0.1593, -0.1024,  0.0250],
        [-0.1866, -0.0233,  0.1039,  ..., -0.1940,  0.2153,  0.0991]])
##########################################################
decoder.blks.block5.attention1.W_o.weight shape: torch.Size([64, 64])
tensor([[-0.0963,  0.1445, -0.0056,  ...,  0.1157,  0.0557, -0.1445],
        [-0.1492, -0.0824,  0.0864,  ..., -0.0531,  0.0611, -0.1680],
        [-0.0643,  0.0616,  0.1334,  ..., -0.0412,  0.0646, -0.0460],
        ...,
        [ 0.1659,  0.0434, -0.0459,  ..., -0.0124, -0.1690, -0.1726],
        [-0.0147, -0.0754, -0.0848,  ..., -0.0591,  0.0060,  0.0975],
        [-0.0232,  0.1423, -0.2151,  ...,  0.1159,  0.1704, -0.0744]])
tensor([[-0.0682,  0.1725, -0.0148,  ...,  0.1119,  0.0833, -0.0948],
        [-0.1735, -0.0949,  0.0779,  ...,  0.0197,  0.0160, -0.1107],
        [-0.0926,  0.0267,  0.1495,  ..., -0.0240,  0.0569, -0.0443],
        ...,
        [ 0.1882,  0.0336, -0.0250,  ..., -0.0303, -0.2144, -0.1812],
        [-0.0227, -0.0574, -0.0569,  ..., -0.0166,  0.0363,  0.0978],
        [-0.0397,  0.1210, -0.2279,  ...,  0.1639,  0.1839, -0.0593]])
##########################################################
decoder.blks.block5.addnorm1.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([0.9420, 1.0697, 0.9946, 0.9795, 1.0130, 0.9689, 1.0218, 0.8788, 1.0167,
        1.0039, 1.1396, 0.9607, 1.0309, 1.0283, 0.9688, 0.9512, 0.9767, 1.0056,
        0.9746, 0.9306, 0.9923, 0.9947, 0.9528, 0.9925, 0.9763, 0.9827, 0.8987,
        0.9531, 0.9367, 0.9233, 0.9893, 1.0095, 0.9486, 1.0291, 0.9390, 0.9864,
        0.9721, 0.9574, 1.0723, 1.0072, 0.9203, 0.9395, 1.0653, 1.1028, 1.1174,
        0.9403, 0.9727, 0.9701, 1.0168, 0.9687, 1.0850, 1.0017, 0.9953, 0.9693,
        1.0652, 1.1609, 1.0925, 1.0170, 0.9652, 0.9877, 0.9836, 0.9817, 0.9268,
        1.0385])
##########################################################
decoder.blks.block5.addnorm1.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 0.0475, -0.1352, -0.0399,  0.0558,  0.0709,  0.0296,  0.0497,  0.0064,
         0.0225,  0.0642,  0.1790, -0.0400,  0.0670,  0.0704,  0.0378,  0.0220,
        -0.1007,  0.0411,  0.0603, -0.0067,  0.0019, -0.0395,  0.1113, -0.0446,
         0.0297, -0.0404, -0.0771,  0.0385,  0.0788,  0.0075,  0.0433,  0.0615,
         0.0135,  0.0593, -0.0400, -0.0348, -0.0677, -0.0237, -0.1006, -0.0640,
         0.0327, -0.0611, -0.1059, -0.1396,  0.1789, -0.0028,  0.0784,  0.0019,
        -0.0847, -0.0489, -0.1845, -0.0468,  0.0624, -0.1186, -0.1204,  0.2107,
         0.1349, -0.0635, -0.0244, -0.1022,  0.0458, -0.0242,  0.0205, -0.1148])
##########################################################
decoder.blks.block5.attention2.W_q.weight shape: torch.Size([64, 64])
tensor([[ 0.2103, -0.0017, -0.0446,  ..., -0.1017, -0.0451,  0.2099],
        [ 0.0546,  0.1084, -0.0839,  ...,  0.1231,  0.0794, -0.1755],
        [ 0.0073, -0.1872,  0.1090,  ...,  0.1959, -0.1640, -0.0059],
        ...,
        [-0.0882, -0.0601,  0.0851,  ..., -0.1704,  0.0862,  0.0785],
        [-0.0186,  0.0931, -0.0967,  ..., -0.1785,  0.0786, -0.0712],
        [-0.1377,  0.0376,  0.0641,  ..., -0.0855,  0.0897,  0.1665]])
tensor([[ 0.2143, -0.0240, -0.0432,  ..., -0.1028, -0.0487,  0.2062],
        [ 0.0391,  0.1236, -0.0519,  ...,  0.1457,  0.0821, -0.1530],
        [ 0.0118, -0.1665,  0.1150,  ...,  0.2065, -0.1768,  0.0126],
        ...,
        [-0.0766, -0.0624,  0.0666,  ..., -0.1849,  0.0785,  0.0622],
        [ 0.0083,  0.0739, -0.1164,  ..., -0.1803,  0.0413, -0.0998],
        [-0.1373,  0.0208,  0.0751,  ..., -0.0849,  0.1033,  0.1833]])
##########################################################
decoder.blks.block5.attention2.W_k.weight shape: torch.Size([64, 64])
tensor([[-0.1856,  0.1161,  0.0146,  ..., -0.1893, -0.1316, -0.0398],
        [ 0.0326, -0.0560,  0.1720,  ..., -0.2026, -0.1755, -0.2006],
        [-0.0399, -0.0192, -0.1370,  ..., -0.1491, -0.2110, -0.0530],
        ...,
        [-0.1642,  0.1685, -0.1082,  ...,  0.1621, -0.0513, -0.0193],
        [ 0.1551, -0.1417,  0.1255,  ...,  0.0034,  0.0360,  0.1734],
        [-0.2087, -0.1115,  0.0956,  ...,  0.1263, -0.0516,  0.1540]])
tensor([[-1.6253e-01,  1.2635e-01,  1.2182e-02,  ..., -1.9470e-01,
         -1.1510e-01, -4.5260e-02],
        [ 2.3896e-02, -5.4015e-02,  1.5405e-01,  ..., -2.2241e-01,
         -1.8607e-01, -1.9560e-01],
        [-8.1460e-02, -2.1874e-05, -1.3366e-01,  ..., -1.7054e-01,
         -2.0896e-01, -8.2070e-02],
        ...,
        [-1.8153e-01,  1.7985e-01, -1.1801e-01,  ...,  1.5508e-01,
         -4.7590e-02, -3.8313e-02],
        [ 1.3964e-01, -1.6282e-01,  1.4566e-01,  ...,  1.8165e-02,
          4.9681e-02,  1.8553e-01],
        [-2.3401e-01, -1.0761e-01,  1.0866e-01,  ...,  1.0464e-01,
         -4.6185e-02,  1.3677e-01]])
##########################################################
decoder.blks.block5.attention2.W_v.weight shape: torch.Size([64, 64])
tensor([[ 0.1211, -0.1635, -0.0377,  ..., -0.2093, -0.1305,  0.0370],
        [-0.0145,  0.1011,  0.1374,  ..., -0.1868, -0.0715, -0.1980],
        [ 0.0960, -0.0455,  0.0613,  ..., -0.1339, -0.1701,  0.0447],
        ...,
        [ 0.0608,  0.0022,  0.0079,  ...,  0.0920, -0.0290,  0.1147],
        [ 0.0548,  0.0933,  0.1277,  ..., -0.1609,  0.0748,  0.1043],
        [-0.1087, -0.1377,  0.0163,  ...,  0.1322, -0.0181,  0.1768]])
tensor([[ 0.1403, -0.1481, -0.0316,  ..., -0.2302, -0.1285,  0.0393],
        [-0.0181,  0.1070,  0.1276,  ..., -0.1674, -0.0761, -0.1659],
        [ 0.0602, -0.0617,  0.0639,  ..., -0.0859, -0.2058,  0.0784],
        ...,
        [ 0.0825,  0.0198,  0.0172,  ...,  0.0648, -0.0442,  0.1002],
        [ 0.0317,  0.0867,  0.1236,  ..., -0.1462,  0.0587,  0.0477],
        [-0.0817, -0.1188,  0.0041,  ...,  0.0969, -0.0161,  0.2122]])
##########################################################
decoder.blks.block5.attention2.W_o.weight shape: torch.Size([64, 64])
tensor([[ 0.1551, -0.1309, -0.1433,  ...,  0.1092,  0.1819, -0.1563],
        [ 0.0431, -0.1399, -0.1422,  ...,  0.1942,  0.2144, -0.0408],
        [ 0.0083, -0.0694,  0.0937,  ..., -0.0637,  0.1102,  0.0197],
        ...,
        [-0.0040,  0.1028, -0.0872,  ..., -0.1723, -0.1293, -0.0383],
        [ 0.1109, -0.1818, -0.0267,  ..., -0.0392, -0.0235,  0.1683],
        [ 0.0059,  0.1654,  0.0138,  ..., -0.0385, -0.0343, -0.1393]])
tensor([[ 0.1609, -0.1552, -0.1306,  ...,  0.0649,  0.1762, -0.1705],
        [ 0.0068, -0.0901, -0.1410,  ...,  0.2324,  0.2108, -0.0217],
        [ 0.0166, -0.0642,  0.1034,  ..., -0.0290,  0.0804,  0.0124],
        ...,
        [ 0.0170,  0.0821, -0.0989,  ..., -0.1804, -0.1315, -0.0270],
        [ 0.1207, -0.1829, -0.0171,  ..., -0.0302, -0.0383,  0.1538],
        [-0.0428,  0.2036, -0.0072,  ...,  0.0029, -0.0344, -0.1095]])
##########################################################
decoder.blks.block5.addnorm2.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([0.9583, 1.0604, 0.9808, 0.9758, 0.9909, 0.9372, 1.0088, 0.9062, 0.9773,
        1.0066, 1.0971, 0.9363, 1.0019, 1.0200, 0.9568, 0.9700, 0.9920, 0.9860,
        0.9588, 0.9466, 0.9380, 0.9620, 0.9586, 0.9802, 0.9571, 0.9603, 0.9507,
        0.9507, 0.9776, 0.9153, 1.0024, 1.0136, 0.9514, 1.0092, 0.9114, 0.9662,
        0.9735, 0.9742, 1.0540, 0.9938, 0.9005, 0.9624, 1.0256, 1.0645, 1.1134,
        0.9325, 0.9773, 0.9508, 1.0194, 0.9625, 1.0522, 0.9808, 0.9823, 0.9733,
        1.0401, 1.1458, 1.0867, 0.9997, 0.9433, 0.9856, 0.9728, 0.9742, 0.9072,
        1.0370])
##########################################################
decoder.blks.block5.addnorm2.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 6.8549e-02, -1.5691e-01, -4.1999e-02,  6.2011e-02,  7.6362e-02,
         2.7839e-02,  5.8468e-02,  1.3816e-02,  2.7086e-02,  7.2018e-02,
         1.5948e-01, -2.9838e-02,  6.7592e-02,  7.2922e-02,  4.4133e-02,
         3.2800e-02, -9.1578e-02,  4.2033e-02,  6.9798e-02, -1.7246e-03,
         1.7130e-04, -4.4562e-02,  1.2285e-01, -4.6292e-02,  4.3533e-02,
        -3.8864e-02, -7.6600e-02,  3.1405e-02,  8.7089e-02,  1.6521e-02,
         4.3223e-02,  7.3114e-02,  1.5530e-02,  6.4699e-02, -3.7653e-02,
        -2.8852e-02, -5.8543e-02, -2.2844e-02, -1.2306e-01, -8.0944e-02,
         5.4596e-02, -6.5488e-02, -1.1344e-01, -1.4716e-01,  1.9127e-01,
         6.5558e-03,  9.1543e-02,  7.9828e-03, -9.4133e-02, -5.5527e-02,
        -1.9434e-01, -5.4062e-02,  6.5037e-02, -1.2002e-01, -1.1122e-01,
         2.2539e-01,  1.5139e-01, -5.2920e-02, -1.6705e-02, -1.0237e-01,
         6.6094e-02, -1.9359e-02,  2.7802e-02, -1.1956e-01])
##########################################################
decoder.blks.block5.ffn.dense1.weight shape: torch.Size([32, 64])
tensor([[-0.1613,  0.1012,  0.2018,  ...,  0.2268,  0.1700, -0.1582],
        [-0.1499, -0.0149, -0.0897,  ...,  0.1667,  0.0653,  0.2429],
        [ 0.0320, -0.1666, -0.1819,  ..., -0.2005,  0.2143, -0.1895],
        ...,
        [-0.1582,  0.1166, -0.1112,  ...,  0.0779,  0.0252,  0.1432],
        [ 0.1811, -0.1854, -0.1821,  ...,  0.1739, -0.1914, -0.0268],
        [-0.0864, -0.1881, -0.0840,  ..., -0.2031, -0.2412, -0.2331]])
tensor([[-0.1862,  0.1502,  0.2475,  ...,  0.2636,  0.1617, -0.1063],
        [-0.1353, -0.0390, -0.0952,  ...,  0.1405,  0.0401,  0.2123],
        [-0.0014, -0.1187, -0.1359,  ..., -0.1670,  0.2188, -0.1303],
        ...,
        [-0.1604,  0.1211, -0.1216,  ...,  0.0672, -0.0003,  0.1295],
        [ 0.1461, -0.1512, -0.1223,  ...,  0.1981, -0.2047,  0.0192],
        [-0.0935, -0.1854, -0.0679,  ..., -0.1713, -0.2668, -0.2404]])
##########################################################
decoder.blks.block5.ffn.dense1.bias shape: torch.Size([32])
tensor([-0.1250,  0.0364, -0.1150,  0.1218,  0.0091,  0.0163,  0.0088, -0.0363,
         0.0487,  0.0835,  0.1132, -0.0655, -0.0692, -0.1036,  0.0743, -0.0273,
         0.0209, -0.1076, -0.0774, -0.0372,  0.0307,  0.0208,  0.0863,  0.0473,
         0.0410, -0.1075,  0.0442, -0.0265,  0.0600, -0.0628, -0.0285,  0.0616])
tensor([-0.1743,  0.0525, -0.1654,  0.1017,  0.0186,  0.0297,  0.0132, -0.0333,
         0.0327,  0.0873,  0.0894, -0.0833, -0.0864, -0.0819,  0.0695, -0.0223,
        -0.0143, -0.1000, -0.0503, -0.0683,  0.0227, -0.0041,  0.0204,  0.0347,
         0.0366, -0.1193,  0.0270, -0.0400,  0.0626, -0.0580, -0.0742,  0.0625])
##########################################################
decoder.blks.block5.ffn.dense2.weight shape: torch.Size([64, 32])
tensor([[ 0.1039,  0.1554,  0.2200,  ..., -0.0327,  0.0841,  0.1547],
        [ 0.1803,  0.1343, -0.0973,  ...,  0.2019, -0.1009,  0.0048],
        [-0.1722, -0.1249, -0.1858,  ...,  0.1018,  0.1251, -0.0977],
        ...,
        [-0.0974, -0.0483, -0.1985,  ...,  0.2125,  0.0873, -0.1373],
        [-0.1364,  0.1476,  0.0027,  ..., -0.0947,  0.2208,  0.2318],
        [-0.0643,  0.0757,  0.0145,  ..., -0.1400,  0.0637, -0.1192]])
tensor([[ 0.1090,  0.1531,  0.2207,  ..., -0.0363,  0.0907,  0.1793],
        [ 0.1586,  0.0870, -0.1150,  ...,  0.1050, -0.1399, -0.0806],
        [-0.1664, -0.1075, -0.1868,  ...,  0.0834,  0.1010, -0.0958],
        ...,
        [-0.0819, -0.0847, -0.1870,  ...,  0.1897,  0.0637, -0.1348],
        [-0.1351,  0.1327,  0.0076,  ..., -0.1459,  0.2154,  0.2375],
        [-0.0795,  0.0740,  0.0027,  ..., -0.2085,  0.0673, -0.1106]])
##########################################################
decoder.blks.block5.ffn.dense2.bias shape: torch.Size([64])
tensor([ 0.0543,  0.0541, -0.0534, -0.1074,  0.0999,  0.0947, -0.1620, -0.0666,
        -0.0855, -0.1016, -0.0551,  0.0582, -0.1307, -0.1323,  0.0620,  0.0047,
         0.1016,  0.0919,  0.0939,  0.0893, -0.0899, -0.0292, -0.1401, -0.0530,
         0.1258, -0.0555,  0.0659,  0.0776, -0.1484, -0.0005,  0.0488,  0.1226,
         0.1358,  0.1329, -0.1090,  0.1755, -0.0541,  0.0976,  0.1588, -0.0721,
         0.0190,  0.1312,  0.0627,  0.1517,  0.0189, -0.0672,  0.0214,  0.0816,
         0.0670,  0.0750, -0.1528, -0.0343, -0.0944,  0.0074, -0.0772, -0.0367,
         0.1406,  0.1535,  0.1107, -0.0519, -0.1454,  0.0719,  0.0343,  0.0753])
tensor([ 0.0674, -0.0515, -0.0421, -0.0983,  0.1173,  0.0901, -0.1668, -0.0701,
        -0.0802, -0.0565,  0.0400,  0.0589, -0.1517, -0.0992,  0.0549,  0.0084,
         0.0806,  0.1371,  0.1034,  0.0883, -0.1193, -0.0232, -0.1167, -0.0627,
         0.1321, -0.0682,  0.0558,  0.0705, -0.1183, -0.0399,  0.0877,  0.1397,
         0.1687,  0.1697, -0.0497,  0.1201, -0.0806,  0.0688,  0.1188, -0.1154,
         0.0253,  0.0962,  0.0157,  0.0874,  0.0351, -0.0942,  0.0343,  0.0683,
         0.0026,  0.0428, -0.2421, -0.0737, -0.0710,  0.0141, -0.0701,  0.0492,
         0.2581,  0.1448,  0.0654, -0.0771, -0.0934,  0.0606,  0.0147,  0.0547])
##########################################################
decoder.blks.block5.addnorm3.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([0.9941, 1.0336, 0.9968, 1.0061, 0.9997, 0.9833, 1.0142, 0.8779, 0.9673,
        1.0256, 1.0451, 0.9118, 1.0125, 1.0132, 0.9558, 1.0049, 1.0101, 0.9956,
        0.9884, 0.9347, 0.9412, 1.0036, 0.9693, 1.0133, 1.0239, 0.9842, 0.9924,
        0.9590, 1.0064, 0.9256, 0.9881, 1.0350, 0.8887, 0.9989, 0.9398, 0.9605,
        1.0120, 0.9435, 1.0353, 1.0467, 0.9774, 1.0159, 1.0243, 1.0434, 1.0225,
        0.9449, 0.9944, 0.9551, 1.0296, 0.9851, 1.0062, 0.9970, 0.9923, 0.9769,
        1.0292, 1.0358, 1.0106, 1.0380, 0.9414, 0.9861, 0.9572, 0.9776, 0.9060,
        1.0226])
##########################################################
decoder.blks.block5.addnorm3.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 0.0597, -0.0906, -0.0663,  0.0861,  0.0520,  0.0342,  0.0511,  0.0282,
         0.0166,  0.0705,  0.1001, -0.0153,  0.0848,  0.0681,  0.0540,  0.0610,
        -0.0788,  0.0570,  0.0655, -0.0121,  0.0156, -0.0619,  0.1010, -0.0505,
         0.0755, -0.0503, -0.0762,  0.0660,  0.0721,  0.0156,  0.0514,  0.0729,
         0.0347,  0.1198, -0.0810, -0.0448, -0.0652, -0.0245, -0.0841, -0.0789,
         0.0546, -0.0671, -0.0925, -0.1050,  0.0830,  0.0246,  0.0825,  0.0128,
        -0.1034, -0.0566, -0.0815, -0.0535,  0.0864, -0.0870, -0.0766,  0.0898,
         0.0862, -0.0656, -0.0210, -0.0837,  0.0878, -0.0326,  0.0471, -0.0849])
##########################################################
decoder.dense.weight shape: torch.Size([166, 64])
tensor([[ 0.0800,  0.1579, -0.0273,  ..., -0.0510,  0.0063,  0.1136],
        [ 0.0120, -0.0621,  0.0712,  ..., -0.1373, -0.0943, -0.0477],
        [ 0.0499,  0.1357,  0.1152,  ...,  0.0166,  0.0895,  0.0288],
        ...,
        [-0.1342,  0.1028,  0.1060,  ...,  0.0009,  0.0057,  0.0892],
        [-0.0026,  0.1143,  0.0777,  ...,  0.0747,  0.1461,  0.0184],
        [-0.1478,  0.0623, -0.1284,  ..., -0.1391, -0.1497, -0.0174]])
tensor([[-0.0761,  0.3448,  0.1425,  ...,  0.0409, -0.0967,  0.2888],
        [-0.1383,  0.1228,  0.2347,  ..., -0.0524, -0.1847,  0.1265],
        [-0.0830,  0.3058,  0.2637,  ...,  0.0867,  0.0138,  0.1927],
        ...,
        [-0.2748,  0.2819,  0.2637,  ...,  0.0769, -0.0760,  0.2626],
        [-0.1569,  0.3017,  0.2448,  ...,  0.1589,  0.0470,  0.1943],
        [-0.2932,  0.2429,  0.0328,  ..., -0.0529, -0.2423,  0.1507]])
##########################################################
decoder.dense.bias shape: torch.Size([166])
tensor([ 0.1202, -0.0841, -0.1019, -0.0910,  0.0489,  0.0004,  0.1114,  0.1128,
         0.0235,  0.0761,  0.1087, -0.0908,  0.0940, -0.0611,  0.1010,  0.0882,
        -0.0198,  0.0175,  0.0137, -0.0490, -0.0946,  0.0489,  0.0338,  0.0198,
         0.0792, -0.1025,  0.0798, -0.1092, -0.0093, -0.0606,  0.1216,  0.0945,
        -0.0900,  0.0813,  0.0407,  0.0610,  0.0382,  0.0564, -0.0070,  0.0052,
        -0.1008, -0.0512,  0.0673, -0.0652,  0.0145, -0.0689, -0.0212,  0.0366,
         0.0028, -0.0683, -0.0511, -0.0820,  0.0636,  0.0282,  0.1169, -0.0533,
        -0.1175,  0.0264, -0.0999, -0.0550, -0.1161, -0.0451, -0.0763, -0.0227,
         0.0864,  0.1060, -0.0563,  0.0739, -0.0146, -0.0291,  0.0121, -0.1059,
        -0.0723, -0.0894, -0.1213, -0.0692,  0.0594, -0.0535, -0.0765,  0.0155,
        -0.0933,  0.0642,  0.0698,  0.1039, -0.0401, -0.0343, -0.0015,  0.0490,
        -0.1016,  0.0732, -0.1092,  0.0822,  0.0925,  0.0721, -0.1114, -0.0135,
         0.0174,  0.0482,  0.0608, -0.0998,  0.0884, -0.0707, -0.0545, -0.0863,
         0.0267, -0.0073, -0.0782,  0.0878,  0.0505,  0.0086,  0.0691, -0.0837,
         0.1009,  0.0245, -0.0404,  0.0820,  0.1155,  0.0064, -0.0206,  0.0302,
         0.1221,  0.1194,  0.0602,  0.0160,  0.0110, -0.0366,  0.0627, -0.0564,
         0.1135, -0.0220,  0.1038, -0.0652, -0.0950, -0.0162, -0.0519, -0.1178,
         0.0224, -0.0231,  0.0680,  0.1158, -0.0189, -0.0850,  0.0176,  0.1226,
         0.0632, -0.0052,  0.0944,  0.0145, -0.0902, -0.0632,  0.1133, -0.0294,
        -0.0100,  0.0080, -0.0539, -0.0083,  0.0514, -0.0004,  0.0587,  0.0671,
        -0.0794, -0.1041,  0.1197,  0.0712,  0.0483, -0.0490])
tensor([-0.0541, -0.2529, -0.2555, -0.0526,  0.1000,  0.0553,  0.1624,  0.1741,
         0.0763,  0.1300,  0.1562, -0.0529,  0.1284, -0.0226,  0.1616,  0.1570,
         0.0392,  0.0405,  0.0539, -0.0054, -0.0491,  0.0742,  0.0998,  0.0153,
         0.0809, -0.0726,  0.0677, -0.0883, -0.0022, -0.0503,  0.1234,  0.1120,
        -0.0868,  0.0314,  0.0324, -0.0020, -0.0035,  0.0187, -0.0844, -0.0459,
        -0.1511, -0.1374,  0.0283, -0.1088,  0.0334, -0.2482, -0.0726, -0.1374,
        -0.0431, -0.2348, -0.2306, -0.2456,  0.0260, -0.0349, -0.0406, -0.1224,
        -0.2728, -0.1314, -0.2475, -0.2106, -0.2767, -0.2041, -0.2377, -0.0778,
        -0.0750, -0.0436, -0.1243, -0.0911, -0.0930, -0.1926, -0.1567, -0.2445,
        -0.2343, -0.2520, -0.2796, -0.2164, -0.1084, -0.2273, -0.2314, -0.1406,
        -0.2476, -0.0979, -0.0827, -0.0448, -0.1952, -0.1954, -0.1586, -0.1033,
        -0.2509, -0.1032, -0.2892, -0.0782, -0.0767, -0.0750, -0.2716, -0.1805,
        -0.1170, -0.1284, -0.1139, -0.2591, -0.0661, -0.2117, -0.2189, -0.2362,
        -0.1565, -0.1812, -0.2402, -0.0726, -0.1175, -0.1456, -0.1019, -0.2447,
        -0.0580, -0.1415, -0.2054, -0.0659, -0.0444, -0.1652, -0.1940, -0.1390,
        -0.0393, -0.0512, -0.0885, -0.1547, -0.1436, -0.1838, -0.0976, -0.2173,
        -0.0567, -0.1977, -0.0494, -0.2345, -0.2448, -0.1626, -0.2124, -0.2989,
        -0.1508, -0.1722, -0.0950, -0.0485, -0.1820, -0.2373, -0.1399, -0.0273,
        -0.0970, -0.1485, -0.0869, -0.1335, -0.2447, -0.2227, -0.0350, -0.1703,
        -0.1997, -0.1480, -0.2200, -0.1485, -0.1040, -0.1563, -0.0907, -0.0850,
        -0.2164, -0.2646, -0.0491, -0.0917, -0.1242, -0.2142])
##########################################################
prot_net.embedding.weight shape: torch.Size([27, 64])
tensor([[ 6.7294e-01, -1.4089e+00, -2.1486e-01,  ...,  1.1518e-01,
          6.8377e-01,  6.7712e-01],
        [-1.6287e+00, -8.1550e-01, -2.3935e-01,  ...,  1.3431e-01,
          1.2784e+00,  7.5977e-01],
        [ 1.0244e+00, -2.2919e+00, -5.4019e-01,  ...,  3.3363e-02,
          1.2941e+00, -1.4212e-01],
        ...,
        [-2.9034e-01,  1.0131e+00, -1.1599e+00,  ..., -4.3727e-01,
          3.5716e-01,  8.3433e-01],
        [-6.9502e-01, -7.4518e-01, -4.0171e-01,  ...,  1.4405e-01,
         -9.2805e-01, -1.5787e+00],
        [-9.5403e-01,  2.3940e-01,  4.9511e-01,  ..., -1.2652e+00,
          2.8736e-05,  4.8433e-01]])
tensor([[ 6.7294e-01, -1.4089e+00, -2.1486e-01,  ...,  1.1518e-01,
          6.8377e-01,  6.7712e-01],
        [-1.6287e+00, -8.1550e-01, -2.3935e-01,  ...,  1.3431e-01,
          1.2784e+00,  7.5977e-01],
        [ 1.0114e+00, -2.2925e+00, -5.2940e-01,  ...,  4.1143e-02,
          1.3029e+00, -1.6002e-01],
        ...,
        [-2.9034e-01,  1.0131e+00, -1.1599e+00,  ..., -4.3727e-01,
          3.5716e-01,  8.3433e-01],
        [-6.9502e-01, -7.4518e-01, -4.0171e-01,  ...,  1.4405e-01,
         -9.2805e-01, -1.5787e+00],
        [-9.5403e-01,  2.3940e-01,  4.9511e-01,  ..., -1.2652e+00,
          2.8736e-05,  4.8433e-01]])
##########################################################
prot_net.dense1.weight shape: torch.Size([64, 64])
tensor([[ 0.0145,  0.1789, -0.1310,  ...,  0.1846,  0.0711, -0.2132],
        [ 0.2008, -0.1427,  0.2035,  ...,  0.0129,  0.0855,  0.1543],
        [-0.1585,  0.0601,  0.1591,  ..., -0.0632,  0.1558,  0.1167],
        ...,
        [ 0.1050,  0.1791,  0.1435,  ..., -0.1886,  0.0581, -0.0782],
        [ 0.0461, -0.0362, -0.1254,  ...,  0.0275, -0.0778, -0.0738],
        [-0.0586,  0.0017,  0.1968,  ...,  0.1434,  0.0180,  0.0400]])
tensor([[ 2.2775e-02,  1.7100e-01, -1.1141e-01,  ...,  1.9461e-01,
          7.8336e-02, -2.2250e-01],
        [ 1.8996e-01, -1.2836e-01,  1.9642e-01,  ...,  1.9455e-05,
          7.0660e-02,  1.6864e-01],
        [-1.5851e-01,  6.0093e-02,  1.5910e-01,  ..., -6.3172e-02,
          1.5578e-01,  1.1670e-01],
        ...,
        [ 9.6955e-02,  1.8880e-01,  1.4523e-01,  ..., -2.0171e-01,
          5.5297e-02, -6.9145e-02],
        [ 3.4841e-02, -2.9370e-02, -1.2740e-01,  ...,  2.8759e-02,
         -7.1105e-02, -6.4462e-02],
        [-5.8624e-02,  1.7228e-03,  1.9683e-01,  ...,  1.4341e-01,
          1.8007e-02,  3.9956e-02]])
##########################################################
prot_net.dense1.bias shape: torch.Size([64])
tensor([-0.0342, -0.0679,  0.0416,  0.0225, -0.1160, -0.0521, -0.0629,  0.0021,
         0.0237,  0.1078,  0.0620, -0.1126,  0.1139, -0.0836, -0.0864,  0.0530,
        -0.0433, -0.0776, -0.1000, -0.1181, -0.1015,  0.0534,  0.0129,  0.0104,
        -0.0575, -0.0086, -0.0451,  0.0110,  0.0204,  0.0307,  0.0331,  0.0888,
        -0.1066,  0.1137,  0.0237, -0.0316,  0.0956, -0.1072, -0.0163, -0.0453,
        -0.0042,  0.0082, -0.0137,  0.0830,  0.0230,  0.0932,  0.0233, -0.0398,
         0.0533, -0.0993,  0.0098, -0.0849,  0.1059, -0.0155, -0.0076,  0.0425,
        -0.0783,  0.0981,  0.0685,  0.0488, -0.0790,  0.0412,  0.0003, -0.1238])
tensor([-0.0289, -0.0844,  0.0416,  0.0280, -0.1174, -0.0603, -0.0566,  0.0102,
         0.0237,  0.1290,  0.0673, -0.1055,  0.0971, -0.0755, -0.0864,  0.0403,
        -0.0467, -0.0892, -0.1000, -0.1063, -0.1150,  0.0444,  0.0048,  0.0079,
        -0.0714,  0.0100, -0.0448,  0.0241,  0.0204,  0.0314,  0.0419,  0.0669,
        -0.1037,  0.1137,  0.0185, -0.0373,  0.0778, -0.1174, -0.0224, -0.0498,
        -0.0095, -0.0123, -0.0071,  0.1083,  0.0301,  0.0830,  0.0060, -0.0512,
         0.0521, -0.0993,  0.0162, -0.0816,  0.1059, -0.0234, -0.0071,  0.0346,
        -0.0774,  0.1173,  0.0553,  0.0488, -0.0892,  0.0341, -0.0069, -0.1238])
##########################################################
prot_net.dense2.weight shape: torch.Size([128, 64])
tensor([[ 0.0681,  0.0833,  0.0794,  ...,  0.0714, -0.1438, -0.0408],
        [ 0.1493, -0.0674, -0.1749,  ...,  0.1628,  0.1696,  0.1059],
        [ 0.1247,  0.0826, -0.0796,  ..., -0.1705, -0.1696,  0.0015],
        ...,
        [-0.1418, -0.1498,  0.0098,  ...,  0.1137,  0.0726, -0.1637],
        [-0.1005, -0.0901,  0.1548,  ..., -0.0904,  0.0772,  0.0013],
        [ 0.0351, -0.1078,  0.0206,  ...,  0.0006, -0.0082,  0.1354]])
tensor([[ 0.0665,  0.0544,  0.0794,  ...,  0.0674, -0.1375, -0.0408],
        [ 0.1349, -0.0742, -0.1749,  ...,  0.1523,  0.1725,  0.1059],
        [ 0.1188,  0.0795, -0.0796,  ..., -0.1738, -0.1774,  0.0015],
        ...,
        [-0.1269, -0.1540,  0.0098,  ...,  0.1267,  0.0727, -0.1637],
        [-0.0817, -0.1010,  0.1548,  ..., -0.0927,  0.0694,  0.0013],
        [ 0.0522, -0.1137,  0.0206,  ...,  0.0042,  0.0011,  0.1354]])
##########################################################
prot_net.dense2.bias shape: torch.Size([128])
tensor([-0.0921, -0.1186,  0.1092,  0.1074, -0.0997, -0.1034,  0.0720, -0.0093,
        -0.0154,  0.0694,  0.0719, -0.0186, -0.0055, -0.1202, -0.1229,  0.0371,
        -0.0444, -0.0896, -0.0792, -0.0493, -0.1143, -0.0166, -0.0568, -0.0382,
        -0.0130, -0.1247, -0.0371,  0.1195,  0.0379, -0.1046,  0.0023, -0.1175,
        -0.0167,  0.0025, -0.0457, -0.0737, -0.1091, -0.1056, -0.0491, -0.0214,
        -0.0096,  0.1239, -0.0011,  0.0758,  0.0267, -0.1050,  0.0719,  0.1157,
        -0.0573, -0.0622, -0.0992, -0.1122, -0.1167, -0.1233, -0.1196, -0.0494,
        -0.1235, -0.0411,  0.0074,  0.0200, -0.0801,  0.0409,  0.0006, -0.0033,
         0.0087,  0.0440, -0.0499, -0.0430,  0.0929, -0.1185, -0.1115, -0.1057,
         0.0971,  0.0926,  0.0949,  0.0399, -0.0513,  0.0288,  0.0484, -0.1102,
        -0.1124, -0.0232,  0.0728, -0.0049, -0.0346,  0.0754, -0.1072,  0.0218,
        -0.1028,  0.0426,  0.0143, -0.1198,  0.1177,  0.0197,  0.0077,  0.0114,
         0.0792,  0.0562,  0.1123, -0.1156, -0.1038,  0.0039,  0.0283, -0.0639,
         0.1211,  0.0141,  0.0463,  0.0340, -0.0352, -0.1065,  0.0935, -0.0937,
         0.0902, -0.0349,  0.0428,  0.0625, -0.1055,  0.0801, -0.0840,  0.0906,
        -0.0129,  0.1035,  0.0998,  0.0255,  0.0939, -0.0323, -0.0914, -0.0482])
tensor([-0.1007, -0.1347,  0.1177,  0.1134, -0.1269, -0.1010,  0.0779, -0.0302,
        -0.0105,  0.0509,  0.0632, -0.0258, -0.0135, -0.1116, -0.1379,  0.0216,
        -0.0321, -0.0892, -0.0781, -0.0432, -0.1110, -0.0231, -0.0647, -0.0472,
        -0.0022, -0.1279, -0.0456,  0.1053,  0.0335, -0.0937, -0.0174, -0.1114,
        -0.0276,  0.0014, -0.0420, -0.0831, -0.1039, -0.0883, -0.0466, -0.0256,
        -0.0107,  0.1116,  0.0011,  0.0728,  0.0145, -0.1178,  0.0840,  0.1172,
        -0.0593, -0.0687, -0.0867, -0.1181, -0.1085, -0.1210, -0.1395, -0.0327,
        -0.1323, -0.0375, -0.0004,  0.0208, -0.0873,  0.0425,  0.0107, -0.0035,
        -0.0015,  0.0524, -0.0441, -0.0583,  0.0887, -0.1195, -0.0827, -0.1198,
         0.1185,  0.1083,  0.0815,  0.0274, -0.0571,  0.0374,  0.0637, -0.1036,
        -0.1125, -0.0199,  0.0861, -0.0085, -0.0367,  0.0884, -0.1107,  0.0232,
        -0.1052,  0.0372,  0.0200, -0.1228,  0.1041,  0.0242,  0.0083, -0.0046,
         0.0612,  0.0479,  0.1087, -0.1175, -0.1124,  0.0007,  0.0227, -0.0366,
         0.1378, -0.0022,  0.0402,  0.0407, -0.0416, -0.1080,  0.0961, -0.0808,
         0.0898, -0.0341,  0.0260,  0.0615, -0.0971,  0.0894, -0.0740,  0.0762,
         0.0089,  0.0979,  0.1060,  0.0301,  0.1022, -0.0210, -0.0867, -0.0367])
##########################################################
{'decoder.embedding.weight': tensor(0.0019), 'encoder.embedding.weight': tensor(0.0029), 'encoder.prot_encoding.dense.bias': tensor(0.0061), 'prot_net.dense2.weight': tensor(0.0062), 'encoder.convT1d.bias': tensor(0.0065), 'prot_net.embedding.weight': tensor(0.0065), 'prot_net.dense1.weight': tensor(0.0069), 'encoder.convT1d.weight': tensor(0.0070), 'prot_net.dense1.bias': tensor(0.0078), 'decoder.convT1d.weight': tensor(0.0080), 'decoder.blks.block0.attention1.W_q.weight': tensor(0.0082), 'decoder.blks.block0.attention1.W_k.weight': tensor(0.0083), 'prot_net.dense2.bias': tensor(0.0085), 'encoder.blks.block1.ffn.dense1.bias': tensor(0.0086), 'decoder.blks.block0.attention1.W_mix_k.weight': tensor(0.0088), 'decoder.blks.block0.attention1.W_mix_q.weight': tensor(0.0088), 'encoder.prot_encoding.ln.weight': tensor(0.0091), 'decoder.prot_encoding.dense.bias': tensor(0.0094), 'encoder.blks.block0.attention.W_q.weight': tensor(0.0095), 'encoder.blks.block0.attention.W_k.weight': tensor(0.0096), 'decoder.convT1d.bias': tensor(0.0097), 'encoder.blks.block0.attention.W_mix_q.weight': tensor(0.0099), 'decoder.prot_encoding.ln.weight': tensor(0.0101), 'decoder.prot_encoding.dense.weight': tensor(0.0101), 'encoder.blks.block0.attention.W_mix_k.weight': tensor(0.0102), 'encoder.prot_encoding.dense.weight': tensor(0.0103), 'encoder.blks.block2.addnorm1.ln.weight': tensor(0.0105), 'encoder.blks.block1.attention.W_q.weight': tensor(0.0106), 'encoder.blks.block1.attention.W_k.weight': tensor(0.0106), 'encoder.blks.block1.attention.W_mix_q.weight': tensor(0.0107), 'encoder.blks.block0.addnorm2.ln.weight': tensor(0.0107), 'encoder.blks.block2.attention.W_q.weight': tensor(0.0107), 'encoder.prot_encoding.ln.bias': tensor(0.0108), 'encoder.blks.block1.attention.W_mix_k.weight': tensor(0.0109), 'encoder.blks.block2.attention.W_k.weight': tensor(0.0109), 'encoder.blks.block2.attention.W_mix_q.weight': tensor(0.0110), 'encoder.blks.block0.addnorm1.ln.weight': tensor(0.0110), 'decoder.blks.block1.attention1.W_mix_q.weight': tensor(0.0113), 'decoder.blks.block1.attention1.W_k.weight': tensor(0.0114), 'encoder.blks.block2.attention.W_mix_k.weight': tensor(0.0114), 'encoder.blks.block1.addnorm1.ln.weight': tensor(0.0114), 'decoder.blks.block1.attention1.W_q.weight': tensor(0.0116), 'encoder.blks.block4.ffn.dense2.bias': tensor(0.0117), 'encoder.blks.block4.addnorm2.ln.bias': tensor(0.0117), 'encoder.blks.block0.attention.W_o.weight': tensor(0.0117), 'encoder.blks.block1.addnorm2.ln.bias': tensor(0.0117), 'encoder.blks.block1.attention.W_o.weight': tensor(0.0118), 'encoder.blks.block1.ffn.dense2.weight': tensor(0.0119), 'decoder.blks.block0.addnorm3.ln.weight': tensor(0.0119), 'decoder.blks.block0.ffn.dense2.weight': tensor(0.0120), 'encoder.blks.block1.attention.W_v.weight': tensor(0.0120), 'decoder.blks.block0.addnorm1.ln.bias': tensor(0.0120), 'decoder.blks.block1.attention1.W_mix_k.weight': tensor(0.0120), 'encoder.blks.block3.addnorm2.ln.weight': tensor(0.0120), 'encoder.blks.block1.ffn.dense1.weight': tensor(0.0121), 'encoder.blks.block1.addnorm2.ln.weight': tensor(0.0121), 'encoder.blks.block0.attention.W_v.weight': tensor(0.0121), 'decoder.blks.block0.attention2.W_q.weight': tensor(0.0121), 'decoder.blks.block0.ffn.dense1.weight': tensor(0.0122), 'encoder.blks.block1.ffn.dense2.bias': tensor(0.0122), 'decoder.blks.block0.attention2.W_k.weight': tensor(0.0123), 'encoder.blks.block0.ffn.dense1.weight': tensor(0.0123), 'decoder.blks.block0.addnorm1.ln.weight': tensor(0.0123), 'encoder.blks.block0.addnorm1.ln.bias': tensor(0.0124), 'encoder.blks.block0.ffn.dense2.weight': tensor(0.0124), 'encoder.blks.block5.addnorm1.ln.weight': tensor(0.0125), 'encoder.blks.block5.addnorm2.ln.weight': tensor(0.0125), 'decoder.blks.block0.attention2.W_v.weight': tensor(0.0125), 'decoder.blks.block0.attention1.W_o.weight': tensor(0.0126), 'decoder.blks.block0.addnorm2.ln.bias': tensor(0.0126), 'encoder.blks.block4.addnorm1.ln.bias': tensor(0.0126), 'decoder.blks.block1.attention2.W_q.weight': tensor(0.0128), 'encoder.blks.block3.attention.W_q.weight': tensor(0.0129), 'decoder.blks.block0.addnorm2.ln.weight': tensor(0.0129), 'encoder.blks.block0.ffn.dense2.bias': tensor(0.0129), 'encoder.blks.block4.attention.W_k.weight': tensor(0.0129), 'decoder.blks.block0.attention2.W_o.weight': tensor(0.0130), 'encoder.blks.block3.attention.W_k.weight': tensor(0.0130), 'decoder.blks.block0.attention1.W_v.weight': tensor(0.0130), 'encoder.blks.block3.attention.W_mix_q.weight': tensor(0.0130), 'encoder.blks.block4.attention.W_q.weight': tensor(0.0131), 'decoder.blks.block2.attention1.W_mix_q.weight': tensor(0.0131), 'encoder.blks.block4.addnorm1.ln.weight': tensor(0.0132), 'encoder.blks.block2.attention.W_v.weight': tensor(0.0132), 'encoder.blks.block1.addnorm1.ln.bias': tensor(0.0132), 'encoder.blks.block5.attention.W_k.weight': tensor(0.0132), 'decoder.blks.block2.attention1.W_q.weight': tensor(0.0132), 'encoder.blks.block0.addnorm2.ln.bias': tensor(0.0132), 'encoder.blks.block2.addnorm2.ln.weight': tensor(0.0133), 'encoder.blks.block2.ffn.dense2.weight': tensor(0.0133), 'encoder.blks.block5.attention.W_mix_q.weight': tensor(0.0134), 'decoder.prot_encoding.ln.bias': tensor(0.0134), 'encoder.blks.block5.attention.W_q.weight': tensor(0.0134), 'encoder.blks.block2.attention.W_o.weight': tensor(0.0135), 'encoder.blks.block4.attention.W_mix_q.weight': tensor(0.0135), 'decoder.blks.block0.ffn.dense2.bias': tensor(0.0135), 'encoder.blks.block3.attention.W_mix_k.weight': tensor(0.0136), 'decoder.blks.block2.addnorm2.ln.weight': tensor(0.0136), 'decoder.blks.block2.attention1.W_k.weight': tensor(0.0136), 'encoder.blks.block4.attention.W_o.weight': tensor(0.0137), 'encoder.blks.block5.attention.W_v.weight': tensor(0.0137), 'encoder.blks.block3.addnorm1.ln.weight': tensor(0.0137), 'decoder.blks.block2.ffn.dense2.bias': tensor(0.0137), 'decoder.blks.block3.addnorm1.ln.weight': tensor(0.0138), 'decoder.blks.block1.addnorm3.ln.bias': tensor(0.0138), 'decoder.blks.block1.attention2.W_k.weight': tensor(0.0138), 'decoder.blks.block3.addnorm3.ln.weight': tensor(0.0138), 'encoder.blks.block4.ffn.dense2.weight': tensor(0.0138), 'decoder.blks.block3.attention1.W_q.weight': tensor(0.0138), 'encoder.blks.block4.attention.W_mix_k.weight': tensor(0.0139), 'encoder.blks.block5.attention.W_mix_k.weight': tensor(0.0139), 'encoder.blks.block5.ffn.dense1.weight': tensor(0.0139), 'decoder.blks.block2.ffn.dense2.weight': tensor(0.0139), 'encoder.blks.block2.ffn.dense1.weight': tensor(0.0139), 'decoder.blks.block1.attention1.W_v.weight': tensor(0.0140), 'decoder.blks.block3.attention1.W_mix_q.weight': tensor(0.0140), 'decoder.blks.block2.attention2.W_q.weight': tensor(0.0140), 'encoder.blks.block5.addnorm1.ln.bias': tensor(0.0141), 'encoder.blks.block4.addnorm2.ln.weight': tensor(0.0142), 'decoder.blks.block2.addnorm1.ln.bias': tensor(0.0142), 'encoder.blks.block4.ffn.dense1.weight': tensor(0.0142), 'decoder.blks.block2.attention1.W_mix_k.weight': tensor(0.0142), 'decoder.blks.block1.ffn.dense2.weight': tensor(0.0142), 'encoder.blks.block5.attention.W_o.weight': tensor(0.0143), 'decoder.blks.block3.attention1.W_k.weight': tensor(0.0143), 'encoder.blks.block4.attention.W_v.weight': tensor(0.0143), 'encoder.blks.block4.ffn.dense1.bias': tensor(0.0143), 'decoder.blks.block0.addnorm3.ln.bias': tensor(0.0143), 'decoder.blks.block2.addnorm3.ln.bias': tensor(0.0143), 'decoder.blks.block4.attention2.W_k.weight': tensor(0.0143), 'decoder.blks.block1.addnorm3.ln.weight': tensor(0.0143), 'encoder.blks.block2.addnorm2.ln.bias': tensor(0.0144), 'decoder.blks.block2.attention2.W_k.weight': tensor(0.0144), 'decoder.blks.block5.attention2.W_k.weight': tensor(0.0144), 'decoder.blks.block1.ffn.dense2.bias': tensor(0.0145), 'decoder.blks.block0.ffn.dense1.bias': tensor(0.0145), 'encoder.blks.block2.ffn.dense2.bias': tensor(0.0146), 'encoder.blks.block3.ffn.dense1.weight': tensor(0.0146), 'decoder.blks.block3.attention1.W_mix_k.weight': tensor(0.0146), 'encoder.blks.block3.attention.W_o.weight': tensor(0.0146), 'encoder.blks.block5.ffn.dense2.weight': tensor(0.0147), 'decoder.blks.block4.attention2.W_q.weight': tensor(0.0147), 'decoder.blks.block2.attention1.W_v.weight': tensor(0.0147), 'encoder.blks.block0.ffn.dense1.bias': tensor(0.0147), 'decoder.blks.block1.ffn.dense1.weight': tensor(0.0147), 'encoder.blks.block5.addnorm2.ln.bias': tensor(0.0147), 'encoder.blks.block2.addnorm1.ln.bias': tensor(0.0147), 'encoder.blks.block3.attention.W_v.weight': tensor(0.0148), 'encoder.blks.block3.ffn.dense2.weight': tensor(0.0148), 'decoder.blks.block1.attention1.W_o.weight': tensor(0.0148), 'decoder.blks.block1.attention2.W_v.weight': tensor(0.0148), 'decoder.blks.block1.addnorm2.ln.weight': tensor(0.0148), 'decoder.blks.block1.addnorm1.ln.bias': tensor(0.0149), 'encoder.blks.block2.ffn.dense1.bias': tensor(0.0149), 'decoder.blks.block2.attention1.W_o.weight': tensor(0.0149), 'decoder.blks.block5.attention2.W_q.weight': tensor(0.0149), 'decoder.blks.block3.attention2.W_q.weight': tensor(0.0150), 'encoder.blks.block5.ffn.dense2.bias': tensor(0.0150), 'decoder.blks.block1.addnorm1.ln.weight': tensor(0.0150), 'decoder.blks.block2.addnorm1.ln.weight': tensor(0.0150), 'decoder.blks.block2.attention2.W_o.weight': tensor(0.0151), 'decoder.blks.block1.attention2.W_o.weight': tensor(0.0151), 'decoder.blks.block4.attention1.W_q.weight': tensor(0.0151), 'decoder.blks.block4.ffn.dense1.weight': tensor(0.0151), 'decoder.blks.block3.ffn.dense2.weight': tensor(0.0151), 'decoder.blks.block4.attention1.W_k.weight': tensor(0.0152), 'decoder.blks.block4.attention1.W_mix_q.weight': tensor(0.0152), 'decoder.blks.block5.attention1.W_mix_q.weight': tensor(0.0153), 'decoder.blks.block2.attention2.W_v.weight': tensor(0.0153), 'encoder.blks.block5.ffn.dense1.bias': tensor(0.0153), 'decoder.blks.block3.attention1.W_o.weight': tensor(0.0154), 'decoder.blks.block3.attention1.W_v.weight': tensor(0.0154), 'decoder.blks.block3.addnorm3.ln.bias': tensor(0.0154), 'decoder.blks.block2.addnorm2.ln.bias': tensor(0.0155), 'decoder.blks.block4.attention1.W_mix_k.weight': tensor(0.0155), 'decoder.blks.block2.ffn.dense1.weight': tensor(0.0155), 'decoder.blks.block5.attention1.W_k.weight': tensor(0.0155), 'decoder.blks.block3.attention2.W_k.weight': tensor(0.0156), 'decoder.blks.block5.attention1.W_q.weight': tensor(0.0157), 'encoder.blks.block3.ffn.dense2.bias': tensor(0.0159), 'decoder.blks.block3.addnorm2.ln.weight': tensor(0.0160), 'decoder.blks.block4.ffn.dense1.bias': tensor(0.0161), 'decoder.blks.block5.attention1.W_mix_k.weight': tensor(0.0161), 'decoder.blks.block3.ffn.dense1.weight': tensor(0.0161), 'decoder.blks.block2.ffn.dense1.bias': tensor(0.0162), 'decoder.blks.block2.addnorm3.ln.weight': tensor(0.0162), 'decoder.blks.block1.addnorm2.ln.bias': tensor(0.0164), 'decoder.blks.block1.ffn.dense1.bias': tensor(0.0165), 'decoder.blks.block3.attention2.W_o.weight': tensor(0.0168), 'decoder.blks.block4.attention1.W_o.weight': tensor(0.0168), 'encoder.blks.block3.addnorm2.ln.bias': tensor(0.0169), 'decoder.blks.block4.ffn.dense2.weight': tensor(0.0170), 'encoder.blks.block3.addnorm1.ln.bias': tensor(0.0170), 'decoder.blks.block3.addnorm1.ln.bias': tensor(0.0171), 'decoder.blks.block4.attention1.W_v.weight': tensor(0.0173), 'decoder.blks.block3.ffn.dense1.bias': tensor(0.0174), 'decoder.blks.block3.addnorm2.ln.bias': tensor(0.0175), 'decoder.blks.block3.attention2.W_v.weight': tensor(0.0175), 'encoder.blks.block3.ffn.dense1.bias': tensor(0.0176), 'decoder.blks.block4.attention2.W_v.weight': tensor(0.0179), 'decoder.blks.block4.addnorm1.ln.weight': tensor(0.0180), 'decoder.blks.block5.attention1.W_v.weight': tensor(0.0183), 'decoder.blks.block4.attention2.W_o.weight': tensor(0.0183), 'decoder.blks.block5.ffn.dense1.bias': tensor(0.0184), 'decoder.blks.block5.attention2.W_v.weight': tensor(0.0186), 'decoder.blks.block3.ffn.dense2.bias': tensor(0.0188), 'decoder.blks.block4.addnorm2.ln.weight': tensor(0.0189), 'decoder.blks.block5.ffn.dense1.weight': tensor(0.0195), 'decoder.blks.block5.attention2.W_o.weight': tensor(0.0219), 'decoder.blks.block5.attention1.W_o.weight': tensor(0.0223), 'decoder.blks.block5.ffn.dense2.weight': tensor(0.0225), 'decoder.blks.block4.addnorm3.ln.weight': tensor(0.0226), 'decoder.blks.block4.ffn.dense2.bias': tensor(0.0234), 'decoder.blks.block4.addnorm1.ln.bias': tensor(0.0248), 'decoder.blks.block4.addnorm2.ln.bias': tensor(0.0272), 'decoder.blks.block5.ffn.dense2.bias': tensor(0.0294), 'decoder.blks.block5.addnorm3.ln.weight': tensor(0.0302), 'decoder.blks.block4.addnorm3.ln.bias': tensor(0.0344), 'decoder.blks.block5.addnorm2.ln.weight': tensor(0.0416), 'decoder.blks.block5.addnorm1.ln.weight': tensor(0.0432), 'decoder.blks.block5.addnorm3.ln.bias': tensor(0.0634), 'decoder.blks.block5.addnorm1.ln.bias': tensor(0.0646), 'decoder.blks.block5.addnorm2.ln.bias': tensor(0.0692), 'decoder.dense.weight': tensor(0.1059), 'decoder.dense.bias': tensor(0.1248)}