smi_encoder.embedding.weight shape: torch.Size([166, 64])
tensor([[ 1.0131, -0.2699, -1.8087,  ...,  0.9555,  1.4440,  0.4578],
        [-0.8163,  0.5424, -1.4801,  ..., -0.3295, -0.7485, -1.9519],
        [ 0.0252,  0.2658,  0.8077,  ...,  0.3764, -2.3035,  1.3408],
        ...,
        [ 0.4416,  0.4689,  0.8651,  ...,  0.0217,  0.1627,  1.3577],
        [-0.3841, -0.9819, -2.5312,  ...,  1.4526, -0.4719, -0.4409],
        [-0.0962, -0.0663, -0.2366,  ..., -0.4563,  0.6916, -0.1244]])
tensor([[ 1.0131, -0.2699, -1.8087,  ...,  0.9555,  1.4440,  0.4578],
        [-0.8290,  0.5546, -1.4702,  ..., -0.3353, -0.7827, -1.9768],
        [ 0.0252,  0.2658,  0.8077,  ...,  0.3764, -2.3035,  1.3408],
        ...,
        [ 0.4416,  0.4689,  0.8651,  ...,  0.0217,  0.1627,  1.3577],
        [-0.3841, -0.9819, -2.5312,  ...,  1.4526, -0.4719, -0.4409],
        [-0.0962, -0.0663, -0.2366,  ..., -0.4563,  0.6916, -0.1244]])
##########################################################
smi_encoder.encoder.layers.0.self_attn.in_proj_weight shape: torch.Size([192, 64])
tensor([[-0.0186, -0.0381,  0.0222,  ..., -0.0288, -0.0783,  0.0461],
        [-0.0723, -0.0014, -0.0510,  ..., -0.0563, -0.0410,  0.0563],
        [-0.0384,  0.0333,  0.0380,  ...,  0.0345, -0.0234, -0.0756],
        ...,
        [-0.0738,  0.0111, -0.0089,  ..., -0.0210,  0.0377, -0.0520],
        [ 0.0194, -0.0282,  0.0204,  ...,  0.0256,  0.0738, -0.0434],
        [ 0.0404, -0.0488, -0.0545,  ..., -0.0336, -0.0434,  0.0134]])
tensor([[-0.0468, -0.0258,  0.0304,  ..., -0.0214, -0.0548,  0.0448],
        [-0.0697, -0.0025, -0.0353,  ..., -0.0598, -0.0563,  0.0526],
        [-0.0451,  0.0312,  0.0315,  ...,  0.0403, -0.0163, -0.0695],
        ...,
        [-0.0994,  0.0465, -0.0068,  ..., -0.0305,  0.0120, -0.0982],
        [ 0.0218, -0.0088,  0.0326,  ...,  0.0200,  0.0722, -0.0387],
        [ 0.0166, -0.0637, -0.0670,  ..., -0.0268, -0.0846, -0.0141]])
##########################################################
smi_encoder.encoder.layers.0.self_attn.in_proj_bias shape: torch.Size([192])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 2.1878e-03, -2.4917e-02, -6.1393e-03,  1.1393e-02, -4.4971e-03,
         4.1279e-03, -9.1878e-03, -9.2575e-03,  5.5366e-03,  5.0095e-03,
        -5.6456e-03, -1.2780e-03, -1.2101e-02,  7.9979e-03,  4.4990e-03,
        -1.7496e-02, -5.9057e-03,  4.2640e-03,  1.2323e-02, -1.6826e-02,
        -1.7087e-02,  2.1961e-03, -3.7408e-03, -1.1077e-02, -3.1331e-03,
         5.5363e-03,  1.8632e-02,  9.5988e-04,  1.8431e-02, -3.7881e-02,
         1.1247e-02,  5.3231e-02,  2.0007e-03, -5.0261e-03,  1.2958e-02,
        -1.3498e-02,  2.2991e-02,  1.0778e-02, -4.2600e-04,  5.6662e-04,
         1.1554e-02,  4.3139e-03, -1.6164e-02, -1.4658e-02, -1.9764e-02,
        -3.1644e-03, -1.0466e-02, -1.0733e-02,  2.8284e-02, -1.7934e-02,
         5.9731e-03,  1.2765e-02,  9.8908e-03, -1.7036e-02,  6.0738e-03,
        -1.2167e-02,  1.4609e-02,  2.9787e-03,  2.4619e-02, -2.0007e-02,
        -9.6704e-03,  1.2878e-02,  1.2694e-03,  1.2115e-03,  4.7446e-05,
         2.1144e-04,  1.4080e-05,  2.0841e-04,  3.7978e-04,  1.0145e-04,
        -2.4073e-04, -1.8203e-04,  3.4944e-04, -3.3679e-05,  5.3966e-04,
         1.7837e-04, -3.0535e-05,  1.4093e-04, -1.0163e-04, -2.7682e-05,
        -2.4012e-05,  3.1755e-04, -5.5818e-05, -3.3073e-04, -1.2936e-04,
         1.6799e-04, -4.5336e-04,  1.0207e-04,  2.0460e-04, -3.3224e-04,
         9.1976e-05, -1.0439e-04, -2.2986e-04, -9.5364e-05, -1.7677e-04,
         1.7214e-04,  4.1758e-05,  9.8125e-05, -8.4188e-05, -4.9920e-05,
        -1.8163e-04, -1.5866e-04, -1.7076e-05,  1.8659e-04,  2.1797e-04,
        -1.2077e-04, -2.2691e-04, -1.3532e-04,  4.7011e-05,  2.0679e-05,
        -5.7052e-05,  1.6856e-04, -1.7935e-04,  2.4520e-04, -8.9833e-05,
        -1.3712e-06,  8.3058e-05,  3.4632e-05, -8.1633e-05, -4.3195e-05,
        -7.5380e-05,  7.6703e-05,  1.6455e-04, -1.1151e-04,  3.9154e-05,
        -2.7518e-05,  5.0935e-05, -1.4499e-04, -8.6776e-03, -5.9367e-03,
        -2.8036e-04, -1.4152e-02,  1.6922e-02, -1.6375e-02,  1.2625e-02,
        -1.5454e-02,  3.8495e-04,  3.2282e-03, -1.8733e-02,  4.8605e-03,
        -1.1262e-02, -9.1809e-04,  9.4576e-03, -8.4497e-03, -4.8754e-03,
        -1.1215e-02,  3.7156e-03,  1.1821e-02,  3.9078e-03,  7.8762e-03,
         7.7233e-03, -1.1516e-02, -9.5695e-04, -4.7765e-03,  1.9022e-03,
        -1.2397e-02, -2.1532e-03,  1.9530e-03, -3.4496e-03,  9.8823e-03,
         8.2798e-04,  1.1120e-02,  1.8268e-02,  1.5479e-02,  4.2655e-03,
        -2.2321e-03,  1.0138e-02,  2.6981e-02,  6.0912e-03,  1.6558e-02,
         4.4382e-03,  1.4504e-03, -2.4636e-03, -1.8237e-02,  4.5100e-03,
         4.2428e-03,  2.3982e-02,  2.1353e-03,  9.1553e-03, -6.8183e-03,
        -2.1370e-03, -2.2676e-03, -5.8931e-03,  7.6379e-03,  1.1446e-03,
        -4.1132e-03,  2.8244e-03, -1.5244e-02, -2.6314e-03,  5.1103e-03,
         3.6639e-03,  5.8694e-05])
##########################################################
smi_encoder.encoder.layers.0.self_attn.out_proj.weight shape: torch.Size([64, 64])
tensor([[ 0.0505,  0.0281, -0.0763,  ..., -0.1009, -0.0134, -0.0966],
        [ 0.0685, -0.1013,  0.0551,  ...,  0.0990,  0.0783,  0.0768],
        [ 0.0946,  0.0698, -0.1162,  ...,  0.0208, -0.0469, -0.1210],
        ...,
        [-0.0241, -0.0221, -0.0948,  ..., -0.0118, -0.0531, -0.0943],
        [-0.0603, -0.0441,  0.0700,  ..., -0.0913, -0.0121, -0.0685],
        [ 0.0983,  0.0556,  0.0573,  ..., -0.1142, -0.0500, -0.0667]])
tensor([[ 0.0662,  0.0474, -0.0880,  ..., -0.1322, -0.0066, -0.0846],
        [ 0.0873, -0.0863,  0.0761,  ...,  0.0949,  0.0694,  0.0946],
        [ 0.0872,  0.0392, -0.1197,  ..., -0.0032, -0.0679, -0.1293],
        ...,
        [ 0.0347,  0.0064, -0.0849,  ..., -0.0401, -0.0596, -0.1063],
        [-0.0238, -0.0442,  0.0373,  ..., -0.1086, -0.0289, -0.0870],
        [ 0.1111,  0.0745,  0.0471,  ..., -0.1403, -0.0876, -0.1217]])
##########################################################
smi_encoder.encoder.layers.0.self_attn.out_proj.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 8.0404e-04, -9.5990e-04,  1.5325e-02,  2.9436e-02, -1.7327e-02,
         9.0349e-03,  9.5873e-04,  1.1591e-03,  1.2813e-02,  7.0698e-03,
         4.8210e-04, -4.3815e-03,  1.7116e-02, -6.3053e-03, -1.4380e-02,
        -1.1807e-02,  2.9103e-04, -1.0501e-02, -1.3806e-02, -2.3887e-03,
        -4.1827e-03, -7.4463e-04, -6.9326e-03,  9.6272e-04,  8.3095e-04,
        -1.5825e-03,  2.3939e-03, -1.1587e-02,  1.3427e-02, -1.2868e-03,
        -1.9504e-03,  4.4473e-04, -1.5709e-02, -1.7934e-02,  6.0567e-03,
         1.9028e-03, -2.1689e-03,  2.5328e-03, -1.3021e-02, -4.8449e-03,
        -5.3903e-03,  9.3480e-03, -3.6252e-04,  4.1011e-03, -1.2230e-03,
        -1.1309e-02, -6.0196e-03, -6.6312e-03,  6.5958e-03,  4.3832e-03,
        -1.7211e-03,  1.4942e-03, -2.2348e-03,  5.5284e-03,  1.3407e-02,
         2.1036e-03,  7.0753e-05,  6.4136e-03, -2.4436e-03,  4.7440e-03,
         1.8414e-03, -2.5478e-03, -3.5524e-03, -9.5766e-03])
##########################################################
smi_encoder.encoder.layers.0.linear1.weight shape: torch.Size([32, 64])
tensor([[-0.0156,  0.0761, -0.0829,  ...,  0.0334, -0.0668, -0.0516],
        [ 0.0446, -0.0638, -0.0901,  ..., -0.0584,  0.0515,  0.0073],
        [-0.0671, -0.0517, -0.0753,  ..., -0.0564,  0.0505,  0.0254],
        ...,
        [ 0.0490,  0.0110, -0.0671,  ...,  0.0589, -0.1009,  0.0242],
        [ 0.0346,  0.0890,  0.0003,  ..., -0.0111,  0.0246,  0.0233],
        [ 0.0184, -0.0737,  0.0424,  ...,  0.0684, -0.0447,  0.0268]])
tensor([[ 0.0040,  0.0369, -0.0597,  ...,  0.0065, -0.1197, -0.0495],
        [ 0.0412, -0.0636, -0.0770,  ..., -0.0783,  0.0406,  0.0133],
        [-0.0361, -0.0430, -0.1163,  ..., -0.0893,  0.0431, -0.0004],
        ...,
        [ 0.0410, -0.0131, -0.0785,  ...,  0.0534, -0.1175,  0.0274],
        [-0.0082,  0.0919,  0.0010,  ..., -0.0167, -0.0009, -0.0127],
        [ 0.0297, -0.0763,  0.0766,  ...,  0.0324, -0.0644, -0.0173]])
##########################################################
smi_encoder.encoder.layers.0.linear1.bias shape: torch.Size([32])
tensor([ 0.0265,  0.0136, -0.0210,  0.0027, -0.0674, -0.1189, -0.0668, -0.0568,
         0.0029, -0.0659,  0.0457, -0.0814, -0.0737, -0.0350, -0.0698,  0.1224,
        -0.1128,  0.0504, -0.0740, -0.0980, -0.0536, -0.0131,  0.0313,  0.1215,
         0.0630,  0.0584, -0.0864, -0.0665,  0.0044,  0.0623, -0.0866,  0.1139])
tensor([ 0.0056, -0.0116,  0.0064,  0.0121, -0.0732, -0.1390, -0.0689, -0.0641,
         0.0218, -0.0689,  0.0469, -0.0904, -0.0374, -0.0447, -0.0770,  0.1204,
        -0.1018,  0.0314, -0.0586, -0.1300, -0.0905, -0.0138,  0.0198,  0.1076,
         0.0710,  0.0444, -0.0900, -0.0697,  0.0024,  0.0479, -0.0886,  0.1030])
##########################################################
smi_encoder.encoder.layers.0.linear2.weight shape: torch.Size([64, 32])
tensor([[ 0.0559,  0.0094, -0.0270,  ..., -0.0231, -0.0928, -0.0677],
        [-0.0664, -0.0573,  0.0797,  ...,  0.0725, -0.1049, -0.0048],
        [-0.0263,  0.0005,  0.0943,  ...,  0.1986, -0.0686,  0.1284],
        ...,
        [-0.1444, -0.1162, -0.0034,  ...,  0.0080, -0.1649,  0.0990],
        [-0.1114,  0.0376, -0.1144,  ..., -0.1430, -0.1268, -0.0849],
        [ 0.0501, -0.0077, -0.0991,  ...,  0.1205,  0.0305,  0.0250]])
tensor([[ 0.0668,  0.0190, -0.0474,  ..., -0.0264, -0.1032, -0.0670],
        [-0.0620, -0.0533,  0.0790,  ...,  0.0823, -0.0627, -0.0371],
        [-0.0165, -0.0008,  0.0933,  ...,  0.2144, -0.0649,  0.1195],
        ...,
        [-0.1839, -0.0948, -0.0270,  ...,  0.0194, -0.1878,  0.0845],
        [-0.0944,  0.0437, -0.1353,  ..., -0.1489, -0.1441, -0.0612],
        [ 0.0401, -0.0220, -0.1053,  ...,  0.0834, -0.0406,  0.0597]])
##########################################################
smi_encoder.encoder.layers.0.linear2.bias shape: torch.Size([64])
tensor([ 0.0875, -0.0321,  0.1277,  0.0822, -0.0944, -0.1434, -0.0990, -0.0041,
        -0.1743,  0.1611, -0.1640, -0.1156, -0.0205, -0.1404, -0.0378,  0.1105,
         0.1631,  0.0154, -0.1641, -0.1482,  0.1592, -0.1401, -0.1145,  0.0984,
        -0.1376, -0.1562, -0.1402,  0.0036, -0.0225,  0.1115,  0.0603, -0.1478,
         0.0907,  0.1302, -0.1054, -0.0769, -0.1333,  0.1158,  0.1605, -0.1397,
         0.1643, -0.0051,  0.1235, -0.0827, -0.0647,  0.1514,  0.1478,  0.1083,
         0.0950,  0.1503, -0.0010, -0.1094,  0.0350, -0.1165, -0.0464,  0.0679,
         0.0534, -0.0086, -0.0377, -0.1163,  0.0117, -0.1611, -0.0763,  0.0680])
tensor([ 8.7617e-02, -3.3044e-02,  1.3602e-01,  1.0466e-01, -1.0721e-01,
        -1.3026e-01, -1.0371e-01,  7.9697e-04, -1.6630e-01,  1.6782e-01,
        -1.5868e-01, -1.1789e-01,  4.3538e-03, -1.4547e-01, -5.0326e-02,
         9.8674e-02,  1.6363e-01,  5.6278e-03, -1.7797e-01, -1.4705e-01,
         1.5285e-01, -1.4327e-01, -1.1152e-01,  9.7514e-02, -1.3275e-01,
        -1.5162e-01, -1.4189e-01, -7.2997e-03, -6.0766e-03,  1.1094e-01,
         6.3207e-02, -1.4818e-01,  6.8434e-02,  1.0426e-01, -9.7316e-02,
        -7.4903e-02, -1.2917e-01,  1.1310e-01,  1.4774e-01, -1.4551e-01,
         1.6082e-01,  8.9112e-03,  1.2228e-01, -8.3473e-02, -6.2413e-02,
         1.3297e-01,  1.3075e-01,  1.0439e-01,  9.4572e-02,  1.5207e-01,
        -1.7385e-04, -1.0642e-01,  3.2037e-02, -1.1169e-01, -3.1720e-02,
         7.3313e-02,  5.6045e-02, -5.3694e-03, -3.7638e-02, -1.0526e-01,
         1.3415e-02, -1.5815e-01, -6.9202e-02,  6.0955e-02])
##########################################################
smi_encoder.encoder.layers.0.norm1.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0126, 1.0261, 0.9774, 1.0002, 0.9652, 0.9909, 1.0102, 0.9719, 1.0247,
        1.0400, 0.9796, 1.0002, 1.0124, 1.0169, 0.9701, 0.9920, 0.9565, 1.0233,
        0.9760, 0.9875, 1.0037, 0.9673, 1.0132, 0.9907, 1.0589, 0.9925, 1.0149,
        0.9544, 0.9924, 1.0083, 1.0280, 0.9675, 1.0173, 1.0336, 0.9630, 0.9875,
        1.0275, 1.0146, 0.9947, 1.0027, 1.0060, 0.9890, 0.9696, 1.0062, 0.9796,
        1.0228, 0.9996, 0.9688, 1.0252, 0.9974, 0.9783, 1.0135, 0.9914, 1.0051,
        0.9963, 0.9804, 1.0274, 0.9827, 0.9988, 0.9978, 0.9972, 1.0274, 1.0196,
        1.0251])
##########################################################
smi_encoder.encoder.layers.0.norm1.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-0.0014, -0.0028,  0.0153,  0.0273, -0.0112,  0.0089, -0.0002,  0.0036,
         0.0101,  0.0066,  0.0043, -0.0041,  0.0216, -0.0089, -0.0153, -0.0127,
         0.0027, -0.0103, -0.0185, -0.0018, -0.0069, -0.0022,  0.0006,  0.0002,
         0.0071,  0.0019,  0.0004, -0.0115,  0.0157,  0.0034,  0.0007,  0.0002,
        -0.0196, -0.0253,  0.0078,  0.0011,  0.0027,  0.0029, -0.0117, -0.0075,
        -0.0056,  0.0120, -0.0013, -0.0040,  0.0027, -0.0122, -0.0118, -0.0064,
         0.0025,  0.0026,  0.0006,  0.0024, -0.0010,  0.0063,  0.0147,  0.0044,
         0.0003,  0.0104, -0.0012,  0.0094,  0.0008,  0.0021,  0.0059, -0.0060])
##########################################################
smi_encoder.encoder.layers.0.norm2.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0129, 1.0212, 0.9572, 0.9973, 0.9633, 0.9913, 1.0129, 0.9882, 1.0276,
        1.0367, 0.9890, 1.0025, 1.0160, 1.0209, 0.9770, 0.9906, 0.9569, 1.0218,
        0.9855, 0.9880, 1.0001, 0.9656, 1.0181, 0.9905, 1.0572, 0.9920, 1.0156,
        0.9521, 0.9916, 1.0079, 1.0214, 0.9737, 1.0083, 1.0370, 0.9729, 0.9831,
        1.0194, 1.0061, 1.0010, 0.9978, 1.0092, 0.9898, 0.9800, 1.0072, 0.9811,
        1.0129, 0.9845, 0.9678, 1.0236, 0.9983, 0.9762, 1.0103, 0.9976, 1.0022,
        1.0095, 0.9786, 1.0271, 0.9860, 1.0041, 0.9850, 0.9963, 1.0271, 1.0109,
        1.0248])
##########################################################
smi_encoder.encoder.layers.0.norm2.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 5.6643e-04, -2.8229e-03,  9.8914e-03,  2.4282e-02, -1.1170e-02,
         9.8414e-03,  1.3208e-03,  3.0847e-03,  8.5288e-03,  8.2568e-03,
         6.2844e-03, -1.7507e-03,  2.5260e-02, -7.2768e-03, -1.4787e-02,
        -1.3101e-02,  3.9724e-03, -6.8771e-03, -1.4180e-02, -4.7510e-04,
        -3.4954e-03, -6.3850e-03, -4.8547e-04,  1.8353e-04,  1.6079e-03,
         8.5733e-05,  8.9277e-04, -5.9132e-03,  1.3392e-02,  1.7789e-03,
         3.7609e-03, -2.1495e-03, -1.9832e-02, -2.3292e-02,  6.2090e-03,
        -2.4350e-03,  1.1394e-03, -1.6972e-03, -1.1101e-02, -6.3611e-03,
        -1.0984e-03,  1.0430e-02,  1.9451e-03,  3.6333e-04,  1.2557e-03,
        -1.6849e-02, -1.2901e-02, -3.5393e-03,  2.8910e-04,  7.6318e-03,
        -1.0970e-03,  2.4601e-03, -5.5047e-03,  3.8409e-03,  9.0926e-03,
         2.1836e-03,  1.6046e-03,  4.2818e-03, -5.0390e-03,  7.7485e-03,
        -9.6344e-04,  5.2607e-04,  4.9611e-03, -5.3558e-03])
##########################################################
smi_encoder.encoder.layers.1.self_attn.in_proj_weight shape: torch.Size([192, 64])
tensor([[-0.0186, -0.0381,  0.0222,  ..., -0.0288, -0.0783,  0.0461],
        [-0.0723, -0.0014, -0.0510,  ..., -0.0563, -0.0410,  0.0563],
        [-0.0384,  0.0333,  0.0380,  ...,  0.0345, -0.0234, -0.0756],
        ...,
        [-0.0738,  0.0111, -0.0089,  ..., -0.0210,  0.0377, -0.0520],
        [ 0.0194, -0.0282,  0.0204,  ...,  0.0256,  0.0738, -0.0434],
        [ 0.0404, -0.0488, -0.0545,  ..., -0.0336, -0.0434,  0.0134]])
tensor([[ 0.0236, -0.0914, -0.0297,  ..., -0.0411, -0.0807,  0.0593],
        [-0.0340, -0.0270, -0.1000,  ..., -0.0673, -0.0543,  0.0682],
        [-0.0929,  0.0646,  0.1062,  ...,  0.0621,  0.0087, -0.0706],
        ...,
        [-0.1006,  0.0144, -0.0115,  ..., -0.0039,  0.0279, -0.0603],
        [-0.0228, -0.0354,  0.0257,  ...,  0.0635,  0.0910, -0.0325],
        [ 0.0598, -0.0465, -0.0493,  ..., -0.0338, -0.0443,  0.0073]])
##########################################################
smi_encoder.encoder.layers.1.self_attn.in_proj_bias shape: torch.Size([192])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 1.3193e-02,  8.6383e-03, -1.9483e-02, -8.2464e-03, -5.6092e-03,
         1.5425e-02, -2.7590e-02, -8.8080e-03, -6.6151e-03, -2.3045e-02,
         2.3533e-02, -2.1320e-03, -1.1352e-02,  7.2750e-03, -1.2311e-02,
         1.2226e-02, -3.8783e-02,  1.9974e-02,  2.8142e-02,  1.9545e-02,
        -2.0276e-02,  2.5358e-02, -2.8810e-02,  1.3901e-02, -1.0944e-02,
         4.1841e-03,  1.9407e-04,  2.0328e-02,  2.1152e-02, -1.7125e-02,
         9.7352e-03,  1.4879e-02, -2.4951e-02,  1.9835e-02,  1.1553e-02,
         1.5462e-02, -7.2234e-03, -2.4423e-03, -2.6853e-02, -1.8159e-02,
        -7.0776e-03,  1.8843e-03, -2.5206e-02,  9.3941e-03, -1.1969e-02,
         3.3192e-03,  7.1581e-03,  8.4762e-03, -1.1717e-02,  1.7831e-02,
         1.2689e-02,  1.0147e-02,  2.5158e-03,  1.8609e-02, -2.2829e-02,
        -2.2052e-03, -5.2678e-03, -9.7542e-03,  7.4455e-03,  1.4534e-02,
        -9.9112e-03,  2.8587e-02,  4.0404e-05, -1.6245e-02,  8.1068e-05,
        -6.3713e-06,  7.9454e-05,  6.8811e-05, -6.2731e-05,  1.2955e-05,
        -4.0018e-05,  8.9584e-06,  1.3598e-05, -9.2791e-06,  1.3887e-04,
         1.5768e-05, -3.1160e-05,  1.1799e-04,  1.8051e-05, -1.6366e-05,
        -2.6216e-04, -1.2317e-04,  9.9488e-05, -3.9115e-05, -8.1029e-05,
        -2.5692e-04,  1.1548e-04,  3.4433e-05,  2.8853e-05, -6.1637e-06,
         2.0577e-05,  1.3282e-04,  8.4768e-05, -2.2564e-05, -1.9403e-05,
        -1.9828e-05, -5.8216e-05,  5.6438e-05,  3.0088e-05,  2.7994e-05,
         7.1774e-07,  3.9629e-05,  4.6309e-05, -1.4575e-05,  2.2566e-05,
        -3.6908e-07, -6.2290e-05,  1.3639e-05,  3.3696e-05, -1.1196e-04,
        -2.0139e-06, -1.7330e-05, -3.1334e-05, -3.5831e-05,  7.9072e-05,
         1.5363e-05,  5.8656e-05,  5.1874e-05, -1.4722e-05,  3.1415e-06,
         2.9480e-05, -5.8148e-05,  2.9603e-05, -1.3418e-04,  1.6994e-06,
         2.6581e-05,  1.0652e-05, -2.7350e-06, -5.4126e-03, -1.8273e-02,
        -4.5659e-03,  2.5097e-02,  5.8728e-03, -1.4574e-02, -1.7984e-02,
         3.9456e-03,  5.6953e-03,  6.8350e-03, -1.2050e-02, -3.7986e-03,
         7.4063e-03,  4.8072e-03,  1.3789e-02,  2.0772e-02,  1.1096e-02,
         1.1413e-02,  1.0534e-02,  5.9858e-03, -2.7899e-03, -2.3545e-02,
        -5.5299e-03, -5.0972e-03,  1.2921e-02, -1.8387e-02,  4.8869e-03,
         7.8661e-03, -5.3268e-04, -2.8555e-04,  1.7699e-03, -1.1127e-02,
         8.9635e-03,  1.4365e-02,  9.2426e-03,  1.0636e-02,  9.5537e-03,
        -5.0159e-03, -1.1813e-02,  2.9140e-03, -2.8231e-03,  7.3727e-03,
         1.2301e-02, -3.0310e-03, -8.0525e-03,  1.0407e-02, -4.0369e-03,
        -6.7122e-03,  1.5280e-02,  4.2027e-03,  1.9015e-04, -1.2152e-02,
        -7.7003e-03,  5.2119e-03, -4.0509e-03,  1.7374e-02,  9.6512e-04,
         3.6635e-03,  5.2770e-03,  1.0248e-03, -2.1268e-03, -2.0016e-03,
        -3.0668e-03, -5.9374e-03])
##########################################################
smi_encoder.encoder.layers.1.self_attn.out_proj.weight shape: torch.Size([64, 64])
tensor([[ 0.0505,  0.0281, -0.0763,  ..., -0.1009, -0.0134, -0.0966],
        [ 0.0685, -0.1013,  0.0551,  ...,  0.0990,  0.0783,  0.0768],
        [ 0.0946,  0.0698, -0.1162,  ...,  0.0208, -0.0469, -0.1210],
        ...,
        [-0.0241, -0.0221, -0.0948,  ..., -0.0118, -0.0531, -0.0943],
        [-0.0603, -0.0441,  0.0700,  ..., -0.0913, -0.0121, -0.0685],
        [ 0.0983,  0.0556,  0.0573,  ..., -0.1142, -0.0500, -0.0667]])
tensor([[ 0.0925,  0.0178, -0.0896,  ..., -0.0954,  0.0095, -0.0855],
        [ 0.0832, -0.0728,  0.0402,  ...,  0.1121,  0.0547,  0.0813],
        [ 0.0744,  0.1021, -0.1137,  ...,  0.0425, -0.0287, -0.1191],
        ...,
        [-0.0397, -0.0359, -0.0718,  ..., -0.0106, -0.0806, -0.1203],
        [-0.0986, -0.0544,  0.0738,  ..., -0.0800,  0.0098, -0.0589],
        [ 0.0770,  0.0527,  0.0599,  ..., -0.1100, -0.0454, -0.0554]])
##########################################################
smi_encoder.encoder.layers.1.self_attn.out_proj.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-0.0052,  0.0019,  0.0146,  0.0263, -0.0136,  0.0144,  0.0045,  0.0072,
         0.0036,  0.0046,  0.0123, -0.0042,  0.0320, -0.0151, -0.0160, -0.0025,
        -0.0043, -0.0116, -0.0207, -0.0047, -0.0043, -0.0171,  0.0039,  0.0013,
         0.0092, -0.0030, -0.0016, -0.0153,  0.0056,  0.0134,  0.0045, -0.0105,
        -0.0219, -0.0227,  0.0117,  0.0056,  0.0049, -0.0009,  0.0035, -0.0078,
         0.0006,  0.0009,  0.0018, -0.0029,  0.0035, -0.0190, -0.0123, -0.0046,
         0.0032,  0.0024,  0.0011, -0.0033, -0.0018,  0.0020,  0.0106,  0.0004,
         0.0062,  0.0066, -0.0081,  0.0054,  0.0005, -0.0043,  0.0036, -0.0070])
##########################################################
smi_encoder.encoder.layers.1.linear1.weight shape: torch.Size([32, 64])
tensor([[-0.0156,  0.0761, -0.0829,  ...,  0.0334, -0.0668, -0.0516],
        [ 0.0446, -0.0638, -0.0901,  ..., -0.0584,  0.0515,  0.0073],
        [-0.0671, -0.0517, -0.0753,  ..., -0.0564,  0.0505,  0.0254],
        ...,
        [ 0.0490,  0.0110, -0.0671,  ...,  0.0589, -0.1009,  0.0242],
        [ 0.0346,  0.0890,  0.0003,  ..., -0.0111,  0.0246,  0.0233],
        [ 0.0184, -0.0737,  0.0424,  ...,  0.0684, -0.0447,  0.0268]])
tensor([[-0.0635,  0.0547, -0.0570,  ...,  0.0538, -0.0745, -0.0509],
        [ 0.0283, -0.0625, -0.0521,  ..., -0.0541,  0.0681,  0.0175],
        [-0.0235, -0.0375, -0.1308,  ..., -0.1018,  0.0370, -0.0066],
        ...,
        [ 0.0411, -0.0032, -0.0891,  ...,  0.0600, -0.1123,  0.0140],
        [ 0.0284,  0.0875,  0.0065,  ..., -0.0185,  0.0035, -0.0045],
        [ 0.0481, -0.0986,  0.0849,  ...,  0.0365, -0.0507, -0.0076]])
##########################################################
smi_encoder.encoder.layers.1.linear1.bias shape: torch.Size([32])
tensor([ 0.0265,  0.0136, -0.0210,  0.0027, -0.0674, -0.1189, -0.0668, -0.0568,
         0.0029, -0.0659,  0.0457, -0.0814, -0.0737, -0.0350, -0.0698,  0.1224,
        -0.1128,  0.0504, -0.0740, -0.0980, -0.0536, -0.0131,  0.0313,  0.1215,
         0.0630,  0.0584, -0.0864, -0.0665,  0.0044,  0.0623, -0.0866,  0.1139])
tensor([-0.0076,  0.0029,  0.0051,  0.0269, -0.0788, -0.1334, -0.0615, -0.0775,
         0.0243, -0.0680,  0.0440, -0.0886, -0.0819, -0.0371, -0.0853,  0.1197,
        -0.1172,  0.0195, -0.0455, -0.1219, -0.0678, -0.0073,  0.0197,  0.1160,
         0.0726,  0.0422, -0.0996, -0.0484, -0.0055,  0.0551, -0.1048,  0.1087])
##########################################################
smi_encoder.encoder.layers.1.linear2.weight shape: torch.Size([64, 32])
tensor([[ 0.0559,  0.0094, -0.0270,  ..., -0.0231, -0.0928, -0.0677],
        [-0.0664, -0.0573,  0.0797,  ...,  0.0725, -0.1049, -0.0048],
        [-0.0263,  0.0005,  0.0943,  ...,  0.1986, -0.0686,  0.1284],
        ...,
        [-0.1444, -0.1162, -0.0034,  ...,  0.0080, -0.1649,  0.0990],
        [-0.1114,  0.0376, -0.1144,  ..., -0.1430, -0.1268, -0.0849],
        [ 0.0501, -0.0077, -0.0991,  ...,  0.1205,  0.0305,  0.0250]])
tensor([[ 0.0517,  0.0067, -0.0502,  ..., -0.0332, -0.0860, -0.0932],
        [-0.0606, -0.0746,  0.0994,  ...,  0.0803, -0.0528,  0.0055],
        [-0.0063, -0.0047,  0.0950,  ...,  0.2152, -0.0717,  0.1150],
        ...,
        [-0.1384, -0.0981, -0.0359,  ...,  0.0424, -0.1873,  0.0690],
        [-0.0969,  0.0398, -0.1397,  ..., -0.1393, -0.1443, -0.0945],
        [ 0.0409,  0.0058, -0.1255,  ...,  0.0794, -0.0250,  0.0499]])
##########################################################
smi_encoder.encoder.layers.1.linear2.bias shape: torch.Size([64])
tensor([ 0.0875, -0.0321,  0.1277,  0.0822, -0.0944, -0.1434, -0.0990, -0.0041,
        -0.1743,  0.1611, -0.1640, -0.1156, -0.0205, -0.1404, -0.0378,  0.1105,
         0.1631,  0.0154, -0.1641, -0.1482,  0.1592, -0.1401, -0.1145,  0.0984,
        -0.1376, -0.1562, -0.1402,  0.0036, -0.0225,  0.1115,  0.0603, -0.1478,
         0.0907,  0.1302, -0.1054, -0.0769, -0.1333,  0.1158,  0.1605, -0.1397,
         0.1643, -0.0051,  0.1235, -0.0827, -0.0647,  0.1514,  0.1478,  0.1083,
         0.0950,  0.1503, -0.0010, -0.1094,  0.0350, -0.1165, -0.0464,  0.0679,
         0.0534, -0.0086, -0.0377, -0.1163,  0.0117, -0.1611, -0.0763,  0.0680])
tensor([ 0.0811, -0.0293,  0.1395,  0.1043, -0.1045, -0.1317, -0.0972,  0.0011,
        -0.1680,  0.1660, -0.1561, -0.1186,  0.0122, -0.1472, -0.0519,  0.1038,
         0.1579,  0.0028, -0.1855, -0.1504,  0.1551, -0.1559, -0.1063,  0.0942,
        -0.1283, -0.1541, -0.1518, -0.0056, -0.0156,  0.1187,  0.0673, -0.1581,
         0.0748,  0.1034, -0.0928, -0.0740, -0.1327,  0.1140,  0.1601, -0.1478,
         0.1635,  0.0058,  0.1275, -0.0814, -0.0588,  0.1267,  0.1290,  0.1062,
         0.0925,  0.1552,  0.0044, -0.1130,  0.0264, -0.1044, -0.0356,  0.0712,
         0.0567, -0.0072, -0.0426, -0.1028,  0.0174, -0.1579, -0.0662,  0.0595])
##########################################################
smi_encoder.encoder.layers.1.norm1.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0049, 1.0245, 0.9068, 0.9870, 0.9551, 0.9915, 1.0085, 0.9904, 1.0354,
        1.0322, 0.9921, 0.9953, 1.0136, 1.0257, 0.9633, 0.9809, 0.9557, 1.0063,
        0.9428, 0.9911, 0.9793, 0.9655, 1.0242, 0.9838, 1.0498, 0.9969, 1.0189,
        0.9418, 0.9879, 1.0182, 1.0158, 0.9760, 1.0105, 1.0460, 0.9732, 0.9586,
        1.0211, 0.9981, 1.0036, 0.9985, 1.0062, 0.9966, 0.9722, 1.0154, 0.9985,
        1.0087, 0.9893, 0.9593, 1.0402, 1.0015, 0.9988, 0.9895, 1.0005, 1.0023,
        0.9877, 0.9746, 1.0237, 0.9770, 0.9972, 0.9817, 0.9953, 1.0273, 1.0171,
        1.0270])
##########################################################
smi_encoder.encoder.layers.1.norm1.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-5.6839e-03,  2.1337e-03,  1.6879e-02,  3.0604e-02, -1.1307e-02,
         1.3270e-02,  3.6769e-03,  3.0143e-03,  7.1293e-03,  7.1409e-03,
         6.9946e-03, -6.8831e-03,  3.1794e-02, -1.3066e-02, -1.4301e-02,
        -4.5101e-03, -3.6266e-03, -1.2550e-02, -2.3495e-02, -6.0410e-03,
        -1.5674e-03, -1.5985e-02,  5.0209e-03,  1.5098e-03,  1.0719e-02,
        -4.4534e-04, -5.1491e-03, -1.0623e-02,  8.6274e-03,  1.2643e-02,
         3.5156e-03, -1.1134e-02, -1.5518e-02, -2.7168e-02,  1.2276e-02,
         5.7347e-03,  4.1720e-04,  2.3694e-03,  3.3077e-04, -8.5504e-03,
        -4.1596e-05,  8.5386e-03,  2.9028e-03, -7.4119e-05,  1.5615e-03,
        -1.6793e-02, -1.2337e-02, -4.3095e-03,  3.8456e-03,  7.2088e-03,
         2.6778e-03, -2.7088e-03, -3.8173e-03,  1.1517e-02,  1.4589e-02,
         1.3872e-03,  4.3065e-03,  7.7255e-03, -5.5310e-03,  1.0956e-02,
         1.7270e-03, -1.3521e-03,  5.9574e-03, -6.9224e-03])
##########################################################
smi_encoder.encoder.layers.1.norm2.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0032, 1.0192, 0.8670, 0.9774, 0.9467, 0.9925, 1.0045, 0.9978, 1.0473,
        1.0278, 1.0033, 0.9928, 1.0214, 1.0415, 0.9703, 0.9806, 0.9490, 1.0062,
        0.9473, 0.9909, 0.9796, 0.9657, 1.0254, 0.9838, 1.0638, 1.0027, 1.0180,
        0.9426, 0.9910, 1.0146, 1.0071, 0.9830, 1.0052, 1.0434, 0.9793, 0.9534,
        1.0160, 0.9956, 1.0068, 0.9945, 1.0120, 0.9981, 0.9808, 1.0184, 1.0027,
        1.0010, 0.9870, 0.9531, 1.0275, 1.0027, 0.9961, 0.9878, 1.0025, 1.0006,
        1.0002, 0.9774, 1.0246, 0.9813, 1.0041, 0.9656, 0.9953, 1.0258, 1.0061,
        1.0221])
##########################################################
smi_encoder.encoder.layers.1.norm2.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-0.0036, -0.0002,  0.0163,  0.0218, -0.0082,  0.0101,  0.0032,  0.0019,
         0.0062,  0.0058,  0.0082, -0.0033,  0.0376, -0.0116, -0.0136, -0.0073,
        -0.0011, -0.0080, -0.0204, -0.0050,  0.0005, -0.0190,  0.0030,  0.0002,
         0.0042, -0.0022, -0.0077, -0.0051,  0.0087,  0.0082,  0.0080, -0.0140,
        -0.0234, -0.0260,  0.0106, -0.0013, -0.0060, -0.0009, -0.0003, -0.0081,
         0.0047,  0.0086,  0.0064,  0.0028,  0.0018, -0.0228, -0.0153, -0.0007,
        -0.0013,  0.0178,  0.0010, -0.0025, -0.0113,  0.0062,  0.0098, -0.0019,
         0.0040,  0.0022, -0.0086,  0.0118,  0.0004, -0.0004,  0.0060, -0.0054])
##########################################################
smi_encoder.encoder.layers.2.self_attn.in_proj_weight shape: torch.Size([192, 64])
tensor([[-0.0186, -0.0381,  0.0222,  ..., -0.0288, -0.0783,  0.0461],
        [-0.0723, -0.0014, -0.0510,  ..., -0.0563, -0.0410,  0.0563],
        [-0.0384,  0.0333,  0.0380,  ...,  0.0345, -0.0234, -0.0756],
        ...,
        [-0.0738,  0.0111, -0.0089,  ..., -0.0210,  0.0377, -0.0520],
        [ 0.0194, -0.0282,  0.0204,  ...,  0.0256,  0.0738, -0.0434],
        [ 0.0404, -0.0488, -0.0545,  ..., -0.0336, -0.0434,  0.0134]])
tensor([[-0.0135, -0.0648, -0.0250,  ..., -0.0270, -0.0764,  0.0665],
        [-0.0635, -0.0055, -0.1008,  ..., -0.0568, -0.0489,  0.0721],
        [-0.0778,  0.0269,  0.0055,  ...,  0.0697,  0.0126, -0.0148],
        ...,
        [-0.1031,  0.0064, -0.0132,  ..., -0.0082,  0.0351, -0.0513],
        [-0.0006, -0.0325,  0.0234,  ...,  0.0381,  0.0783, -0.0368],
        [ 0.0674, -0.0345, -0.0448,  ..., -0.0410, -0.0447,  0.0035]])
##########################################################
smi_encoder.encoder.layers.2.self_attn.in_proj_bias shape: torch.Size([192])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 9.0961e-03, -1.5682e-03, -2.2958e-02, -6.3207e-03,  1.2935e-02,
         1.5181e-02, -2.3121e-02,  6.0368e-04,  6.7080e-03, -8.4037e-03,
         2.3121e-02, -1.7148e-02, -1.6796e-02,  8.0078e-03,  6.5077e-03,
        -4.8820e-03, -2.7679e-02,  1.7590e-02,  2.1186e-02,  1.6698e-02,
        -1.8956e-02,  2.5813e-02,  1.6591e-03,  1.1148e-02, -2.4827e-03,
         1.4455e-02,  2.4809e-02,  2.9873e-02,  1.4463e-02, -1.9249e-04,
        -3.5974e-03,  1.6283e-02, -1.7026e-02,  1.8467e-02,  1.6092e-02,
         2.1515e-02,  1.6048e-02, -2.5490e-02, -1.1814e-02, -2.4253e-03,
         3.0424e-03,  1.2134e-02, -2.0199e-02,  3.4509e-03,  1.8508e-02,
        -5.5077e-03, -9.4009e-03,  6.4423e-03, -4.1251e-03,  2.6508e-02,
         1.6984e-03,  1.6725e-02, -7.5677e-03,  4.7939e-03, -8.5430e-03,
         8.8630e-03, -1.1051e-02,  4.4723e-03,  4.0097e-03,  6.0146e-03,
        -4.9421e-03,  4.0944e-02,  1.7466e-02, -1.5150e-02, -5.6023e-05,
         1.4068e-05, -2.6120e-05, -1.1509e-04, -5.6604e-05,  3.1597e-04,
        -9.0535e-05, -5.3373e-05,  1.3779e-04,  2.1929e-05,  2.4884e-04,
         2.0054e-05, -8.1285e-05,  6.5792e-05,  6.0714e-05, -1.0863e-04,
        -5.0309e-05,  2.0246e-04,  6.4717e-05, -3.0756e-05, -1.6361e-04,
         9.7673e-05,  7.0760e-06,  4.9926e-05,  9.4651e-06, -1.0653e-04,
        -4.6217e-05,  1.8680e-05,  6.1510e-06,  1.8606e-05, -5.8469e-05,
         1.7377e-04, -8.2524e-06, -6.8476e-06, -1.0603e-05,  1.2981e-05,
        -1.0459e-05,  3.1731e-06, -5.0047e-06, -1.3530e-05,  1.5642e-05,
         6.3398e-06, -1.2423e-06,  8.8202e-06,  3.4519e-06,  3.9794e-06,
         7.0097e-06, -5.6006e-06,  2.8551e-05, -1.1935e-05,  1.4589e-05,
        -1.0385e-05,  8.2358e-07, -8.4168e-06,  1.4342e-05,  9.4276e-07,
        -1.5430e-06,  5.8852e-06, -3.9933e-06,  1.3900e-06,  6.9003e-06,
        -6.1920e-07, -3.4468e-06, -4.0808e-06, -1.9610e-02, -1.0266e-02,
         7.9921e-03,  2.3448e-02, -7.0774e-03, -4.2287e-04, -1.6555e-03,
        -7.7725e-03,  5.3087e-05, -5.6198e-03, -8.0948e-03,  8.7330e-05,
         5.9874e-03, -6.0138e-03,  9.4168e-03,  1.3773e-02,  1.1985e-02,
         6.4015e-03,  7.1237e-03,  4.9693e-03, -2.6716e-03, -7.1376e-03,
         4.3996e-03,  4.5967e-03,  7.7466e-03, -1.4691e-02,  1.2271e-02,
         1.1964e-02,  1.2886e-02,  1.3515e-02,  2.7279e-04, -1.1663e-02,
        -9.9613e-03,  1.3446e-02, -3.7568e-03,  2.4372e-03,  1.3613e-02,
        -4.2835e-03, -1.1989e-03,  1.1117e-03,  7.9208e-03, -2.0935e-03,
         1.5023e-02, -4.2969e-03, -1.8976e-03,  3.5501e-03,  2.2168e-03,
        -5.9418e-04, -3.4049e-03,  1.3548e-02, -3.3359e-03, -1.4121e-02,
        -3.0761e-03,  5.6364e-03,  9.3481e-04,  8.7098e-04,  8.7590e-03,
         8.4064e-03,  9.5110e-04,  1.0619e-02, -4.6671e-03, -5.0038e-03,
        -3.1537e-03, -1.6865e-02])
##########################################################
smi_encoder.encoder.layers.2.self_attn.out_proj.weight shape: torch.Size([64, 64])
tensor([[ 0.0505,  0.0281, -0.0763,  ..., -0.1009, -0.0134, -0.0966],
        [ 0.0685, -0.1013,  0.0551,  ...,  0.0990,  0.0783,  0.0768],
        [ 0.0946,  0.0698, -0.1162,  ...,  0.0208, -0.0469, -0.1210],
        ...,
        [-0.0241, -0.0221, -0.0948,  ..., -0.0118, -0.0531, -0.0943],
        [-0.0603, -0.0441,  0.0700,  ..., -0.0913, -0.0121, -0.0685],
        [ 0.0983,  0.0556,  0.0573,  ..., -0.1142, -0.0500, -0.0667]])
tensor([[ 0.0631,  0.0203, -0.0656,  ..., -0.1042,  0.0023, -0.1131],
        [ 0.0948, -0.0672,  0.0582,  ...,  0.0805,  0.0474,  0.0873],
        [ 0.0725,  0.0787, -0.1193,  ...,  0.0255, -0.0519, -0.1386],
        ...,
        [-0.0533, -0.0504, -0.1043,  ..., -0.0114, -0.0577, -0.1092],
        [-0.0645, -0.0539,  0.0785,  ..., -0.0697,  0.0284, -0.0635],
        [ 0.0799,  0.0472,  0.0755,  ..., -0.1124, -0.0468, -0.0587]])
##########################################################
smi_encoder.encoder.layers.2.self_attn.out_proj.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-0.0116, -0.0040,  0.0055,  0.0221, -0.0146,  0.0157,  0.0066,  0.0029,
        -0.0042,  0.0036,  0.0080, -0.0019,  0.0362, -0.0134, -0.0095, -0.0023,
        -0.0084, -0.0090, -0.0194, -0.0114, -0.0013, -0.0195,  0.0094, -0.0021,
         0.0123, -0.0025, -0.0039,  0.0008,  0.0062,  0.0158,  0.0080, -0.0070,
        -0.0101, -0.0225,  0.0096,  0.0073,  0.0069,  0.0014,  0.0019, -0.0086,
         0.0050, -0.0005,  0.0097, -0.0028,  0.0047, -0.0208, -0.0192,  0.0011,
        -0.0006,  0.0056,  0.0028,  0.0026, -0.0063,  0.0042,  0.0048, -0.0029,
         0.0086,  0.0072, -0.0101,  0.0091, -0.0021, -0.0027,  0.0024, -0.0058])
##########################################################
smi_encoder.encoder.layers.2.linear1.weight shape: torch.Size([32, 64])
tensor([[-0.0156,  0.0761, -0.0829,  ...,  0.0334, -0.0668, -0.0516],
        [ 0.0446, -0.0638, -0.0901,  ..., -0.0584,  0.0515,  0.0073],
        [-0.0671, -0.0517, -0.0753,  ..., -0.0564,  0.0505,  0.0254],
        ...,
        [ 0.0490,  0.0110, -0.0671,  ...,  0.0589, -0.1009,  0.0242],
        [ 0.0346,  0.0890,  0.0003,  ..., -0.0111,  0.0246,  0.0233],
        [ 0.0184, -0.0737,  0.0424,  ...,  0.0684, -0.0447,  0.0268]])
tensor([[-0.0625,  0.0606, -0.0629,  ...,  0.0285, -0.0722, -0.0747],
        [ 0.0373, -0.0700, -0.0274,  ..., -0.0510,  0.0683,  0.0186],
        [-0.0046, -0.0261, -0.1120,  ..., -0.0999,  0.0376, -0.0043],
        ...,
        [ 0.0590,  0.0224, -0.1358,  ...,  0.0613, -0.1116,  0.0113],
        [-0.0017,  0.0654,  0.0392,  ...,  0.0057,  0.0078, -0.0002],
        [ 0.0542, -0.0552,  0.0273,  ...,  0.0607, -0.0491,  0.0104]])
##########################################################
smi_encoder.encoder.layers.2.linear1.bias shape: torch.Size([32])
tensor([ 0.0265,  0.0136, -0.0210,  0.0027, -0.0674, -0.1189, -0.0668, -0.0568,
         0.0029, -0.0659,  0.0457, -0.0814, -0.0737, -0.0350, -0.0698,  0.1224,
        -0.1128,  0.0504, -0.0740, -0.0980, -0.0536, -0.0131,  0.0313,  0.1215,
         0.0630,  0.0584, -0.0864, -0.0665,  0.0044,  0.0623, -0.0866,  0.1139])
tensor([ 0.0158,  0.0059, -0.0092,  0.0206, -0.0636, -0.1276, -0.0628, -0.0603,
         0.0113, -0.0742,  0.0388, -0.0965, -0.0589, -0.0648, -0.0862,  0.1241,
        -0.0811,  0.0198, -0.0496, -0.1027, -0.0653, -0.0248,  0.0114,  0.1161,
         0.0542,  0.0348, -0.0971, -0.0684, -0.0089,  0.0632, -0.1129,  0.1017])
##########################################################
smi_encoder.encoder.layers.2.linear2.weight shape: torch.Size([64, 32])
tensor([[ 0.0559,  0.0094, -0.0270,  ..., -0.0231, -0.0928, -0.0677],
        [-0.0664, -0.0573,  0.0797,  ...,  0.0725, -0.1049, -0.0048],
        [-0.0263,  0.0005,  0.0943,  ...,  0.1986, -0.0686,  0.1284],
        ...,
        [-0.1444, -0.1162, -0.0034,  ...,  0.0080, -0.1649,  0.0990],
        [-0.1114,  0.0376, -0.1144,  ..., -0.1430, -0.1268, -0.0849],
        [ 0.0501, -0.0077, -0.0991,  ...,  0.1205,  0.0305,  0.0250]])
tensor([[ 0.0369,  0.0041, -0.0481,  ..., -0.0254, -0.1304, -0.0895],
        [-0.0539, -0.0767,  0.0991,  ...,  0.1004, -0.0246,  0.0313],
        [-0.0076,  0.0145,  0.0863,  ...,  0.2063, -0.0698,  0.1040],
        ...,
        [-0.1659, -0.0958, -0.0354,  ...,  0.0004, -0.1796,  0.0580],
        [-0.1194,  0.0479, -0.1408,  ..., -0.1534, -0.1497, -0.1191],
        [ 0.0504,  0.0163, -0.1051,  ...,  0.0996, -0.0189,  0.0530]])
##########################################################
smi_encoder.encoder.layers.2.linear2.bias shape: torch.Size([64])
tensor([ 0.0875, -0.0321,  0.1277,  0.0822, -0.0944, -0.1434, -0.0990, -0.0041,
        -0.1743,  0.1611, -0.1640, -0.1156, -0.0205, -0.1404, -0.0378,  0.1105,
         0.1631,  0.0154, -0.1641, -0.1482,  0.1592, -0.1401, -0.1145,  0.0984,
        -0.1376, -0.1562, -0.1402,  0.0036, -0.0225,  0.1115,  0.0603, -0.1478,
         0.0907,  0.1302, -0.1054, -0.0769, -0.1333,  0.1158,  0.1605, -0.1397,
         0.1643, -0.0051,  0.1235, -0.0827, -0.0647,  0.1514,  0.1478,  0.1083,
         0.0950,  0.1503, -0.0010, -0.1094,  0.0350, -0.1165, -0.0464,  0.0679,
         0.0534, -0.0086, -0.0377, -0.1163,  0.0117, -0.1611, -0.0763,  0.0680])
tensor([ 0.0767, -0.0320,  0.1336,  0.1142, -0.0998, -0.1291, -0.0882, -0.0012,
        -0.1754,  0.1652, -0.1574, -0.1149,  0.0160, -0.1523, -0.0528,  0.1084,
         0.1608,  0.0049, -0.1889, -0.1569,  0.1582, -0.1566, -0.0998,  0.0923,
        -0.1279, -0.1561, -0.1518,  0.0119, -0.0061,  0.1208,  0.0706, -0.1545,
         0.0756,  0.0951, -0.0931, -0.0683, -0.1330,  0.1178,  0.1582, -0.1449,
         0.1662,  0.0090,  0.1291, -0.0783, -0.0632,  0.1305,  0.1305,  0.1070,
         0.0953,  0.1586,  0.0023, -0.1142,  0.0234, -0.1070, -0.0290,  0.0683,
         0.0610, -0.0111, -0.0439, -0.0973,  0.0131, -0.1611, -0.0722,  0.0647])
##########################################################
smi_encoder.encoder.layers.2.norm1.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0007, 1.0259, 0.9170, 0.9857, 0.9794, 0.9898, 1.0035, 0.9876, 1.0446,
        1.0262, 1.0069, 0.9944, 1.0149, 1.0311, 0.9755, 0.9788, 0.9475, 0.9913,
        0.9384, 0.9945, 0.9772, 0.9670, 1.0361, 0.9860, 1.0406, 0.9947, 1.0151,
        0.9666, 0.9914, 1.0234, 1.0090, 0.9862, 1.0126, 1.0490, 0.9734, 0.9155,
        1.0200, 0.9871, 1.0017, 0.9972, 1.0026, 1.0007, 0.9778, 1.0232, 1.0050,
        1.0005, 0.9958, 0.9531, 1.0316, 1.0107, 0.9942, 0.9744, 1.0058, 0.9988,
        0.9927, 0.9779, 1.0192, 0.9881, 0.9958, 0.9727, 1.0000, 1.0281, 1.0098,
        1.0255])
##########################################################
smi_encoder.encoder.layers.2.norm1.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-0.0103,  0.0005,  0.0105,  0.0312, -0.0127,  0.0133,  0.0117, -0.0009,
         0.0017,  0.0065,  0.0078, -0.0036,  0.0365, -0.0115, -0.0165, -0.0044,
        -0.0072, -0.0097, -0.0252, -0.0140,  0.0022, -0.0202,  0.0094, -0.0021,
         0.0118, -0.0032, -0.0091,  0.0078,  0.0127,  0.0150,  0.0116, -0.0060,
        -0.0149, -0.0354,  0.0114,  0.0086, -0.0010,  0.0051,  0.0007, -0.0078,
         0.0063,  0.0103,  0.0089,  0.0018, -0.0009, -0.0196, -0.0134, -0.0046,
         0.0031,  0.0105,  0.0045, -0.0037, -0.0068,  0.0072,  0.0152, -0.0013,
         0.0104,  0.0016, -0.0096,  0.0147, -0.0018, -0.0049,  0.0030, -0.0034])
##########################################################
smi_encoder.encoder.layers.2.norm2.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([0.9881, 0.9461, 0.8929, 0.9386, 0.9409, 0.9566, 0.9712, 0.9684, 0.9884,
        0.9895, 0.9855, 0.9523, 0.9835, 1.0095, 0.9451, 0.9685, 0.9268, 0.9647,
        0.9156, 0.9646, 0.9482, 0.9490, 0.9833, 0.9681, 1.0188, 0.9634, 0.9923,
        0.9358, 0.9565, 0.9436, 0.9468, 0.9563, 0.9846, 0.9950, 0.9507, 0.9113,
        0.9983, 0.9627, 0.9790, 0.9617, 0.9855, 0.9677, 0.9644, 0.9901, 0.9817,
        0.9912, 0.9741, 0.9305, 1.0015, 0.9979, 0.9720, 0.9596, 0.9878, 0.9752,
        0.9830, 0.9665, 0.9753, 0.9629, 0.9716, 0.9553, 0.9597, 0.9642, 0.9717,
        0.9745])
##########################################################
smi_encoder.encoder.layers.2.norm2.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-1.3331e-02, -4.5237e-03,  6.4669e-03, -1.0939e-02,  1.9461e-02,
         4.6776e-03, -7.0386e-03,  6.6025e-03,  6.1283e-03, -1.0681e-02,
         4.9677e-03, -1.8418e-03,  3.9517e-03,  6.0234e-03,  4.9527e-03,
         8.1946e-03, -1.9987e-04, -1.2328e-02, -7.5740e-05,  1.7492e-03,
        -7.7067e-03, -1.3879e-02,  4.8968e-03, -8.5405e-03,  4.8113e-03,
        -1.6079e-03, -1.5273e-02, -6.0416e-03,  5.4581e-03, -1.5364e-02,
        -3.1812e-02,  7.9665e-03, -7.3921e-03, -1.3068e-02,  5.4345e-03,
         7.7990e-03, -2.4508e-03, -6.3463e-03, -4.5735e-04,  9.0495e-03,
        -1.8242e-02, -4.3615e-03, -1.0048e-02,  1.6472e-02,  1.6933e-02,
        -9.4133e-03, -2.1619e-02, -8.4703e-04,  4.4034e-03, -5.9425e-05,
        -2.0216e-03,  2.5521e-03, -6.0892e-03,  8.7648e-03, -4.5857e-03,
        -8.4072e-03,  1.7129e-02,  1.0345e-02,  5.6403e-03,  8.0635e-03,
         2.6703e-02,  2.1357e-02,  9.4285e-03, -4.7105e-04])
##########################################################
prot_encoder.embedding.weight shape: torch.Size([166, 64])
tensor([[-0.1500, -0.1816,  0.1068,  ...,  0.9547,  0.4369,  0.7323],
        [ 0.2314,  1.2480,  1.0948,  ..., -0.3916, -0.7290, -1.4418],
        [ 0.8442, -1.7581,  1.1958,  ..., -0.1580,  1.5874,  1.0568],
        ...,
        [ 0.6905, -0.7668, -0.4468,  ...,  0.0750,  0.0704,  0.5489],
        [ 0.3074, -0.7954,  0.8353,  ...,  0.2028, -1.3897,  0.9487],
        [ 0.0938, -0.7621,  1.1337,  ...,  0.3434,  2.1604, -0.3628]])
tensor([[-0.1500, -0.1816,  0.1068,  ...,  0.9547,  0.4369,  0.7323],
        [ 0.2198,  1.1988,  1.0456,  ..., -0.3891, -0.6875, -1.3830],
        [ 0.7193, -1.7671,  1.3375,  ..., -0.1652,  1.5973,  1.0461],
        ...,
        [ 0.6905, -0.7668, -0.4468,  ...,  0.0750,  0.0704,  0.5489],
        [ 0.3074, -0.7954,  0.8353,  ...,  0.2028, -1.3897,  0.9487],
        [ 0.0938, -0.7621,  1.1337,  ...,  0.3434,  2.1604, -0.3628]])
##########################################################
prot_encoder.dense.weight shape: torch.Size([300, 2500])
tensor([[-0.0153, -0.0073,  0.0088,  ...,  0.0079,  0.0089,  0.0154],
        [-0.0055, -0.0097, -0.0031,  ...,  0.0147,  0.0103, -0.0018],
        [-0.0002,  0.0076,  0.0239,  ...,  0.0098, -0.0254, -0.0103],
        ...,
        [-0.0001, -0.0040,  0.0035,  ..., -0.0050, -0.0023, -0.0198],
        [ 0.0158, -0.0151, -0.0173,  ..., -0.0050,  0.0088, -0.0105],
        [ 0.0013, -0.0098, -0.0091,  ..., -0.0140,  0.0339, -0.0220]])
tensor([[ 0.0011,  0.0739, -0.0895,  ...,  0.0072,  0.0082,  0.0148],
        [-0.1347,  0.0541, -0.0033,  ...,  0.0140,  0.0096, -0.0025],
        [ 0.0456, -0.0425, -0.0203,  ...,  0.0114, -0.0238, -0.0087],
        ...,
        [ 0.0018, -0.0076, -0.0093,  ..., -0.0058, -0.0031, -0.0206],
        [ 0.0384,  0.0038,  0.0085,  ...,  0.0036,  0.0173, -0.0020],
        [ 0.0083, -0.0022, -0.0210,  ..., -0.0164,  0.0315, -0.0245]])
##########################################################
prot_encoder.dense.bias shape: torch.Size([300])
tensor([ 1.0746e-02, -2.3805e-03,  1.9292e-02,  1.1038e-02, -1.8325e-02,
        -1.4469e-02, -2.8120e-03,  3.2388e-03,  1.0276e-02, -1.8469e-02,
        -4.2920e-03, -1.9131e-02, -1.4620e-03, -1.8263e-02,  1.1079e-02,
        -3.1732e-03, -3.0240e-04,  1.3000e-02,  1.1763e-02, -1.9507e-02,
         1.0211e-02,  1.6488e-03, -1.6457e-02, -7.8928e-03,  1.1539e-02,
         4.5116e-04,  2.9373e-03, -1.0063e-02,  8.1225e-03,  1.1281e-02,
        -8.4666e-03,  9.2751e-03, -1.2287e-02,  2.9582e-03,  1.0261e-02,
         4.1248e-03,  1.5076e-04, -1.8082e-02,  3.4448e-03,  1.4900e-02,
        -4.7438e-04, -1.6305e-02, -4.1300e-03,  6.4596e-03,  1.0333e-02,
         1.8819e-02, -1.2734e-02, -7.7326e-03,  8.5638e-03,  2.2487e-03,
        -1.4462e-02,  1.3465e-02, -9.1108e-03,  1.0741e-03, -6.8165e-03,
         1.7873e-02,  1.1938e-03, -9.3675e-03, -4.6642e-03, -1.7668e-02,
        -2.5955e-03,  1.3802e-02, -1.1381e-02, -1.5613e-02,  1.2745e-02,
         1.7980e-02, -1.6656e-02,  7.8361e-03,  8.5946e-03, -1.1807e-02,
         8.8429e-03,  1.0148e-02,  1.5494e-02, -7.4121e-03,  1.3381e-02,
         1.1996e-02,  1.2220e-03, -1.9926e-02,  1.0097e-02,  1.5865e-03,
        -9.9908e-03,  5.2994e-03,  7.3989e-03,  2.7582e-04,  1.6879e-02,
         1.0997e-02, -3.4559e-03, -1.7529e-02, -1.4701e-02, -1.1787e-03,
         1.8211e-02, -6.8551e-04,  7.5365e-03, -1.8057e-02,  1.1383e-02,
        -7.7266e-03, -7.6759e-03,  2.0560e-03,  9.3845e-03, -6.3272e-03,
        -5.8985e-03, -9.9226e-03, -1.3927e-03,  7.9969e-03,  1.9387e-02,
        -6.0936e-04,  5.5274e-03,  7.8648e-03,  3.5529e-03, -1.6185e-02,
        -6.0180e-03,  9.2994e-03,  5.7022e-03,  2.6110e-03,  6.5037e-04,
         4.5105e-03,  1.7742e-02, -7.2030e-04,  4.3966e-03, -1.8649e-02,
         1.9928e-02, -1.3582e-02, -7.3680e-03, -1.3406e-02, -1.2621e-02,
        -7.7950e-03, -5.4910e-03, -1.7586e-02, -3.0208e-03, -4.0941e-03,
        -1.6089e-03,  1.2252e-02,  9.6838e-03,  2.7298e-03,  1.2702e-02,
        -1.8383e-02, -1.2002e-02,  1.3766e-02,  1.9171e-02,  5.6104e-03,
         1.7295e-03, -1.9843e-02, -1.9647e-03, -9.3911e-03,  7.4591e-03,
        -1.4214e-02, -8.7579e-03,  6.1938e-03, -1.8156e-02,  2.3087e-04,
         1.3038e-02,  1.0305e-02,  1.2880e-02, -8.2462e-03,  1.4985e-02,
         8.0764e-03, -8.5174e-03,  3.5490e-03,  3.5690e-03,  6.2430e-03,
        -1.9947e-02,  2.4181e-03, -5.1172e-05, -7.1559e-03, -1.7258e-02,
        -1.0970e-02, -9.4076e-03, -4.6065e-03, -3.5637e-03, -1.6106e-02,
         1.7096e-02, -1.9053e-02, -4.2497e-03, -1.2326e-02, -1.6995e-03,
         1.3199e-02, -7.0345e-03, -1.6606e-02,  4.3718e-03,  2.6491e-03,
        -1.0541e-02,  1.7442e-02, -1.2390e-03, -2.4379e-03,  2.8705e-03,
         3.0362e-03, -1.9590e-02, -4.7770e-03,  5.3031e-03, -9.0140e-03,
         1.7186e-02,  1.6247e-02,  7.0873e-03,  1.9090e-03, -1.7109e-02,
        -1.9065e-02, -1.8965e-03, -7.3441e-03,  5.4437e-03, -1.6548e-02,
        -1.8634e-02, -1.1400e-02, -1.0203e-02,  1.3883e-02,  7.6927e-03,
         1.9253e-02, -1.8115e-02,  8.0545e-03, -4.7216e-03, -7.8788e-03,
         1.3122e-02, -1.8619e-02, -1.2266e-03,  3.9712e-03, -5.6035e-03,
         1.5754e-02,  8.5204e-03, -1.8990e-02, -1.1225e-02, -4.5491e-03,
        -1.8835e-02, -9.6250e-03, -1.6855e-02, -6.2123e-03,  1.5184e-02,
         7.1770e-03,  1.4956e-03,  1.7816e-02, -1.8582e-02,  1.4946e-02,
         4.0099e-03,  3.7462e-03, -1.1939e-02,  1.4591e-02, -2.9592e-03,
        -7.5652e-03, -1.9413e-02,  5.0428e-03, -1.3380e-02,  3.8716e-03,
         1.1563e-02,  5.9231e-03, -6.7305e-04, -1.4360e-02, -1.7212e-02,
         4.9000e-03,  7.3142e-03, -1.8879e-02,  1.3593e-03, -3.2074e-03,
         1.9973e-02,  9.8399e-03, -1.0651e-02, -1.9627e-02,  1.5312e-02,
         9.3068e-03,  2.6604e-03, -1.7485e-02,  3.6305e-04, -1.6801e-02,
        -9.4098e-03, -2.7927e-03, -8.2667e-03,  6.4758e-03,  1.3664e-02,
         1.9140e-02, -9.4184e-03,  2.9033e-03,  1.7346e-02,  1.8429e-02,
         1.2897e-03, -1.8306e-02, -1.2619e-02,  1.4625e-02, -6.7887e-03,
         1.1354e-02, -1.4875e-02,  1.5184e-02,  6.7261e-03, -1.2091e-02,
         1.4395e-02, -5.6466e-03,  1.9727e-02, -6.5880e-03, -1.4970e-02,
         8.8237e-03,  1.8722e-02,  4.8592e-03,  7.2729e-03,  3.9057e-03,
        -6.4083e-03, -1.9248e-03, -1.7812e-02,  5.4554e-03, -5.2191e-03,
        -1.6615e-02, -8.9274e-03,  1.3523e-02, -1.0168e-02,  2.5611e-03])
tensor([-0.0218, -0.0373, -0.0043, -0.0375, -0.0419, -0.0267,  0.0305, -0.0520,
         0.0436, -0.0748,  0.0183, -0.1436,  0.0492, -0.0250,  0.0534, -0.1252,
        -0.0224,  0.0152, -0.0255, -0.1254, -0.0333,  0.0217,  0.0539, -0.0238,
        -0.0470, -0.0227,  0.0640, -0.0311, -0.0254,  0.0377,  0.0235,  0.0748,
        -0.0138,  0.0116, -0.0698, -0.0862,  0.0081, -0.0910, -0.0308, -0.0540,
         0.0894, -0.0664, -0.0662, -0.0045,  0.0783,  0.0636, -0.0335,  0.0504,
        -0.0056, -0.0248,  0.0201,  0.0195,  0.0093,  0.0580,  0.0263,  0.0014,
        -0.0297,  0.0210, -0.0016, -0.0058, -0.0239, -0.1200, -0.0746, -0.0874,
         0.0222,  0.0350, -0.1197, -0.0409, -0.0240, -0.0095, -0.0056, -0.0744,
        -0.0557, -0.0283,  0.0217, -0.0732, -0.0288,  0.0048,  0.0081, -0.0777,
         0.0222, -0.0090, -0.0287, -0.0485,  0.0195,  0.0287, -0.0414, -0.0134,
        -0.1090,  0.0221,  0.0832,  0.0254, -0.0376, -0.0421,  0.0724, -0.0373,
        -0.0632, -0.0476, -0.0769, -0.0170, -0.0590, -0.0158, -0.0240,  0.0592,
         0.0286, -0.0608,  0.0171, -0.0243,  0.0734, -0.0080, -0.0887, -0.0125,
        -0.0294, -0.0256, -0.0495,  0.0096,  0.0476, -0.0486, -0.0308, -0.0953,
        -0.0415, -0.0461, -0.0865,  0.0226, -0.0174, -0.0406, -0.0005, -0.0746,
         0.0132, -0.0400,  0.0036,  0.0509, -0.0317, -0.0112, -0.0017, -0.0157,
        -0.0169, -0.0140,  0.0398, -0.0147, -0.0400, -0.0328, -0.0738,  0.0015,
         0.0065, -0.0275,  0.0406, -0.0038, -0.0399,  0.0378, -0.0139,  0.0353,
        -0.0452,  0.0187,  0.0381, -0.0413, -0.0062, -0.0911, -0.1041,  0.0419,
        -0.0394, -0.0050,  0.0056, -0.0380,  0.0491, -0.0143, -0.0068,  0.0481,
         0.0368, -0.0217,  0.0211, -0.0299, -0.0566,  0.0396, -0.0263,  0.0331,
        -0.0147, -0.0267, -0.0096, -0.0243,  0.0052,  0.0002,  0.0327,  0.0112,
         0.0384, -0.0012, -0.0275,  0.0062,  0.0250, -0.1400, -0.0040,  0.0082,
        -0.0225, -0.0321, -0.0122, -0.0383,  0.0308, -0.0282,  0.0468,  0.0099,
         0.0414, -0.0538,  0.0015,  0.0368,  0.0424,  0.0118, -0.0100,  0.0245,
         0.0407,  0.0017,  0.0313,  0.0284,  0.0521,  0.0242,  0.0418,  0.0191,
         0.0580,  0.0211, -0.0167, -0.0412, -0.0003, -0.0308,  0.0181, -0.0087,
         0.0197, -0.0075,  0.0257,  0.0446, -0.0224,  0.0256, -0.0041,  0.0332,
        -0.0149,  0.0470,  0.0028,  0.0341, -0.0074,  0.0319, -0.0242, -0.0016,
         0.0408, -0.0192,  0.0334, -0.0098,  0.0338, -0.0041,  0.0261, -0.0007,
         0.0237,  0.0403,  0.0150,  0.0165,  0.0212, -0.0033,  0.0223,  0.0338,
         0.0335, -0.0333, -0.0021,  0.0254, -0.0155,  0.0475,  0.0532, -0.0242,
        -0.0013,  0.0528, -0.0247,  0.0496,  0.0460,  0.0652,  0.0339, -0.0250,
         0.0161,  0.0114, -0.0184,  0.0028, -0.0488,  0.0158,  0.0018,  0.0063,
         0.0277,  0.0009,  0.0832, -0.0050, -0.0069,  0.0134,  0.0660,  0.0305,
         0.0619,  0.0177,  0.0516,  0.0158,  0.0281,  0.0418,  0.0112,  0.0623,
         0.0449,  0.0079,  0.0168,  0.0840])
##########################################################
prot_encoder.ffn.dense1.weight shape: torch.Size([32, 64])
tensor([[-0.0726, -0.0745,  0.0108,  ...,  0.0205, -0.0939, -0.0282],
        [ 0.0412,  0.0528,  0.1019,  ..., -0.1435, -0.0065, -0.0254],
        [ 0.0881,  0.0377,  0.0332,  ...,  0.1149,  0.0092, -0.0169],
        ...,
        [-0.1294,  0.0717,  0.0987,  ...,  0.0866, -0.0651, -0.0229],
        [ 0.1015,  0.1178,  0.0961,  ..., -0.0004, -0.0408,  0.0855],
        [-0.0539, -0.0561,  0.0390,  ...,  0.0611,  0.0490, -0.0091]])
tensor([[-0.0804, -0.1191,  0.0511,  ..., -0.0014, -0.0974, -0.0518],
        [ 0.0326,  0.0544,  0.1000,  ..., -0.1922, -0.0460, -0.0476],
        [ 0.0972,  0.0191,  0.0226,  ...,  0.1321,  0.0289,  0.0202],
        ...,
        [-0.1311,  0.1001,  0.1213,  ...,  0.1075, -0.0945, -0.0863],
        [ 0.0800,  0.0839,  0.1224,  ...,  0.0373, -0.0080,  0.0732],
        [-0.0779, -0.0837,  0.0797,  ...,  0.1034,  0.0924,  0.0046]])
##########################################################
prot_encoder.ffn.dense1.bias shape: torch.Size([32])
tensor([ 0.0111,  0.0659, -0.0605, -0.0232,  0.1026,  0.0956,  0.0320,  0.0618,
        -0.0561,  0.0341,  0.0579, -0.0328, -0.0197, -0.0450, -0.0719, -0.0713,
         0.0025,  0.0148, -0.0551, -0.0506, -0.0304, -0.0425,  0.1036,  0.1001,
        -0.0555,  0.0186, -0.0899, -0.1230, -0.0605, -0.0941,  0.0650,  0.0252])
tensor([ 4.3280e-02,  4.3084e-02, -1.9941e-02, -5.9159e-03,  1.0240e-01,
         1.1097e-01,  8.8542e-03,  3.2604e-02, -6.2453e-03,  1.8319e-02,
         7.2264e-02,  1.6570e-03, -2.3000e-02, -7.2707e-05, -5.7375e-02,
        -7.6812e-02, -4.9328e-03,  2.0346e-02, -1.2053e-01, -3.5939e-02,
        -3.6549e-02, -1.3175e-02,  7.8591e-02,  9.1567e-02, -7.8015e-02,
         4.5095e-03, -8.5662e-02, -1.1989e-01, -2.6662e-02, -1.1571e-01,
         8.1867e-02,  5.1131e-02])
##########################################################
prot_encoder.ffn.dense2.weight shape: torch.Size([64, 32])
tensor([[-0.0279, -0.1777,  0.0017,  ..., -0.0626, -0.0226, -0.0346],
        [ 0.1366, -0.0708, -0.0906,  ..., -0.0682, -0.0393,  0.0003],
        [-0.1000, -0.0624, -0.2183,  ...,  0.0097,  0.0450, -0.0771],
        ...,
        [-0.0080, -0.0322,  0.0499,  ...,  0.0953, -0.0093,  0.0112],
        [ 0.0586,  0.0938,  0.0890,  ..., -0.1343,  0.1888,  0.0014],
        [-0.0535, -0.0433, -0.0434,  ...,  0.0605, -0.0166, -0.1052]])
tensor([[-0.0450, -0.1636,  0.0018,  ..., -0.0373, -0.0094, -0.1251],
        [ 0.1539, -0.1013, -0.0992,  ..., -0.0885, -0.0263,  0.0181],
        [-0.0720, -0.1015, -0.2306,  ..., -0.0249,  0.0715,  0.0400],
        ...,
        [ 0.0184, -0.0119,  0.0685,  ...,  0.1101, -0.0066,  0.0464],
        [ 0.0635,  0.1051,  0.1095,  ..., -0.1240,  0.1942,  0.0152],
        [-0.0617, -0.0545, -0.0557,  ...,  0.0511, -0.0342, -0.1288]])
##########################################################
prot_encoder.ffn.dense2.bias shape: torch.Size([64])
tensor([ 0.0368,  0.1026,  0.0022, -0.0727, -0.0631,  0.1085,  0.0193,  0.0597,
        -0.0764, -0.0436, -0.1387, -0.0900,  0.1194, -0.1547,  0.0355, -0.1211,
        -0.1188, -0.0650,  0.0456,  0.1258, -0.0874,  0.0530,  0.0852, -0.0607,
        -0.1006, -0.1207,  0.0838, -0.1232, -0.0039, -0.1315, -0.0838, -0.0010,
        -0.0872,  0.1736, -0.1045,  0.0531,  0.0756,  0.1658, -0.1058, -0.1602,
         0.0235, -0.0220,  0.0721,  0.1241,  0.1641,  0.0105,  0.0049, -0.0943,
         0.0463, -0.0442, -0.0448, -0.0019,  0.0647,  0.1352, -0.1566, -0.1587,
         0.0977, -0.0495, -0.0236, -0.1544,  0.1248,  0.1413,  0.1279, -0.1433])
tensor([ 0.0192,  0.0956, -0.0242, -0.0653, -0.0810,  0.1177,  0.0712,  0.0769,
        -0.0892, -0.0456, -0.1719, -0.0922,  0.1198, -0.1451,  0.0376, -0.1460,
        -0.1207, -0.0830,  0.0478,  0.1154, -0.0808,  0.0811,  0.1200, -0.0573,
        -0.1082, -0.1109,  0.0553, -0.1136, -0.0272, -0.1570, -0.0847,  0.0090,
        -0.0839,  0.1834, -0.1130,  0.0987,  0.0590,  0.1434, -0.1114, -0.1901,
         0.0110, -0.0055,  0.1040,  0.1466,  0.1579, -0.0046, -0.0152, -0.1419,
         0.0194, -0.0457, -0.0781, -0.0149,  0.0990,  0.1431, -0.1804, -0.0899,
         0.0673, -0.0556, -0.0283, -0.1153,  0.1440,  0.1786,  0.1671, -0.1218])
##########################################################
prot_encoder.addnorm.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0104, 0.9359, 0.9677, 0.9644, 0.9780, 0.9864, 0.9819, 1.0078, 1.0586,
        1.0195, 1.0219, 0.9469, 0.9743, 1.0811, 0.9698, 0.9831, 1.0745, 0.9667,
        1.0567, 0.9487, 1.0211, 1.0124, 1.0084, 1.0830, 0.8753, 1.0760, 1.0449,
        1.0131, 0.9727, 0.9763, 1.0051, 0.9625, 0.9166, 0.9548, 1.0389, 1.0319,
        1.0148, 1.0183, 1.0397, 1.0544, 0.9136, 1.0103, 1.0462, 1.0532, 0.9664,
        1.0671, 1.0067, 1.0705, 0.9305, 1.0135, 0.9648, 1.0612, 1.0041, 1.0126,
        0.9769, 1.0861, 1.0833, 1.0661, 1.0265, 1.1075, 0.9326, 1.0418, 1.0390,
        0.9736])
##########################################################
prot_encoder.addnorm.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 1.1552e-02, -8.7846e-03,  2.2092e-04, -4.9490e-03, -2.2438e-02,
         1.7395e-02,  3.9853e-03, -2.7392e-03,  1.3908e-02,  1.1437e-02,
         6.0461e-03, -4.0398e-04,  8.3812e-03,  1.4870e-02, -1.1003e-02,
         4.4422e-03,  2.0355e-02, -2.2350e-02,  1.0814e-02, -1.4694e-02,
        -2.2989e-02, -9.6261e-03,  1.2328e-02, -6.2440e-04, -3.5658e-02,
         6.8424e-03,  1.0980e-03,  1.7095e-02, -6.8674e-03, -8.1986e-04,
         1.0891e-02, -1.9183e-02, -3.7858e-02, -1.4488e-02,  6.5457e-03,
         2.4599e-03, -6.6277e-03, -1.9874e-02, -7.8527e-03,  2.2237e-02,
        -2.8652e-02,  5.0608e-03,  1.6094e-02,  2.3631e-02, -1.3471e-02,
         1.6822e-02,  9.5201e-04,  1.6550e-02, -1.8102e-02, -4.5802e-05,
        -2.1563e-02,  2.1150e-02, -6.2219e-03, -1.4665e-02, -6.2436e-03,
         2.8091e-03,  2.7526e-02,  1.4245e-02,  1.6467e-02,  1.9162e-02,
         5.0179e-03,  1.3755e-02,  2.0148e-03, -2.4146e-02])
##########################################################
prot_encoder.encoder.layers.0.self_attn.in_proj_weight shape: torch.Size([192, 64])
tensor([[-6.3248e-02, -4.1886e-02,  4.9966e-02,  ..., -6.7949e-02,
         -7.0455e-02, -5.7541e-02],
        [-5.6998e-02, -4.9287e-02,  1.8139e-02,  ...,  1.1963e-02,
         -4.2081e-02,  2.8723e-02],
        [ 7.1390e-02,  1.7049e-02,  5.5558e-02,  ...,  6.8414e-03,
          5.0396e-05, -4.0748e-02],
        ...,
        [ 2.8010e-02, -4.4073e-02, -1.9737e-02,  ...,  4.6252e-02,
         -4.1107e-02, -3.3592e-02],
        [-5.0468e-04, -5.6314e-02,  3.9366e-02,  ..., -5.2274e-02,
         -5.2592e-02,  3.0678e-02],
        [-5.8838e-02, -3.5251e-02, -4.8681e-02,  ...,  6.3825e-02,
          7.3134e-02,  3.0076e-02]])
tensor([[-0.0569, -0.0210,  0.0343,  ..., -0.0621, -0.0592, -0.0513],
        [-0.0693, -0.0833,  0.0340,  ..., -0.0043, -0.0671,  0.0116],
        [ 0.0836,  0.0529,  0.0345,  ...,  0.0129,  0.0016, -0.0358],
        ...,
        [ 0.0305, -0.0397, -0.0061,  ...,  0.0541, -0.0478, -0.0277],
        [ 0.0010, -0.0617,  0.0223,  ..., -0.0439, -0.0453,  0.0768],
        [-0.0660, -0.0229, -0.0404,  ...,  0.0450,  0.0511,  0.0281]])
##########################################################
prot_encoder.encoder.layers.0.self_attn.in_proj_bias shape: torch.Size([192])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 2.1913e-03, -1.7987e-02,  9.7210e-03,  1.8906e-02,  1.9776e-02,
        -8.7142e-03, -5.7307e-03,  2.6451e-02,  7.7819e-03,  4.9321e-03,
         7.3517e-03,  1.1527e-02, -3.7857e-03,  1.1507e-02,  1.2952e-02,
         3.1123e-02,  7.6557e-03, -1.2183e-02,  1.1723e-02, -3.9887e-03,
        -7.6460e-03,  8.1559e-03,  3.4754e-03, -9.9758e-03,  1.3854e-02,
         6.8094e-03, -1.4584e-02,  1.0636e-02, -3.7931e-03,  2.1949e-02,
        -1.0906e-02,  7.1813e-03,  2.9031e-02, -1.2609e-02,  1.4164e-02,
        -2.4289e-02, -1.0119e-02, -1.2861e-02,  2.8244e-03, -1.3200e-02,
        -4.2005e-03, -1.7465e-02, -2.6673e-02, -8.5303e-03,  1.7409e-02,
        -9.7866e-03, -1.8333e-02,  1.8225e-02, -8.6109e-04, -2.2736e-02,
         6.2751e-04, -7.7824e-03, -1.6347e-02,  1.8642e-02,  2.2818e-02,
         1.2077e-02,  5.9530e-03, -1.8945e-02,  1.8132e-02,  5.2578e-03,
        -1.6652e-02,  4.3791e-03, -4.0537e-03, -7.8444e-03, -4.8463e-05,
         3.6536e-05, -4.6413e-05,  4.6803e-05, -4.9176e-05,  5.8568e-05,
         3.5755e-05,  2.7491e-05, -2.5926e-05,  8.2900e-05,  5.9807e-06,
        -2.2239e-06, -7.0655e-06, -3.1160e-05,  8.9978e-05, -1.3146e-05,
        -1.3730e-05,  5.7575e-05, -2.1164e-05,  9.8000e-06,  1.8874e-06,
        -4.8956e-06,  4.9034e-05,  4.4307e-05,  8.3176e-06, -4.5317e-06,
         4.0591e-05, -3.8612e-05, -4.9908e-07,  2.5061e-07, -4.3033e-06,
        -7.4751e-06,  2.0469e-06, -1.1690e-05, -1.8809e-06,  1.3625e-05,
         4.1660e-06, -4.2901e-06,  1.1619e-06,  1.3067e-05, -1.3282e-06,
        -1.5316e-06,  5.0269e-06, -7.1857e-06, -1.6253e-06, -2.6574e-06,
         4.6375e-06, -1.3723e-05,  1.9340e-06, -6.7743e-06, -1.7383e-07,
         9.8481e-06,  1.1465e-06, -1.2216e-05,  4.6505e-07, -1.5390e-05,
         7.7789e-06, -4.8538e-07,  5.7313e-06, -1.2301e-05,  8.6935e-07,
         3.1226e-06, -1.6783e-06, -1.7945e-06,  1.6348e-03,  5.8500e-03,
         9.5186e-04,  2.5952e-03,  3.6387e-03,  3.6235e-03, -2.2270e-03,
        -1.8503e-03, -4.1717e-03, -6.7756e-03,  1.4534e-02, -8.5760e-03,
        -1.3470e-03,  5.1017e-03,  1.4074e-02,  8.7856e-03, -3.0462e-03,
        -9.4224e-03, -6.5082e-03, -9.0842e-03,  7.4114e-03, -9.6155e-03,
         8.0848e-03, -8.5089e-03,  5.9318e-03, -1.5195e-02, -6.2736e-03,
         5.4491e-03,  1.1152e-02,  7.2566e-03,  9.1725e-03,  7.3157e-03,
         3.3144e-03,  4.1083e-03, -2.9896e-03,  1.0800e-03, -1.0912e-03,
         5.0508e-03, -6.8111e-03,  6.3824e-03,  5.5048e-03,  4.8488e-03,
         4.8700e-03, -8.4566e-03,  2.4018e-03,  4.6812e-03, -2.2679e-03,
        -1.2626e-02,  2.0669e-03,  6.3899e-03, -6.9682e-05,  3.3690e-03,
         1.0775e-02, -2.5595e-03, -8.4648e-03, -8.9254e-03, -1.4746e-03,
         1.1902e-02, -9.4712e-03, -5.3310e-03, -7.0999e-03, -1.9999e-03,
        -1.3220e-04,  9.3525e-03])
##########################################################
prot_encoder.encoder.layers.0.self_attn.out_proj.weight shape: torch.Size([64, 64])
tensor([[ 0.0350, -0.0982, -0.0678,  ...,  0.1118, -0.0027, -0.1113],
        [-0.0522, -0.0515,  0.1131,  ...,  0.0723, -0.0666, -0.0784],
        [ 0.1010,  0.0019, -0.0199,  ..., -0.1136, -0.0593,  0.0376],
        ...,
        [ 0.1130, -0.0222,  0.1020,  ..., -0.1124,  0.1238, -0.1054],
        [ 0.0875, -0.0086, -0.0376,  ...,  0.0270, -0.0715,  0.0574],
        [-0.0435,  0.1079,  0.0827,  ..., -0.0466, -0.0592,  0.0787]])
tensor([[ 0.0300, -0.1011, -0.0550,  ...,  0.1176,  0.0044, -0.1196],
        [ 0.0017, -0.0655,  0.0973,  ...,  0.0868, -0.0759, -0.0667],
        [ 0.1458, -0.0280, -0.0418,  ..., -0.1134, -0.0471,  0.0322],
        ...,
        [ 0.0810, -0.0137,  0.0997,  ..., -0.1307,  0.1212, -0.1180],
        [ 0.0485, -0.0057, -0.0266,  ...,  0.0103, -0.0683,  0.0461],
        [-0.0631,  0.1227,  0.0972,  ..., -0.0504, -0.0712,  0.0805]])
##########################################################
prot_encoder.encoder.layers.0.self_attn.out_proj.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 8.3812e-03, -4.7673e-03,  4.4689e-03, -5.3143e-03, -2.1287e-02,
         1.1436e-02, -1.6186e-03,  2.9412e-03,  6.9686e-03,  7.7545e-03,
         3.1871e-03,  2.5366e-03,  1.5500e-02,  7.4610e-03, -1.0185e-02,
         8.8622e-04,  8.5067e-03, -1.2745e-02,  5.7143e-03, -1.1674e-02,
        -1.5262e-02, -3.9085e-03,  2.3242e-03, -1.3583e-03, -3.0064e-02,
         1.7073e-03,  1.2790e-03,  7.4964e-03, -5.3276e-03,  2.8942e-04,
         3.3862e-03, -1.2718e-02, -3.0036e-02, -1.3577e-02,  3.1991e-03,
         6.3570e-03, -5.6149e-03, -1.2069e-02, -6.9778e-03,  1.0297e-02,
        -2.2587e-02,  6.0182e-03,  8.6009e-03,  2.1043e-02, -1.1457e-02,
         8.9222e-03,  2.4559e-03,  5.9955e-03, -9.7978e-03, -2.5641e-03,
        -1.5512e-02,  9.8685e-03, -7.4180e-03, -7.9976e-03, -1.3054e-03,
        -6.2292e-04,  2.3946e-02,  6.9853e-03,  1.2447e-02,  6.3160e-03,
         1.0585e-02,  3.3028e-03, -4.3244e-05, -1.7764e-02])
##########################################################
prot_encoder.encoder.layers.0.linear1.weight shape: torch.Size([32, 64])
tensor([[ 0.0979, -0.0014,  0.0411,  ...,  0.0397, -0.0929,  0.0455],
        [-0.0299, -0.1011,  0.0753,  ..., -0.0265, -0.0328, -0.0371],
        [ 0.0973, -0.1083, -0.0154,  ...,  0.0410,  0.0902, -0.0957],
        ...,
        [-0.1153,  0.0504,  0.0359,  ...,  0.0830, -0.0349, -0.1241],
        [ 0.0030, -0.0713,  0.0737,  ...,  0.0401,  0.0230, -0.0239],
        [-0.0030, -0.0526,  0.0718,  ..., -0.0851, -0.0594,  0.1479]])
tensor([[ 0.0635,  0.0014,  0.0186,  ...,  0.0204, -0.0753,  0.0520],
        [-0.0390, -0.1123,  0.0353,  ...,  0.0167, -0.0352, -0.0222],
        [ 0.1080, -0.1019, -0.0118,  ...,  0.0148,  0.1232, -0.0903],
        ...,
        [-0.1151,  0.0232,  0.0271,  ...,  0.0480,  0.0364, -0.1005],
        [ 0.0599, -0.0650,  0.1089,  ...,  0.0105,  0.0375, -0.0368],
        [ 0.0500, -0.0469,  0.0673,  ..., -0.0490, -0.0491,  0.1630]])
##########################################################
prot_encoder.encoder.layers.0.linear1.bias shape: torch.Size([32])
tensor([ 0.0328,  0.0561, -0.0349,  0.0476,  0.1130, -0.0951,  0.1171, -0.0521,
        -0.0013,  0.0605,  0.0619, -0.0562,  0.0676, -0.0604, -0.0532,  0.0103,
        -0.0884, -0.0729, -0.0907,  0.1212, -0.0650, -0.0804,  0.0949, -0.0664,
        -0.0746,  0.0115,  0.1078,  0.0300,  0.1084,  0.0203, -0.0249, -0.0522])
tensor([ 0.0167,  0.0503, -0.0402,  0.0430,  0.1081, -0.0981,  0.1016, -0.0424,
        -0.0104,  0.0886,  0.0364, -0.0263,  0.0870, -0.0402, -0.0528, -0.0333,
        -0.0895, -0.0733, -0.1058,  0.1146, -0.0981, -0.0649,  0.1070, -0.0698,
        -0.0776,  0.0063,  0.0957,  0.0160,  0.0892,  0.0131,  0.0024, -0.0544])
##########################################################
prot_encoder.encoder.layers.0.linear2.weight shape: torch.Size([64, 32])
tensor([[ 0.0049,  0.1047, -0.0860,  ..., -0.0153, -0.1166,  0.1500],
        [ 0.0058, -0.0330,  0.0503,  ..., -0.0779, -0.0152,  0.0547],
        [ 0.0216, -0.0132,  0.0675,  ..., -0.0394, -0.0302, -0.0111],
        ...,
        [ 0.0415,  0.0387, -0.1134,  ..., -0.0079,  0.0155,  0.0101],
        [ 0.0599, -0.0016, -0.0038,  ..., -0.0500, -0.0791,  0.0237],
        [-0.1066,  0.0262,  0.0718,  ...,  0.0801,  0.0556, -0.2176]])
tensor([[-0.0099,  0.0796, -0.0886,  ..., -0.0021, -0.1263,  0.1716],
        [ 0.0152, -0.0477,  0.0558,  ..., -0.0996, -0.0502,  0.0172],
        [ 0.0363, -0.0092,  0.0889,  ...,  0.0208,  0.0362, -0.0041],
        ...,
        [ 0.0179,  0.0556, -0.0922,  ...,  0.0047,  0.0812,  0.0036],
        [ 0.0432,  0.0088, -0.0081,  ..., -0.0414, -0.0137,  0.0506],
        [-0.1389,  0.0028,  0.0805,  ...,  0.0823,  0.1386, -0.2213]])
##########################################################
prot_encoder.encoder.layers.0.linear2.bias shape: torch.Size([64])
tensor([-0.0270, -0.0315, -0.0351,  0.1535,  0.1106, -0.0799, -0.1522,  0.0324,
        -0.0599,  0.0392,  0.0177, -0.0410, -0.0948, -0.0430,  0.1467, -0.1166,
        -0.0290,  0.1221,  0.1288,  0.0790,  0.0140,  0.0679, -0.0095,  0.0600,
         0.0501, -0.1445, -0.0416, -0.1040,  0.1330,  0.0512, -0.0074, -0.0880,
         0.1752,  0.1425, -0.0102, -0.1518,  0.1175, -0.0201,  0.0296, -0.1285,
         0.1388, -0.1141, -0.1617, -0.1439,  0.1179,  0.1165, -0.1048,  0.1334,
        -0.1410, -0.1052,  0.1549, -0.1152, -0.1560,  0.0307, -0.1354, -0.1270,
         0.0399,  0.0118, -0.0681, -0.1734,  0.0283, -0.1435,  0.0583,  0.0611])
tensor([-0.0278, -0.0362, -0.0284,  0.1499,  0.0904, -0.0788, -0.1350,  0.0395,
        -0.0556,  0.0453,  0.0212, -0.0358, -0.0762, -0.0365,  0.1359, -0.1030,
        -0.0167,  0.1033,  0.1484,  0.0630,  0.0017,  0.0618, -0.0070,  0.0578,
         0.0259, -0.1380, -0.0499, -0.0925,  0.1275,  0.0599, -0.0051, -0.0993,
         0.1408,  0.1281, -0.0058, -0.1427,  0.1029, -0.0392,  0.0181, -0.1124,
         0.1140, -0.1085, -0.1502, -0.1203,  0.1123,  0.1151, -0.1011,  0.1233,
        -0.1483, -0.0989,  0.1420, -0.0988, -0.1541,  0.0226, -0.1300, -0.1208,
         0.0502,  0.0105, -0.0529, -0.1570,  0.0430, -0.1335,  0.0547,  0.0382])
##########################################################
prot_encoder.encoder.layers.0.norm1.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0021, 0.9397, 0.9706, 0.9681, 0.9866, 0.9869, 0.9877, 1.0113, 1.0577,
        1.0157, 1.0157, 0.9513, 0.9757, 1.0820, 0.9660, 0.9828, 1.0777, 0.9721,
        1.0544, 0.9451, 1.0199, 1.0104, 1.0075, 1.0677, 0.8700, 1.0678, 1.0528,
        1.0135, 0.9669, 0.9785, 1.0037, 0.9597, 0.9096, 0.9522, 1.0318, 1.0399,
        1.0072, 1.0251, 1.0324, 1.0563, 0.9041, 1.0100, 1.0429, 1.0536, 0.9599,
        1.0686, 1.0067, 1.0824, 0.9327, 1.0225, 0.9705, 1.0776, 1.0030, 1.0126,
        0.9738, 1.0870, 1.0874, 1.0637, 1.0349, 1.1033, 0.9197, 1.0559, 1.0441,
        0.9640])
##########################################################
prot_encoder.encoder.layers.0.norm1.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 5.3780e-03, -4.7959e-03,  5.3057e-03, -1.0975e-03, -1.8001e-02,
         1.6238e-02,  4.8224e-03,  7.9281e-05,  1.2634e-02,  5.6145e-03,
         3.5954e-03,  5.5748e-03,  1.5912e-02,  1.1346e-02, -1.1047e-02,
         5.0601e-03,  1.5570e-02, -1.5983e-02,  1.1527e-02, -1.4206e-02,
        -1.7177e-02, -6.4656e-03,  7.4760e-03, -4.4370e-03, -2.4095e-02,
         2.6888e-03, -7.7928e-03,  1.6286e-02, -6.1478e-03,  4.2795e-03,
         1.7059e-03, -9.7029e-03, -3.0017e-02, -1.0486e-02,  3.9321e-03,
         1.7635e-03, -9.6226e-03, -1.7391e-02, -7.4501e-03,  1.4703e-02,
        -2.3363e-02,  7.3642e-03,  1.3585e-02,  2.2517e-02, -9.0554e-03,
         1.0132e-02,  4.3810e-03,  4.2851e-03, -9.3439e-03,  1.1842e-03,
        -1.3156e-02,  1.6189e-02, -5.1966e-03, -9.7113e-03, -7.8467e-05,
        -3.4197e-03,  1.7227e-02,  9.4032e-03,  1.2360e-02,  1.2746e-02,
         1.2369e-02,  1.0872e-02, -9.6630e-04, -2.0127e-02])
##########################################################
prot_encoder.encoder.layers.0.norm2.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0065, 0.9409, 0.9750, 0.9724, 0.9799, 0.9932, 0.9829, 1.0219, 1.0701,
        1.0104, 1.0154, 0.9517, 0.9687, 1.0746, 0.9663, 0.9862, 1.0846, 0.9707,
        1.0595, 0.9403, 1.0241, 1.0097, 1.0133, 1.0752, 0.8589, 1.0559, 1.0363,
        1.0210, 0.9645, 0.9671, 0.9924, 0.9573, 0.9063, 0.9453, 1.0360, 1.0431,
        1.0006, 1.0259, 1.0308, 1.0369, 0.9074, 1.0126, 1.0362, 1.0190, 0.9622,
        1.0746, 0.9988, 1.0823, 0.9213, 1.0298, 0.9687, 1.0600, 1.0034, 1.0197,
        0.9743, 1.0700, 1.0958, 1.0665, 1.0310, 1.0830, 0.9197, 1.0214, 1.0360,
        0.9668])
##########################################################
prot_encoder.encoder.layers.0.norm2.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 0.0034, -0.0088,  0.0033, -0.0059, -0.0179,  0.0115,  0.0108,  0.0045,
         0.0112,  0.0051,  0.0060,  0.0022,  0.0173,  0.0111, -0.0100,  0.0067,
         0.0158, -0.0170,  0.0111, -0.0152, -0.0153, -0.0059,  0.0066, -0.0003,
        -0.0189,  0.0028, -0.0107,  0.0133, -0.0073,  0.0057,  0.0013, -0.0146,
        -0.0386, -0.0086,  0.0066,  0.0040, -0.0113, -0.0144, -0.0061,  0.0147,
        -0.0198,  0.0067,  0.0077,  0.0240, -0.0038,  0.0086,  0.0008,  0.0015,
        -0.0091,  0.0068, -0.0169,  0.0119, -0.0008, -0.0081,  0.0035,  0.0010,
         0.0153,  0.0065,  0.0148,  0.0134,  0.0132,  0.0124,  0.0015, -0.0205])
##########################################################
prot_encoder.encoder.layers.1.self_attn.in_proj_weight shape: torch.Size([192, 64])
tensor([[-6.3248e-02, -4.1886e-02,  4.9966e-02,  ..., -6.7949e-02,
         -7.0455e-02, -5.7541e-02],
        [-5.6998e-02, -4.9287e-02,  1.8139e-02,  ...,  1.1963e-02,
         -4.2081e-02,  2.8723e-02],
        [ 7.1390e-02,  1.7049e-02,  5.5558e-02,  ...,  6.8414e-03,
          5.0396e-05, -4.0748e-02],
        ...,
        [ 2.8010e-02, -4.4073e-02, -1.9737e-02,  ...,  4.6252e-02,
         -4.1107e-02, -3.3592e-02],
        [-5.0468e-04, -5.6314e-02,  3.9366e-02,  ..., -5.2274e-02,
         -5.2592e-02,  3.0678e-02],
        [-5.8838e-02, -3.5251e-02, -4.8681e-02,  ...,  6.3825e-02,
          7.3134e-02,  3.0076e-02]])
tensor([[-0.0429, -0.0329,  0.0475,  ..., -0.0796, -0.0180, -0.0513],
        [-0.0716, -0.0710, -0.0061,  ...,  0.0360, -0.0981,  0.0306],
        [ 0.1014,  0.0351,  0.0529,  ..., -0.0034,  0.0245, -0.0560],
        ...,
        [ 0.0328, -0.0330,  0.0027,  ...,  0.0501, -0.0611, -0.0275],
        [ 0.0176, -0.0664,  0.0226,  ..., -0.0364, -0.0132,  0.0777],
        [-0.0701, -0.0080, -0.0402,  ...,  0.0473,  0.0350,  0.0138]])
##########################################################
prot_encoder.encoder.layers.1.self_attn.in_proj_bias shape: torch.Size([192])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-6.6562e-03,  1.0154e-02, -1.7640e-03,  2.0507e-02,  6.6182e-03,
         6.2232e-03,  4.4879e-03,  2.0049e-02, -4.6203e-03,  8.2774e-03,
         9.8128e-04,  5.3351e-03, -1.3560e-02, -1.6462e-02,  2.5527e-02,
         1.0311e-02, -1.3972e-02, -9.8464e-05, -1.0864e-03, -6.3485e-04,
        -8.1916e-03, -1.1484e-03,  2.0947e-02,  1.6725e-03,  8.6911e-04,
        -1.4171e-03, -4.9989e-03, -1.5718e-02, -1.8824e-02,  1.1846e-02,
        -2.8698e-03,  5.5363e-03,  4.1648e-02, -3.9069e-02,  3.4360e-02,
        -2.3204e-03, -3.2898e-02, -2.1808e-02, -2.3258e-02, -2.1750e-02,
         3.6128e-02, -1.8085e-02, -3.2343e-02, -2.2849e-03, -9.5313e-03,
        -2.0824e-02,  2.8900e-02, -1.2284e-02,  2.6364e-02, -4.3952e-02,
        -2.8328e-02,  1.4986e-03,  4.2479e-02,  1.5321e-02, -2.0381e-02,
         3.3620e-02,  1.9563e-02, -2.4158e-02,  3.0192e-02, -1.5858e-02,
        -2.0531e-02,  1.4151e-03, -9.6598e-03,  2.5097e-02, -5.6558e-06,
         1.7523e-05, -8.0343e-05,  1.0400e-05, -3.4089e-06,  1.6379e-06,
         1.8422e-05, -1.2104e-05, -1.7679e-05, -2.5102e-05, -8.6985e-06,
         6.9480e-07, -7.3058e-06,  1.7063e-05, -4.0364e-05, -2.5051e-06,
         9.7942e-06,  4.7381e-05, -2.5849e-05,  1.9226e-06,  9.1699e-06,
         4.7032e-07,  3.1791e-05, -5.6394e-06, -4.2261e-06, -2.8059e-05,
         2.0987e-05,  1.8783e-06, -2.8701e-06, -9.6058e-07, -4.4938e-06,
         7.6184e-07,  1.2025e-05,  2.5813e-06,  7.3179e-06, -7.6173e-06,
        -2.4813e-05, -4.6123e-06,  1.2976e-05, -3.4707e-06,  1.7522e-05,
        -6.1939e-06, -2.0679e-05,  4.6360e-07, -8.0622e-07, -8.0515e-06,
        -2.3581e-06,  1.0105e-05,  6.5941e-07, -6.4628e-06,  1.6669e-06,
        -2.6906e-06, -3.4993e-06, -5.7489e-06, -9.5984e-06,  8.2410e-06,
         3.9833e-06,  1.1737e-06, -2.6541e-06, -7.1317e-06, -2.6176e-06,
         4.3593e-06,  8.9853e-06,  5.7722e-06, -3.5489e-03,  3.7471e-03,
         3.3912e-03, -6.6568e-03,  1.6216e-03,  1.4452e-03,  8.4878e-04,
        -3.4478e-03, -4.4843e-03,  5.7263e-04,  2.7238e-03, -5.3117e-03,
        -7.9284e-03,  7.5802e-03,  1.0910e-02,  1.1887e-02, -3.3104e-03,
        -8.5038e-03, -6.3372e-03, -5.7616e-03,  3.8417e-03, -1.5753e-02,
         6.0835e-03, -4.8550e-03,  5.3300e-03, -1.2546e-02, -4.1671e-03,
         3.1353e-03,  1.1486e-03,  6.5791e-03,  6.7954e-03,  1.0807e-02,
         3.7094e-03,  5.9241e-05, -8.9807e-03,  4.3449e-03,  8.0804e-04,
         5.2455e-04, -9.3662e-03,  6.0595e-03,  8.3146e-03,  3.1951e-03,
        -2.8077e-03, -3.1920e-03,  3.1699e-03,  4.9739e-03,  3.6191e-03,
        -8.6526e-03, -2.7973e-03,  6.6202e-03,  8.4593e-04,  2.3150e-03,
         5.4959e-03, -2.7125e-03, -8.1502e-03, -4.2918e-03, -1.6187e-03,
         3.2354e-03, -5.5709e-03, -5.8322e-03,  2.6345e-03, -2.3161e-03,
        -5.6483e-03,  5.0168e-03])
##########################################################
prot_encoder.encoder.layers.1.self_attn.out_proj.weight shape: torch.Size([64, 64])
tensor([[ 0.0350, -0.0982, -0.0678,  ...,  0.1118, -0.0027, -0.1113],
        [-0.0522, -0.0515,  0.1131,  ...,  0.0723, -0.0666, -0.0784],
        [ 0.1010,  0.0019, -0.0199,  ..., -0.1136, -0.0593,  0.0376],
        ...,
        [ 0.1130, -0.0222,  0.1020,  ..., -0.1124,  0.1238, -0.1054],
        [ 0.0875, -0.0086, -0.0376,  ...,  0.0270, -0.0715,  0.0574],
        [-0.0435,  0.1079,  0.0827,  ..., -0.0466, -0.0592,  0.0787]])
tensor([[ 0.0492, -0.1044, -0.0612,  ...,  0.1284,  0.0110, -0.1026],
        [-0.0192, -0.0620,  0.0829,  ...,  0.0918, -0.0728, -0.0699],
        [ 0.1247, -0.0249, -0.0411,  ..., -0.1118, -0.0646,  0.0302],
        ...,
        [ 0.0737, -0.0038,  0.1108,  ..., -0.1306,  0.1175, -0.1136],
        [ 0.0353, -0.0006, -0.0106,  ...,  0.0192, -0.0757,  0.0473],
        [-0.0741,  0.1341,  0.1150,  ..., -0.0573, -0.0787,  0.0777]])
##########################################################
prot_encoder.encoder.layers.1.self_attn.out_proj.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 0.0007, -0.0042,  0.0096, -0.0034, -0.0161,  0.0089,  0.0023,  0.0061,
         0.0094,  0.0019,  0.0058,  0.0050,  0.0215,  0.0095, -0.0071,  0.0036,
         0.0063, -0.0102,  0.0093, -0.0138, -0.0086, -0.0001,  0.0006, -0.0015,
        -0.0166,  0.0091, -0.0110,  0.0083, -0.0051,  0.0084, -0.0032, -0.0101,
        -0.0257, -0.0067,  0.0053,  0.0069, -0.0103, -0.0077, -0.0068,  0.0108,
        -0.0122,  0.0057,  0.0043,  0.0204, -0.0015,  0.0031,  0.0059, -0.0016,
         0.0005,  0.0022, -0.0118,  0.0071, -0.0030, -0.0026,  0.0010, -0.0015,
         0.0129, -0.0005,  0.0079,  0.0084,  0.0164,  0.0034,  0.0002, -0.0150])
##########################################################
prot_encoder.encoder.layers.1.linear1.weight shape: torch.Size([32, 64])
tensor([[ 0.0979, -0.0014,  0.0411,  ...,  0.0397, -0.0929,  0.0455],
        [-0.0299, -0.1011,  0.0753,  ..., -0.0265, -0.0328, -0.0371],
        [ 0.0973, -0.1083, -0.0154,  ...,  0.0410,  0.0902, -0.0957],
        ...,
        [-0.1153,  0.0504,  0.0359,  ...,  0.0830, -0.0349, -0.1241],
        [ 0.0030, -0.0713,  0.0737,  ...,  0.0401,  0.0230, -0.0239],
        [-0.0030, -0.0526,  0.0718,  ..., -0.0851, -0.0594,  0.1479]])
tensor([[ 0.0600, -0.0009,  0.0164,  ...,  0.0279, -0.0879,  0.0394],
        [-0.0339, -0.1020,  0.0313,  ...,  0.0322, -0.0499, -0.0065],
        [ 0.1060, -0.0961,  0.0109,  ...,  0.0283,  0.1257, -0.1075],
        ...,
        [-0.0718,  0.0298,  0.0408,  ...,  0.0487,  0.0010, -0.1449],
        [ 0.0330, -0.0687,  0.1099,  ..., -0.0144,  0.0534, -0.0082],
        [ 0.0543, -0.0494,  0.0697,  ..., -0.0442, -0.0293,  0.1794]])
##########################################################
prot_encoder.encoder.layers.1.linear1.bias shape: torch.Size([32])
tensor([ 0.0328,  0.0561, -0.0349,  0.0476,  0.1130, -0.0951,  0.1171, -0.0521,
        -0.0013,  0.0605,  0.0619, -0.0562,  0.0676, -0.0604, -0.0532,  0.0103,
        -0.0884, -0.0729, -0.0907,  0.1212, -0.0650, -0.0804,  0.0949, -0.0664,
        -0.0746,  0.0115,  0.1078,  0.0300,  0.1084,  0.0203, -0.0249, -0.0522])
tensor([ 0.0147,  0.0472, -0.0382,  0.0875,  0.1257, -0.0893,  0.1159, -0.0293,
         0.0023,  0.0971,  0.0432, -0.0163,  0.0854, -0.0421, -0.0411, -0.0302,
        -0.0939, -0.0609, -0.0904,  0.1151, -0.0894, -0.0570,  0.0978, -0.0637,
        -0.1010, -0.0005,  0.0940,  0.0153,  0.1019,  0.0023,  0.0207, -0.0633])
##########################################################
prot_encoder.encoder.layers.1.linear2.weight shape: torch.Size([64, 32])
tensor([[ 0.0049,  0.1047, -0.0860,  ..., -0.0153, -0.1166,  0.1500],
        [ 0.0058, -0.0330,  0.0503,  ..., -0.0779, -0.0152,  0.0547],
        [ 0.0216, -0.0132,  0.0675,  ..., -0.0394, -0.0302, -0.0111],
        ...,
        [ 0.0415,  0.0387, -0.1134,  ..., -0.0079,  0.0155,  0.0101],
        [ 0.0599, -0.0016, -0.0038,  ..., -0.0500, -0.0791,  0.0237],
        [-0.1066,  0.0262,  0.0718,  ...,  0.0801,  0.0556, -0.2176]])
tensor([[-0.0176,  0.0833, -0.0933,  ..., -0.0127, -0.1146,  0.1615],
        [ 0.0202, -0.0470,  0.0565,  ..., -0.1230, -0.0495, -0.0008],
        [ 0.0321, -0.0057,  0.0813,  ..., -0.0075,  0.0590, -0.0159],
        ...,
        [ 0.0102,  0.0527, -0.0900,  ...,  0.0148,  0.0799,  0.0044],
        [ 0.0452,  0.0151, -0.0084,  ..., -0.0361, -0.0193,  0.0634],
        [-0.1372,  0.0018,  0.0799,  ...,  0.1203,  0.1414, -0.2154]])
##########################################################
prot_encoder.encoder.layers.1.linear2.bias shape: torch.Size([64])
tensor([-0.0270, -0.0315, -0.0351,  0.1535,  0.1106, -0.0799, -0.1522,  0.0324,
        -0.0599,  0.0392,  0.0177, -0.0410, -0.0948, -0.0430,  0.1467, -0.1166,
        -0.0290,  0.1221,  0.1288,  0.0790,  0.0140,  0.0679, -0.0095,  0.0600,
         0.0501, -0.1445, -0.0416, -0.1040,  0.1330,  0.0512, -0.0074, -0.0880,
         0.1752,  0.1425, -0.0102, -0.1518,  0.1175, -0.0201,  0.0296, -0.1285,
         0.1388, -0.1141, -0.1617, -0.1439,  0.1179,  0.1165, -0.1048,  0.1334,
        -0.1410, -0.1052,  0.1549, -0.1152, -0.1560,  0.0307, -0.1354, -0.1270,
         0.0399,  0.0118, -0.0681, -0.1734,  0.0283, -0.1435,  0.0583,  0.0611])
tensor([-0.0360, -0.0330, -0.0289,  0.1434,  0.0905, -0.0828, -0.1311,  0.0402,
        -0.0553,  0.0370,  0.0239, -0.0355, -0.0723, -0.0361,  0.1421, -0.1044,
        -0.0201,  0.1086,  0.1481,  0.0612,  0.0040,  0.0590, -0.0120,  0.0626,
         0.0380, -0.1328, -0.0579, -0.0955,  0.1339,  0.0592, -0.0068, -0.0996,
         0.1417,  0.1282, -0.0080, -0.1442,  0.1003, -0.0358,  0.0207, -0.1175,
         0.1280, -0.1111, -0.1558, -0.1254,  0.1207,  0.1179, -0.1032,  0.1158,
        -0.1392, -0.0955,  0.1398, -0.1041, -0.1514,  0.0254, -0.1233, -0.1248,
         0.0416,  0.0094, -0.0561, -0.1558,  0.0475, -0.1307,  0.0565,  0.0423])
##########################################################
prot_encoder.encoder.layers.1.norm1.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([0.9953, 0.9489, 0.9779, 0.9794, 0.9892, 0.9918, 0.9907, 1.0284, 1.0741,
        1.0026, 1.0161, 0.9550, 0.9697, 1.0732, 0.9665, 0.9907, 1.0808, 0.9731,
        1.0537, 0.9389, 1.0219, 1.0115, 1.0113, 1.0610, 0.8601, 1.0493, 1.0405,
        1.0186, 0.9619, 0.9677, 1.0000, 0.9550, 0.9128, 0.9454, 1.0311, 1.0485,
        1.0002, 1.0308, 1.0287, 1.0350, 0.9041, 1.0123, 1.0286, 1.0136, 0.9571,
        1.0719, 1.0020, 1.0870, 0.9226, 1.0401, 0.9743, 1.0605, 1.0005, 1.0201,
        0.9672, 1.0697, 1.0768, 1.0610, 1.0375, 1.0731, 0.9131, 1.0339, 1.0372,
        0.9696])
##########################################################
prot_encoder.encoder.layers.1.norm1.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-1.9395e-03, -3.7051e-03,  7.6254e-03, -3.7154e-03, -1.1449e-02,
         1.0610e-02,  8.9174e-03,  4.8891e-03,  8.6411e-03, -3.1632e-04,
         3.5861e-03,  4.6756e-03,  2.1584e-02,  9.3853e-03, -5.7126e-03,
         7.5311e-03,  1.1361e-02, -1.1199e-02,  9.6342e-03, -1.6891e-02,
        -1.0293e-02,  6.5390e-06,  3.1235e-03, -1.8836e-03, -1.1767e-02,
         7.5869e-03, -1.9674e-02,  1.1932e-02, -4.3721e-03,  8.7835e-03,
        -6.5915e-03, -5.8098e-03, -2.8529e-02, -6.0818e-03,  4.0154e-03,
         3.2292e-03, -1.4695e-02, -1.2493e-02, -4.3359e-03,  1.0065e-02,
        -1.1454e-02,  6.6879e-03,  5.5732e-03,  2.0823e-02, -7.1737e-05,
         4.6538e-03,  4.3061e-03, -7.7134e-03,  2.7044e-04,  7.5718e-03,
        -1.1291e-02,  6.5116e-03, -8.3260e-04, -2.9759e-03,  6.2082e-03,
        -1.0140e-03,  8.6382e-03,  2.5852e-03,  9.7579e-03,  8.9932e-03,
         1.8467e-02,  9.0088e-03,  9.3245e-04, -1.6763e-02])
##########################################################
prot_encoder.encoder.layers.1.norm2.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([0.9830, 0.9621, 0.9912, 0.9881, 0.9791, 1.0053, 0.9825, 1.0397, 1.0609,
        1.0034, 1.0158, 0.9566, 0.9660, 1.0663, 0.9637, 0.9975, 1.0828, 0.9711,
        1.0388, 0.9405, 1.0266, 1.0093, 1.0149, 1.0615, 0.8645, 1.0434, 1.0317,
        1.0250, 0.9583, 0.9556, 0.9894, 0.9584, 0.9177, 0.9437, 1.0387, 1.0477,
        0.9999, 1.0316, 1.0317, 1.0242, 0.9123, 1.0182, 1.0251, 0.9936, 0.9643,
        1.0768, 0.9956, 1.0681, 0.9146, 1.0347, 0.9775, 1.0414, 0.9935, 1.0260,
        0.9665, 1.0586, 1.0497, 1.0651, 1.0350, 1.0566, 0.9137, 0.9943, 1.0259,
        0.9724])
##########################################################
prot_encoder.encoder.layers.1.norm2.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-0.0097, -0.0059,  0.0048, -0.0115, -0.0154,  0.0005,  0.0124,  0.0088,
         0.0054, -0.0007,  0.0023,  0.0008,  0.0202,  0.0078, -0.0045,  0.0102,
         0.0128, -0.0121,  0.0123, -0.0159, -0.0097, -0.0087,  0.0011,  0.0031,
        -0.0050,  0.0088, -0.0188,  0.0079, -0.0032,  0.0020, -0.0059, -0.0079,
        -0.0353, -0.0079,  0.0057,  0.0085, -0.0156, -0.0107, -0.0044,  0.0101,
        -0.0074,  0.0029,  0.0007,  0.0211,  0.0026,  0.0035, -0.0024, -0.0103,
        -0.0013,  0.0098, -0.0152,  0.0032,  0.0033, -0.0034,  0.0137,  0.0037,
         0.0057,  0.0045,  0.0118,  0.0115,  0.0184,  0.0150,  0.0024, -0.0169])
##########################################################
prot_encoder.encoder.layers.2.self_attn.in_proj_weight shape: torch.Size([192, 64])
tensor([[-6.3248e-02, -4.1886e-02,  4.9966e-02,  ..., -6.7949e-02,
         -7.0455e-02, -5.7541e-02],
        [-5.6998e-02, -4.9287e-02,  1.8139e-02,  ...,  1.1963e-02,
         -4.2081e-02,  2.8723e-02],
        [ 7.1390e-02,  1.7049e-02,  5.5558e-02,  ...,  6.8414e-03,
          5.0396e-05, -4.0748e-02],
        ...,
        [ 2.8010e-02, -4.4073e-02, -1.9737e-02,  ...,  4.6252e-02,
         -4.1107e-02, -3.3592e-02],
        [-5.0468e-04, -5.6314e-02,  3.9366e-02,  ..., -5.2274e-02,
         -5.2592e-02,  3.0678e-02],
        [-5.8838e-02, -3.5251e-02, -4.8681e-02,  ...,  6.3825e-02,
          7.3134e-02,  3.0076e-02]])
tensor([[-0.0520, -0.0344,  0.0870,  ..., -0.0742, -0.0357, -0.0794],
        [-0.0455, -0.0938,  0.0189,  ...,  0.0312, -0.0103,  0.0147],
        [ 0.0883,  0.0090,  0.0934,  ..., -0.0151,  0.0011, -0.0769],
        ...,
        [ 0.0366, -0.0263,  0.0009,  ...,  0.0431, -0.0704, -0.0445],
        [ 0.0190, -0.0653,  0.0282,  ..., -0.0152, -0.0167,  0.0654],
        [-0.0651, -0.0123, -0.0466,  ...,  0.0476,  0.0326, -0.0046]])
##########################################################
prot_encoder.encoder.layers.2.self_attn.in_proj_bias shape: torch.Size([192])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-1.4760e-02, -2.3685e-03,  5.5667e-04,  2.0080e-02,  1.3452e-03,
         8.1601e-03,  2.0146e-03,  1.8703e-02, -6.5003e-03,  1.1775e-02,
         4.7068e-03,  3.6457e-03, -9.7938e-03, -2.8095e-02,  2.3100e-02,
        -4.9636e-04, -3.9327e-03,  9.1181e-03, -6.2208e-03, -7.2393e-03,
         4.7573e-03, -1.3083e-02,  1.7095e-02,  1.0088e-02,  3.0907e-02,
         1.0142e-03, -4.1724e-03, -1.6884e-02, -2.9207e-02,  8.1424e-03,
         4.2368e-03,  3.4811e-03,  2.8879e-02, -2.4808e-02,  2.4211e-02,
        -2.0772e-02, -1.1963e-02, -2.7988e-02,  2.2103e-02, -2.5628e-02,
         2.8819e-02,  2.5329e-02, -2.1567e-02,  4.0620e-02, -2.0086e-02,
        -2.8939e-02,  3.3907e-02,  1.9503e-02,  2.3173e-02, -2.6748e-02,
         1.5957e-02,  1.9863e-02,  3.4411e-02,  2.4929e-02, -8.6426e-03,
         2.5559e-02,  1.5070e-02, -2.7704e-02,  3.2982e-02,  3.4268e-02,
        -1.4425e-02,  1.4472e-02, -3.7114e-02,  3.0198e-02,  3.6071e-07,
         2.4286e-05, -3.1148e-06,  5.0334e-06,  3.4355e-06, -4.0227e-06,
        -6.4575e-06,  1.5378e-05,  2.4833e-06, -2.6668e-05,  2.3471e-05,
         2.9845e-05,  3.8383e-05,  2.0535e-06, -2.7520e-05,  3.5631e-06,
        -2.7510e-06, -1.6377e-05, -1.0768e-05,  1.0255e-05,  4.3899e-06,
         1.1489e-05, -9.9287e-06, -6.0980e-06, -6.8676e-06,  2.1049e-05,
        -2.5404e-05,  2.0897e-05, -1.0535e-05,  1.8048e-05, -6.3476e-07,
        -2.8931e-05, -2.6614e-05, -1.3029e-06, -2.0651e-06, -2.8599e-05,
        -7.7367e-06, -1.4186e-05,  4.8163e-05, -3.1841e-07,  3.9094e-06,
         1.8214e-05, -3.1913e-06, -2.1089e-05,  1.7047e-05, -1.0926e-05,
         4.9837e-06, -1.8600e-05, -1.4163e-05,  1.9571e-07,  1.5764e-05,
        -2.8467e-06,  5.6267e-06, -2.3067e-05,  3.7488e-06, -1.2273e-05,
         1.0298e-05, -3.3391e-05, -2.8939e-07, -2.0764e-06, -1.5725e-05,
        -3.4817e-06,  1.2987e-05,  7.0969e-06, -5.7796e-03,  7.8857e-03,
         3.7304e-03, -6.2978e-03,  9.6886e-03,  1.0835e-02,  2.1619e-03,
        -1.0102e-02, -2.0827e-03, -1.1900e-03, -2.2555e-03, -4.5075e-03,
        -5.7831e-03,  8.5019e-03,  3.6632e-05,  1.0191e-02,  9.9280e-04,
        -3.9412e-03, -9.4194e-03, -6.8625e-03, -5.1162e-03, -1.3368e-02,
         6.7078e-03,  8.4011e-04,  8.4499e-03, -7.2407e-03,  1.6019e-03,
         3.8541e-03, -5.9028e-03,  4.8022e-03,  4.6758e-03,  7.7979e-03,
        -1.1229e-03,  6.2245e-03, -5.6844e-04,  7.1422e-03,  4.1270e-03,
         1.9920e-03, -7.9678e-03,  3.2326e-03,  6.8579e-03,  5.5070e-03,
        -1.0131e-03, -1.6426e-03,  7.8771e-03,  1.0921e-02,  5.5516e-03,
        -2.0312e-03, -1.1825e-03,  6.2489e-03,  4.9167e-03,  1.2661e-03,
        -5.1350e-03, -6.1432e-03, -3.5232e-04,  2.9735e-03, -2.6791e-03,
         2.7133e-03, -6.3873e-03, -6.9718e-03,  6.2755e-03, -5.1689e-03,
        -5.3849e-03,  2.0065e-03])
##########################################################
prot_encoder.encoder.layers.2.self_attn.out_proj.weight shape: torch.Size([64, 64])
tensor([[ 0.0350, -0.0982, -0.0678,  ...,  0.1118, -0.0027, -0.1113],
        [-0.0522, -0.0515,  0.1131,  ...,  0.0723, -0.0666, -0.0784],
        [ 0.1010,  0.0019, -0.0199,  ..., -0.1136, -0.0593,  0.0376],
        ...,
        [ 0.1130, -0.0222,  0.1020,  ..., -0.1124,  0.1238, -0.1054],
        [ 0.0875, -0.0086, -0.0376,  ...,  0.0270, -0.0715,  0.0574],
        [-0.0435,  0.1079,  0.0827,  ..., -0.0466, -0.0592,  0.0787]])
tensor([[ 0.0678, -0.1127, -0.0638,  ...,  0.0942,  0.0044, -0.1274],
        [-0.0568, -0.0226,  0.1009,  ...,  0.1155, -0.0426, -0.0744],
        [ 0.0614,  0.0165, -0.0304,  ..., -0.0607, -0.0729,  0.0532],
        ...,
        [ 0.0835, -0.0097,  0.1161,  ..., -0.1063,  0.1111, -0.0865],
        [ 0.0678, -0.0216, -0.0120,  ...,  0.0141, -0.0792,  0.0541],
        [-0.0495,  0.1127,  0.0991,  ..., -0.0499, -0.0883,  0.0900]])
##########################################################
prot_encoder.encoder.layers.2.self_attn.out_proj.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-0.0098, -0.0014,  0.0089, -0.0099, -0.0092,  0.0046,  0.0057,  0.0111,
         0.0058, -0.0029,  0.0017, -0.0009,  0.0164,  0.0060, -0.0045,  0.0080,
         0.0075, -0.0065,  0.0093, -0.0192, -0.0072, -0.0004, -0.0044,  0.0020,
        -0.0001,  0.0076, -0.0155,  0.0076,  0.0004,  0.0080, -0.0086, -0.0045,
        -0.0234, -0.0037,  0.0060,  0.0032, -0.0154, -0.0052, -0.0024,  0.0090,
        -0.0007,  0.0023, -0.0013,  0.0149,  0.0011, -0.0012,  0.0027, -0.0092,
         0.0060,  0.0026, -0.0104, -0.0002, -0.0041,  0.0078,  0.0110,  0.0041,
         0.0044,  0.0007,  0.0074,  0.0003,  0.0189,  0.0084,  0.0016, -0.0119])
##########################################################
prot_encoder.encoder.layers.2.linear1.weight shape: torch.Size([32, 64])
tensor([[ 0.0979, -0.0014,  0.0411,  ...,  0.0397, -0.0929,  0.0455],
        [-0.0299, -0.1011,  0.0753,  ..., -0.0265, -0.0328, -0.0371],
        [ 0.0973, -0.1083, -0.0154,  ...,  0.0410,  0.0902, -0.0957],
        ...,
        [-0.1153,  0.0504,  0.0359,  ...,  0.0830, -0.0349, -0.1241],
        [ 0.0030, -0.0713,  0.0737,  ...,  0.0401,  0.0230, -0.0239],
        [-0.0030, -0.0526,  0.0718,  ..., -0.0851, -0.0594,  0.1479]])
tensor([[ 0.0958, -0.0065,  0.0141,  ...,  0.0376, -0.1009,  0.0111],
        [-0.0335, -0.1074,  0.0345,  ...,  0.0450, -0.0390, -0.0111],
        [ 0.1633, -0.0897,  0.0314,  ...,  0.0215,  0.0936, -0.1236],
        ...,
        [-0.0702,  0.0391,  0.0436,  ...,  0.0552, -0.0190, -0.1637],
        [ 0.0394, -0.0772,  0.1107,  ...,  0.0334,  0.0873, -0.0271],
        [ 0.0373, -0.0236,  0.0504,  ..., -0.0674, -0.0681,  0.1548]])
##########################################################
prot_encoder.encoder.layers.2.linear1.bias shape: torch.Size([32])
tensor([ 0.0328,  0.0561, -0.0349,  0.0476,  0.1130, -0.0951,  0.1171, -0.0521,
        -0.0013,  0.0605,  0.0619, -0.0562,  0.0676, -0.0604, -0.0532,  0.0103,
        -0.0884, -0.0729, -0.0907,  0.1212, -0.0650, -0.0804,  0.0949, -0.0664,
        -0.0746,  0.0115,  0.1078,  0.0300,  0.1084,  0.0203, -0.0249, -0.0522])
tensor([ 0.0232,  0.0537, -0.0439,  0.0739,  0.1179, -0.1079,  0.0986, -0.0111,
         0.0129,  0.0862,  0.0570, -0.0209,  0.0869, -0.0565, -0.0279, -0.0145,
        -0.1177, -0.0560, -0.0967,  0.0988, -0.0849, -0.0521,  0.0894, -0.0620,
        -0.1137, -0.0052,  0.1026,  0.0140,  0.0995, -0.0049, -0.0012, -0.0596])
##########################################################
prot_encoder.encoder.layers.2.linear2.weight shape: torch.Size([64, 32])
tensor([[ 0.0049,  0.1047, -0.0860,  ..., -0.0153, -0.1166,  0.1500],
        [ 0.0058, -0.0330,  0.0503,  ..., -0.0779, -0.0152,  0.0547],
        [ 0.0216, -0.0132,  0.0675,  ..., -0.0394, -0.0302, -0.0111],
        ...,
        [ 0.0415,  0.0387, -0.1134,  ..., -0.0079,  0.0155,  0.0101],
        [ 0.0599, -0.0016, -0.0038,  ..., -0.0500, -0.0791,  0.0237],
        [-0.1066,  0.0262,  0.0718,  ...,  0.0801,  0.0556, -0.2176]])
tensor([[-0.0243,  0.0863, -0.0927,  ..., -0.0267, -0.1346,  0.1585],
        [ 0.0174, -0.0309,  0.0579,  ..., -0.1279, -0.0791, -0.0042],
        [ 0.0339,  0.0083,  0.0776,  ..., -0.0560,  0.0542, -0.0423],
        ...,
        [ 0.0163,  0.0479, -0.0864,  ...,  0.0260,  0.0842, -0.0261],
        [ 0.0487,  0.0051, -0.0091,  ..., -0.0332, -0.0092,  0.0760],
        [-0.1330,  0.0021,  0.0796,  ...,  0.1185,  0.1274, -0.2402]])
##########################################################
prot_encoder.encoder.layers.2.linear2.bias shape: torch.Size([64])
tensor([-0.0270, -0.0315, -0.0351,  0.1535,  0.1106, -0.0799, -0.1522,  0.0324,
        -0.0599,  0.0392,  0.0177, -0.0410, -0.0948, -0.0430,  0.1467, -0.1166,
        -0.0290,  0.1221,  0.1288,  0.0790,  0.0140,  0.0679, -0.0095,  0.0600,
         0.0501, -0.1445, -0.0416, -0.1040,  0.1330,  0.0512, -0.0074, -0.0880,
         0.1752,  0.1425, -0.0102, -0.1518,  0.1175, -0.0201,  0.0296, -0.1285,
         0.1388, -0.1141, -0.1617, -0.1439,  0.1179,  0.1165, -0.1048,  0.1334,
        -0.1410, -0.1052,  0.1549, -0.1152, -0.1560,  0.0307, -0.1354, -0.1270,
         0.0399,  0.0118, -0.0681, -0.1734,  0.0283, -0.1435,  0.0583,  0.0611])
tensor([-0.0467, -0.0339, -0.0300,  0.1397,  0.1003, -0.0909, -0.1371,  0.0435,
        -0.0562,  0.0329,  0.0197, -0.0378, -0.0727, -0.0396,  0.1446, -0.1028,
        -0.0187,  0.1121,  0.1452,  0.0645,  0.0056,  0.0573, -0.0131,  0.0665,
         0.0473, -0.1323, -0.0615, -0.0992,  0.1359,  0.0586, -0.0151, -0.0930,
         0.1501,  0.1295, -0.0054, -0.1439,  0.0955, -0.0302,  0.0218, -0.1176,
         0.1373, -0.1153, -0.1616, -0.1289,  0.1225,  0.1107, -0.1039,  0.1142,
        -0.1274, -0.0950,  0.1387, -0.1169, -0.1534,  0.0326, -0.1154, -0.1238,
         0.0448,  0.0091, -0.0562, -0.1547,  0.0529, -0.1299,  0.0588,  0.0443])
##########################################################
prot_encoder.encoder.layers.2.norm1.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([0.9809, 0.9728, 1.0042, 0.9972, 0.9902, 0.9947, 0.9875, 1.0299, 1.0401,
        0.9982, 1.0148, 0.9645, 0.9671, 1.0621, 0.9649, 0.9980, 1.0750, 0.9754,
        1.0356, 0.9383, 1.0272, 1.0134, 1.0139, 1.0498, 0.8666, 1.0417, 1.0321,
        1.0247, 0.9552, 0.9558, 1.0023, 0.9636, 0.9240, 0.9446, 1.0311, 1.0450,
        1.0050, 1.0311, 1.0300, 1.0247, 0.9256, 1.0170, 1.0214, 0.9912, 0.9685,
        1.0685, 0.9709, 1.0585, 0.9218, 1.0255, 0.9788, 1.0372, 0.9919, 1.0265,
        0.9655, 1.0566, 1.0409, 1.0541, 1.0348, 1.0516, 0.9266, 1.0010, 1.0271,
        0.9596])
##########################################################
prot_encoder.encoder.layers.2.norm1.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-0.0134, -0.0023,  0.0067, -0.0097, -0.0082,  0.0023,  0.0082,  0.0105,
         0.0048, -0.0052,  0.0043,  0.0032,  0.0187,  0.0042, -0.0023,  0.0069,
         0.0058, -0.0089,  0.0105, -0.0196, -0.0088, -0.0022, -0.0023,  0.0030,
         0.0026,  0.0072, -0.0228,  0.0045,  0.0036,  0.0062, -0.0132, -0.0016,
        -0.0217, -0.0041,  0.0040,  0.0059, -0.0193, -0.0073, -0.0018,  0.0086,
        -0.0017, -0.0004, -0.0006,  0.0159,  0.0029, -0.0020, -0.0005, -0.0116,
         0.0085,  0.0089, -0.0116, -0.0012, -0.0013,  0.0037,  0.0152,  0.0018,
         0.0037, -0.0005,  0.0079,  0.0095,  0.0197,  0.0108,  0.0032, -0.0136])
##########################################################
prot_encoder.encoder.layers.2.norm2.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0163, 1.0445, 1.0446, 1.0416, 1.0275, 1.0512, 1.0255, 1.0742, 1.0623,
        1.0531, 1.0350, 1.0234, 1.0069, 1.0633, 1.0069, 1.0340, 1.1005, 1.0246,
        1.0991, 1.0227, 1.0382, 1.0300, 1.0426, 1.0938, 0.9423, 1.0724, 1.0699,
        1.0541, 0.9950, 1.0035, 1.0357, 1.0340, 0.9887, 0.9690, 1.0819, 1.0838,
        1.0439, 1.0752, 1.0500, 1.0577, 0.9867, 1.0539, 1.0576, 1.0214, 1.0247,
        1.1231, 0.9972, 1.0700, 0.9468, 1.0718, 1.0343, 1.0766, 1.0413, 1.0578,
        1.0184, 1.0899, 1.0569, 1.0781, 1.0382, 1.0652, 0.9621, 1.0399, 1.0910,
        1.0102])
##########################################################
prot_encoder.encoder.layers.2.norm2.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-1.3331e-02, -4.5237e-03,  6.4669e-03, -1.0939e-02,  1.9461e-02,
         4.6776e-03, -7.0386e-03,  6.6025e-03,  6.1283e-03, -1.0681e-02,
         4.9677e-03, -1.8418e-03,  3.9517e-03,  6.0234e-03,  4.9527e-03,
         8.1946e-03, -1.9987e-04, -1.2328e-02, -7.5740e-05,  1.7492e-03,
        -7.7067e-03, -1.3879e-02,  4.8968e-03, -8.5405e-03,  4.8113e-03,
        -1.6079e-03, -1.5273e-02, -6.0416e-03,  5.4581e-03, -1.5364e-02,
        -3.1812e-02,  7.9665e-03, -7.3921e-03, -1.3068e-02,  5.4345e-03,
         7.7990e-03, -2.4508e-03, -6.3463e-03, -4.5735e-04,  9.0495e-03,
        -1.8242e-02, -4.3615e-03, -1.0048e-02,  1.6472e-02,  1.6933e-02,
        -9.4133e-03, -2.1619e-02, -8.4703e-04,  4.4034e-03, -5.9425e-05,
        -2.0216e-03,  2.5521e-03, -6.0892e-03,  8.7648e-03, -4.5857e-03,
        -8.4072e-03,  1.7129e-02,  1.0345e-02,  5.6403e-03,  8.0635e-03,
         2.6703e-02,  2.1357e-02,  9.4285e-03, -4.7105e-04])
##########################################################
cross_encoder.encoder.layers.0.self_attn.in_proj_weight shape: torch.Size([192, 64])
tensor([[ 0.0244,  0.0796, -0.0255,  ..., -0.0793,  0.0582, -0.0433],
        [ 0.0777, -0.0275,  0.0370,  ...,  0.0262, -0.0493,  0.0389],
        [ 0.0272, -0.0014,  0.0087,  ..., -0.0263, -0.0242, -0.0736],
        ...,
        [ 0.0267, -0.0278,  0.0259,  ..., -0.0749,  0.0280,  0.0160],
        [-0.0282, -0.0656,  0.0206,  ..., -0.0047,  0.0074, -0.0089],
        [ 0.0488, -0.0592,  0.0765,  ..., -0.0330, -0.0713, -0.0381]])
tensor([[ 0.0810,  0.0486, -0.0456,  ..., -0.0941,  0.0875, -0.0227],
        [ 0.0408,  0.0068,  0.0640,  ...,  0.0444, -0.0765,  0.0148],
        [-0.0176,  0.0185,  0.0486,  ..., -0.0030, -0.0356, -0.0796],
        ...,
        [ 0.0153, -0.0212,  0.0206,  ..., -0.0793,  0.0185,  0.0084],
        [-0.0794, -0.0582,  0.0130,  ..., -0.0099, -0.0083, -0.0141],
        [ 0.0204, -0.0617,  0.0777,  ..., -0.0348, -0.0655, -0.0381]])
##########################################################
cross_encoder.encoder.layers.0.self_attn.in_proj_bias shape: torch.Size([192])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 2.6595e-02, -1.8811e-02, -3.6737e-02,  2.8235e-02,  4.9980e-02,
        -5.3211e-02, -3.2666e-02, -1.0713e-02,  3.7361e-02, -2.8969e-02,
        -4.2135e-02,  6.6917e-02, -2.5668e-02, -4.5029e-02, -2.8006e-02,
        -4.5989e-03,  2.8083e-02,  3.1658e-02, -2.1271e-02,  4.8175e-02,
        -1.8198e-02,  4.2273e-02, -5.0580e-02,  4.7963e-02,  1.1551e-02,
         3.8846e-02, -1.8334e-02,  3.3034e-02, -2.4444e-02, -1.8288e-02,
        -1.2776e-02, -3.2999e-02, -1.9884e-03, -3.0527e-02, -1.3013e-02,
        -8.2427e-03, -6.3031e-02, -1.1774e-02, -5.8586e-04, -2.3657e-02,
        -4.0713e-03,  9.6716e-03, -1.7772e-02, -1.1682e-02, -1.5401e-02,
        -5.2594e-03, -2.5116e-02,  2.3293e-02, -5.6637e-03, -3.9690e-03,
         1.2511e-02,  1.6946e-02,  1.0647e-03,  6.0937e-02,  3.2889e-02,
        -2.3357e-03,  1.3905e-02,  5.8523e-03,  1.6612e-02, -1.0885e-02,
        -1.1308e-02, -1.3272e-02,  1.0865e-02,  1.2410e-02,  6.3815e-05,
         3.5708e-07,  1.0903e-04, -1.6802e-05,  5.2325e-05, -1.0081e-05,
         1.5339e-05, -4.1788e-05,  3.0448e-05, -1.7056e-05,  8.7551e-06,
         2.4267e-05,  2.6378e-05,  4.5526e-05,  1.4255e-05, -1.5678e-05,
         3.7582e-05,  5.2784e-05, -2.3847e-05, -2.2869e-05, -7.5108e-05,
         2.9824e-05,  6.2875e-07,  2.8342e-05,  1.5306e-05,  5.6059e-07,
         1.3540e-05,  1.6385e-05,  8.6882e-06, -2.6593e-05, -3.7160e-05,
         4.5472e-05,  6.6005e-06, -3.8511e-06, -6.2442e-05, -1.2614e-05,
         7.1304e-08, -1.9346e-05, -3.1631e-05,  3.2180e-06,  6.8541e-06,
         1.6834e-05, -1.8596e-05, -9.5423e-07,  7.6598e-07, -2.6613e-06,
         5.5735e-05,  2.1604e-08,  2.1535e-05,  4.7447e-05, -9.1323e-06,
        -5.8310e-06, -3.3067e-06, -1.6081e-05, -2.4476e-07,  5.9146e-06,
         6.1703e-05, -2.7965e-05,  9.9113e-06,  1.5768e-05, -2.1356e-05,
         4.5605e-05,  1.5711e-05, -6.4951e-05,  7.2586e-04, -2.0934e-02,
        -1.7894e-02,  9.7707e-03, -6.8483e-03, -6.7352e-03,  1.4623e-02,
        -3.9929e-03,  3.9910e-04, -9.8692e-03,  5.7581e-04,  8.9950e-04,
         3.1872e-03, -2.9654e-03,  4.3618e-03,  6.0126e-03, -7.4402e-03,
        -3.2695e-03,  2.0141e-04,  2.5708e-03, -8.6113e-03,  1.2701e-03,
         9.6308e-03,  1.0445e-02, -6.3851e-03, -1.0466e-03, -2.5386e-03,
         1.5813e-02, -9.5843e-03,  1.3454e-02,  5.7233e-03,  1.3487e-02,
        -7.4872e-03, -2.9653e-03, -1.7079e-03, -2.5421e-02,  1.3658e-02,
        -3.0132e-03, -5.6726e-03, -8.3341e-03, -3.8660e-04, -1.2086e-03,
         1.0206e-02,  1.7871e-02,  6.8703e-03,  1.0132e-02,  1.7913e-04,
        -7.4915e-03, -3.4024e-03,  2.1946e-02,  1.0968e-03,  7.0328e-03,
        -7.8638e-03,  2.6679e-03, -2.1511e-04, -8.3171e-03,  8.9660e-03,
         3.1648e-03, -1.0431e-02,  2.5151e-03,  1.3713e-02,  7.6690e-03,
         1.2455e-02,  3.7173e-03])
##########################################################
cross_encoder.encoder.layers.0.self_attn.out_proj.weight shape: torch.Size([64, 64])
tensor([[ 0.1086,  0.0487,  0.0407,  ...,  0.0274,  0.0618,  0.0684],
        [ 0.0496,  0.1072,  0.1069,  ..., -0.0798,  0.0487,  0.0439],
        [-0.1094,  0.0982,  0.0598,  ..., -0.0116,  0.0371,  0.0646],
        ...,
        [ 0.1219, -0.0957,  0.0094,  ...,  0.0416,  0.0138, -0.0760],
        [ 0.1211, -0.0566, -0.0448,  ...,  0.0829,  0.0385, -0.1208],
        [ 0.0024, -0.0316, -0.0705,  ..., -0.0335, -0.1018,  0.0645]])
tensor([[ 0.1210,  0.0568,  0.0216,  ...,  0.0314,  0.0731,  0.0839],
        [ 0.0574,  0.1204,  0.0994,  ..., -0.0782,  0.0509,  0.0631],
        [-0.1010,  0.0873,  0.0686,  ...,  0.0020,  0.0622,  0.0756],
        ...,
        [ 0.1273, -0.0770,  0.0369,  ...,  0.0369, -0.0288, -0.0961],
        [ 0.1224, -0.0640, -0.0094,  ...,  0.1103,  0.0394, -0.1122],
        [ 0.0308, -0.0543, -0.0798,  ..., -0.0435, -0.0945,  0.0541]])
##########################################################
cross_encoder.encoder.layers.0.self_attn.out_proj.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-0.0053, -0.0116,  0.0064,  0.0095, -0.0015, -0.0025,  0.0066, -0.0017,
        -0.0046, -0.0039,  0.0038, -0.0006,  0.0086, -0.0012, -0.0074, -0.0076,
         0.0028, -0.0090, -0.0150, -0.0039,  0.0087, -0.0001,  0.0029, -0.0081,
        -0.0078, -0.0066, -0.0105,  0.0005,  0.0069, -0.0106, -0.0095, -0.0005,
        -0.0116, -0.0059,  0.0076,  0.0146, -0.0012, -0.0051,  0.0047,  0.0086,
        -0.0163,  0.0052, -0.0137,  0.0147,  0.0079, -0.0106, -0.0090,  0.0101,
        -0.0067,  0.0003,  0.0014, -0.0001, -0.0092,  0.0098, -0.0144,  0.0097,
         0.0042,  0.0053, -0.0101, -0.0002,  0.0147,  0.0138,  0.0076, -0.0013])
##########################################################
cross_encoder.encoder.layers.0.linear1.weight shape: torch.Size([32, 64])
tensor([[ 0.0217, -0.0104,  0.0554,  ...,  0.1449,  0.0982,  0.0485],
        [-0.0335,  0.0853,  0.0075,  ..., -0.0201, -0.0339,  0.0291],
        [-0.0740, -0.0955, -0.0084,  ...,  0.0122,  0.0112,  0.0208],
        ...,
        [ 0.0576,  0.0560,  0.0215,  ..., -0.0048,  0.0831,  0.0334],
        [-0.1104,  0.1473,  0.0385,  ...,  0.0070, -0.0703, -0.1403],
        [ 0.0907,  0.0930,  0.1376,  ..., -0.0269, -0.0346,  0.1109]])
tensor([[ 0.0200, -0.0081,  0.0309,  ...,  0.1398,  0.1017,  0.0311],
        [-0.0596,  0.0647,  0.0135,  ...,  0.0191, -0.0325,  0.0616],
        [-0.0735, -0.0873, -0.0071,  ...,  0.0062,  0.0089,  0.0188],
        ...,
        [ 0.0981,  0.0677,  0.0303,  ..., -0.0204,  0.0803,  0.0191],
        [-0.1223,  0.1482,  0.0914,  ...,  0.0074, -0.0587, -0.1386],
        [ 0.0797,  0.1005,  0.1692,  ..., -0.0385, -0.0343,  0.1167]])
##########################################################
cross_encoder.encoder.layers.0.linear1.bias shape: torch.Size([32])
tensor([-0.0418,  0.0661,  0.0565, -0.0876,  0.0814,  0.0049,  0.0517,  0.0413,
        -0.0772, -0.0204, -0.0560,  0.0261,  0.1067, -0.1145, -0.1013,  0.0182,
        -0.0914, -0.0142, -0.0611,  0.0303,  0.0980, -0.0364, -0.0914,  0.0714,
         0.0428,  0.1233, -0.0610,  0.0649, -0.1097, -0.0299,  0.0850, -0.0867])
tensor([-0.0859,  0.0352,  0.0356, -0.0955,  0.0602, -0.0101,  0.0275, -0.0072,
        -0.1160, -0.0672, -0.0698,  0.0210,  0.0648, -0.1184, -0.1253,  0.0075,
        -0.0929, -0.0171, -0.0601,  0.0134,  0.0835, -0.0537, -0.0927,  0.0617,
         0.0204,  0.0857, -0.1141,  0.0349, -0.1537, -0.0554,  0.0592, -0.1084])
##########################################################
cross_encoder.encoder.layers.0.linear2.weight shape: torch.Size([64, 32])
tensor([[-0.0029, -0.0479,  0.0297,  ..., -0.0061,  0.0358, -0.0363],
        [ 0.0189,  0.0748,  0.1288,  ..., -0.0315, -0.0955,  0.0770],
        [-0.1235,  0.0707, -0.0185,  ..., -0.0342,  0.0605,  0.0471],
        ...,
        [ 0.0955, -0.0212,  0.1571,  ..., -0.0199, -0.1011,  0.1054],
        [ 0.0262, -0.0227, -0.0715,  ..., -0.0903, -0.0907, -0.0596],
        [ 0.0066,  0.0050, -0.1196,  ...,  0.0266, -0.0038,  0.0339]])
tensor([[-0.0068, -0.0595,  0.0339,  ..., -0.0191,  0.0653, -0.0424],
        [ 0.0151,  0.0707,  0.1653,  ..., -0.0253, -0.1338, -0.0059],
        [-0.1297,  0.0767, -0.0266,  ..., -0.0349,  0.0346,  0.0071],
        ...,
        [ 0.0980, -0.0338,  0.1581,  ...,  0.0225, -0.1222,  0.0895],
        [ 0.0392, -0.0338, -0.0570,  ..., -0.0950, -0.0476, -0.0446],
        [-0.0022,  0.0015, -0.1280,  ...,  0.0369,  0.0037,  0.0254]])
##########################################################
cross_encoder.encoder.layers.0.linear2.bias shape: torch.Size([64])
tensor([-0.0034, -0.0138,  0.1276, -0.1450,  0.0891,  0.1579, -0.1167, -0.0908,
        -0.0368,  0.1096,  0.0597, -0.1426,  0.0051,  0.1700,  0.1481,  0.1197,
        -0.0006,  0.0494,  0.0672,  0.1409, -0.1617,  0.1572, -0.1619, -0.0174,
         0.1230,  0.1312,  0.1459,  0.1329, -0.0969,  0.1738, -0.1260, -0.0191,
         0.0815, -0.0048,  0.0266, -0.1282,  0.1538, -0.0062, -0.0989,  0.0706,
         0.0834,  0.0806,  0.0817,  0.1362, -0.0180,  0.0295, -0.0763, -0.1327,
         0.0062,  0.0049, -0.0856,  0.0779,  0.0447,  0.0415,  0.0219, -0.1362,
        -0.0116, -0.0261,  0.1666,  0.0064,  0.0259,  0.0093, -0.1609,  0.1625])
tensor([-0.0081, -0.0194,  0.1212, -0.1384,  0.0808,  0.1502, -0.1109, -0.0961,
        -0.0479,  0.1025,  0.0651, -0.1439,  0.0256,  0.1663,  0.1220,  0.1126,
         0.0008,  0.0393,  0.0618,  0.1353, -0.1473,  0.1591, -0.1475, -0.0303,
         0.1120,  0.1184,  0.1283,  0.1329, -0.1017,  0.1555, -0.1209, -0.0222,
         0.0786, -0.0179,  0.0323, -0.1033,  0.1499, -0.0147, -0.0948,  0.0839,
         0.0684,  0.0831,  0.0701,  0.1461, -0.0153,  0.0255, -0.0803, -0.1235,
        -0.0006,  0.0141, -0.0788,  0.0781,  0.0309,  0.0440,  0.0067, -0.1101,
        -0.0053, -0.0174,  0.1568,  0.0057,  0.0403,  0.0263, -0.1466,  0.1619])
##########################################################
cross_encoder.encoder.layers.0.norm1.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([0.9757, 0.9669, 1.0098, 0.9966, 1.0016, 0.9816, 1.0422, 1.0319, 0.9944,
        1.0047, 1.0218, 1.0099, 1.0047, 1.0220, 1.0276, 1.0134, 1.0569, 1.0066,
        1.0245, 0.9617, 1.0247, 0.9844, 0.9780, 1.0151, 0.9597, 1.0312, 1.0156,
        1.0039, 1.0003, 0.9840, 0.9703, 1.0157, 1.0010, 0.9833, 1.0045, 1.0159,
        0.9981, 1.0265, 1.0200, 0.9982, 0.9978, 1.0210, 1.0000, 1.0000, 0.9929,
        1.0299, 1.0214, 1.0630, 0.9573, 1.0263, 1.0233, 1.0229, 0.9915, 1.0330,
        1.0153, 1.0270, 1.0083, 1.0069, 1.0059, 1.0422, 0.9701, 0.9908, 0.9915,
        0.9881])
##########################################################
cross_encoder.encoder.layers.0.norm1.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-0.0088, -0.0107,  0.0019,  0.0061, -0.0025,  0.0023,  0.0041, -0.0021,
        -0.0080, -0.0024,  0.0035, -0.0001,  0.0154, -0.0019, -0.0117, -0.0060,
         0.0011, -0.0155, -0.0109, -0.0031,  0.0079,  0.0013,  0.0084, -0.0106,
        -0.0112, -0.0093, -0.0161, -0.0018,  0.0048, -0.0136, -0.0076,  0.0021,
        -0.0103, -0.0109,  0.0088,  0.0173, -0.0055, -0.0055,  0.0007,  0.0111,
        -0.0180,  0.0036, -0.0129,  0.0129,  0.0038, -0.0048, -0.0093,  0.0130,
        -0.0067,  0.0017,  0.0047, -0.0019, -0.0122,  0.0105, -0.0130,  0.0136,
         0.0026,  0.0061, -0.0113,  0.0058,  0.0154,  0.0149,  0.0095, -0.0013])
##########################################################
cross_encoder.encoder.layers.0.norm2.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([0.9793, 0.9646, 1.0067, 1.0051, 1.0049, 0.9856, 1.0496, 1.0272, 0.9960,
        1.0096, 1.0172, 1.0106, 0.9996, 1.0374, 1.0472, 1.0191, 1.0605, 1.0050,
        1.0147, 0.9590, 1.0394, 0.9912, 0.9820, 1.0111, 0.9695, 1.0213, 1.0274,
        0.9971, 1.0016, 0.9787, 0.9774, 1.0106, 1.0023, 0.9885, 1.0094, 1.0059,
        1.0054, 1.0219, 1.0200, 0.9970, 1.0032, 1.0316, 1.0016, 1.0103, 0.9960,
        1.0267, 1.0158, 1.0651, 0.9659, 1.0243, 1.0312, 1.0228, 0.9948, 1.0334,
        1.0190, 1.0257, 1.0113, 1.0109, 0.9994, 1.0446, 0.9744, 0.9942, 0.9883,
        0.9918])
##########################################################
cross_encoder.encoder.layers.0.norm2.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-0.0060, -0.0101, -0.0016,  0.0001, -0.0064, -0.0015,  0.0069, -0.0015,
        -0.0160, -0.0038,  0.0013, -0.0033,  0.0152, -0.0002, -0.0159, -0.0010,
        -0.0003, -0.0113, -0.0086, -0.0020,  0.0103,  0.0025,  0.0100, -0.0150,
        -0.0081, -0.0065, -0.0133, -0.0007, -0.0008, -0.0194,  0.0036, -0.0062,
        -0.0094, -0.0115,  0.0077,  0.0182, -0.0048, -0.0065, -0.0013,  0.0129,
        -0.0155,  0.0011, -0.0108,  0.0099,  0.0016, -0.0095, -0.0083,  0.0101,
        -0.0059,  0.0070,  0.0029,  0.0006, -0.0062,  0.0064, -0.0113,  0.0248,
         0.0047,  0.0058, -0.0068,  0.0014,  0.0119,  0.0215,  0.0152,  0.0031])
##########################################################
cross_encoder.encoder.layers.1.self_attn.in_proj_weight shape: torch.Size([192, 64])
tensor([[ 0.0244,  0.0796, -0.0255,  ..., -0.0793,  0.0582, -0.0433],
        [ 0.0777, -0.0275,  0.0370,  ...,  0.0262, -0.0493,  0.0389],
        [ 0.0272, -0.0014,  0.0087,  ..., -0.0263, -0.0242, -0.0736],
        ...,
        [ 0.0267, -0.0278,  0.0259,  ..., -0.0749,  0.0280,  0.0160],
        [-0.0282, -0.0656,  0.0206,  ..., -0.0047,  0.0074, -0.0089],
        [ 0.0488, -0.0592,  0.0765,  ..., -0.0330, -0.0713, -0.0381]])
tensor([[ 0.0733,  0.0517, -0.0058,  ..., -0.0849,  0.0729, -0.0120],
        [ 0.0421,  0.0002,  0.0220,  ...,  0.0410, -0.0474, -0.0055],
        [-0.0216,  0.0113, -0.0121,  ..., -0.0101, -0.0171, -0.0957],
        ...,
        [ 0.0219, -0.0254,  0.0129,  ..., -0.0765,  0.0255,  0.0125],
        [-0.0503, -0.0520,  0.0254,  ..., -0.0124, -0.0110, -0.0226],
        [ 0.0331, -0.0586,  0.0599,  ..., -0.0326, -0.0671, -0.0438]])
##########################################################
cross_encoder.encoder.layers.1.self_attn.in_proj_bias shape: torch.Size([192])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 4.0795e-02, -3.0341e-02, -6.1862e-02,  6.2702e-02,  6.5713e-02,
        -7.2921e-02, -7.4671e-02, -3.3376e-02,  5.5731e-02, -4.6050e-02,
        -6.1771e-02,  7.8871e-02, -3.4218e-02, -6.7404e-02, -6.2137e-02,
         1.0403e-03,  5.1986e-02,  5.6400e-02, -3.7100e-02,  7.3620e-02,
        -3.9889e-02,  5.7355e-02, -7.4000e-02,  6.8483e-02,  3.8077e-02,
        -4.9830e-02, -3.8117e-02,  5.2393e-02, -7.5216e-02, -4.4966e-02,
        -2.3018e-02, -4.5282e-02, -3.4209e-02,  6.5442e-04, -5.1747e-03,
        -3.8492e-02, -7.3051e-02, -1.6387e-02,  4.1898e-03, -1.0201e-03,
        -8.2592e-03,  1.2588e-02, -6.7787e-03, -2.4903e-02, -2.3354e-02,
        -1.3139e-02,  4.0190e-02,  3.4362e-02, -9.0891e-03, -1.0888e-02,
         1.0924e-02,  1.4318e-02, -3.6230e-02,  3.0354e-02,  1.2312e-02,
         5.2961e-03,  1.4063e-02,  1.3060e-02,  3.0121e-02,  6.8288e-02,
         1.4774e-03, -7.1256e-02, -4.6402e-02,  1.5225e-02, -9.2487e-06,
         6.9285e-05,  1.2826e-04, -8.5730e-05, -4.9913e-05,  5.5413e-05,
         1.0448e-05,  4.5473e-05, -2.9401e-05,  5.8158e-05, -5.5079e-06,
        -3.7340e-05,  1.8806e-05,  1.0475e-04,  2.2859e-05, -1.6358e-05,
        -7.2902e-05, -1.6977e-05, -6.0065e-06,  3.9852e-06,  1.1387e-04,
        -1.3484e-04,  7.7085e-05, -7.3670e-05, -1.0574e-04,  3.4321e-05,
         6.9644e-05, -1.0565e-05,  1.6105e-05,  7.3421e-05,  4.3044e-05,
         8.9390e-05,  1.0352e-05, -1.8564e-06,  2.3127e-05, -2.6368e-06,
         9.8227e-06, -1.3985e-05,  2.7350e-05,  1.6917e-05, -2.7575e-06,
         2.1804e-05,  4.3025e-06,  1.6665e-05,  9.5361e-06, -1.5921e-05,
        -3.8448e-06, -9.5358e-06, -6.8447e-05, -3.7248e-06, -1.2392e-05,
        -1.9332e-05, -3.9895e-06, -3.7011e-05, -4.6804e-06,  7.1004e-06,
         5.0210e-05, -2.2922e-05, -7.7785e-06,  4.8280e-06, -1.3387e-06,
         1.8715e-05,  1.0686e-06,  3.7700e-05,  9.0633e-03, -2.2209e-02,
        -2.2371e-02,  7.7452e-03, -8.4671e-03, -9.7957e-03,  1.3521e-02,
        -8.1516e-03, -6.0892e-03, -1.3309e-02, -1.0063e-02,  6.3370e-03,
         9.2382e-03,  2.0682e-03,  8.4237e-03,  5.5400e-03, -6.8438e-03,
         3.7864e-03,  4.6288e-05,  1.9728e-02, -5.8755e-03,  3.8231e-03,
        -7.1296e-04,  1.3366e-02, -7.2346e-03,  5.5135e-03, -5.1273e-03,
         1.7864e-02, -7.1703e-03,  1.0383e-02, -4.3584e-03,  1.4715e-02,
         4.6910e-04, -7.7006e-03,  5.5493e-04, -2.4632e-02,  1.4959e-02,
        -1.7009e-03,  5.7859e-03, -2.1768e-02, -4.5052e-03, -5.2138e-03,
         2.3340e-02,  1.7007e-02,  1.0005e-02,  1.8539e-02, -5.9709e-03,
        -8.9593e-03, -1.2637e-02,  1.8049e-02,  6.3371e-03,  5.5122e-03,
        -8.5710e-03, -8.7381e-03, -7.1320e-04, -7.3926e-03,  1.5521e-04,
         1.4092e-02, -1.0104e-02,  3.2424e-03,  7.7684e-03,  4.4733e-03,
         1.3703e-02,  3.0968e-03])
##########################################################
cross_encoder.encoder.layers.1.self_attn.out_proj.weight shape: torch.Size([64, 64])
tensor([[ 0.1086,  0.0487,  0.0407,  ...,  0.0274,  0.0618,  0.0684],
        [ 0.0496,  0.1072,  0.1069,  ..., -0.0798,  0.0487,  0.0439],
        [-0.1094,  0.0982,  0.0598,  ..., -0.0116,  0.0371,  0.0646],
        ...,
        [ 0.1219, -0.0957,  0.0094,  ...,  0.0416,  0.0138, -0.0760],
        [ 0.1211, -0.0566, -0.0448,  ...,  0.0829,  0.0385, -0.1208],
        [ 0.0024, -0.0316, -0.0705,  ..., -0.0335, -0.1018,  0.0645]])
tensor([[ 0.1259,  0.0408,  0.0251,  ...,  0.0249,  0.0739,  0.0711],
        [ 0.0708,  0.0963,  0.1263,  ..., -0.0783,  0.0557,  0.0548],
        [-0.0849,  0.0608,  0.0934,  ...,  0.0013,  0.0588,  0.0717],
        ...,
        [ 0.1066, -0.0748, -0.0405,  ...,  0.0479, -0.0159, -0.0837],
        [ 0.1109, -0.0542, -0.0307,  ...,  0.1014,  0.0320, -0.1104],
        [ 0.0147, -0.0451, -0.0941,  ..., -0.0570, -0.0935,  0.0591]])
##########################################################
cross_encoder.encoder.layers.1.self_attn.out_proj.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-0.0109, -0.0071, -0.0027,  0.0137,  0.0048, -0.0065,  0.0106, -0.0009,
        -0.0033,  0.0009,  0.0015, -0.0070,  0.0146,  0.0079, -0.0120,  0.0019,
        -0.0027, -0.0130, -0.0232, -0.0039,  0.0084, -0.0008, -0.0027, -0.0101,
        -0.0105, -0.0055, -0.0060,  0.0047, -0.0022, -0.0154, -0.0001, -0.0065,
        -0.0031, -0.0143,  0.0075,  0.0151, -0.0071, -0.0058,  0.0002,  0.0121,
        -0.0185,  0.0073, -0.0126,  0.0111, -0.0062, -0.0116,  0.0070,  0.0077,
        -0.0050,  0.0034,  0.0107, -0.0083, -0.0134,  0.0052, -0.0051,  0.0233,
         0.0020,  0.0083, -0.0002, -0.0020,  0.0147,  0.0162,  0.0032, -0.0004])
##########################################################
cross_encoder.encoder.layers.1.linear1.weight shape: torch.Size([32, 64])
tensor([[ 0.0217, -0.0104,  0.0554,  ...,  0.1449,  0.0982,  0.0485],
        [-0.0335,  0.0853,  0.0075,  ..., -0.0201, -0.0339,  0.0291],
        [-0.0740, -0.0955, -0.0084,  ...,  0.0122,  0.0112,  0.0208],
        ...,
        [ 0.0576,  0.0560,  0.0215,  ..., -0.0048,  0.0831,  0.0334],
        [-0.1104,  0.1473,  0.0385,  ...,  0.0070, -0.0703, -0.1403],
        [ 0.0907,  0.0930,  0.1376,  ..., -0.0269, -0.0346,  0.1109]])
tensor([[ 0.0503,  0.0004,  0.0390,  ...,  0.1223,  0.1048,  0.0366],
        [-0.0654,  0.0617,  0.0312,  ...,  0.0218, -0.0322,  0.0679],
        [-0.0693, -0.0966, -0.0006,  ..., -0.0054,  0.0009,  0.0209],
        ...,
        [ 0.0993,  0.0591,  0.0082,  ..., -0.0165,  0.0871,  0.0206],
        [-0.1240,  0.1558,  0.0694,  ...,  0.0036, -0.0486, -0.1326],
        [ 0.1162,  0.0753,  0.1628,  ..., -0.0488, -0.0369,  0.1292]])
##########################################################
cross_encoder.encoder.layers.1.linear1.bias shape: torch.Size([32])
tensor([-0.0418,  0.0661,  0.0565, -0.0876,  0.0814,  0.0049,  0.0517,  0.0413,
        -0.0772, -0.0204, -0.0560,  0.0261,  0.1067, -0.1145, -0.1013,  0.0182,
        -0.0914, -0.0142, -0.0611,  0.0303,  0.0980, -0.0364, -0.0914,  0.0714,
         0.0428,  0.1233, -0.0610,  0.0649, -0.1097, -0.0299,  0.0850, -0.0867])
tensor([-0.0909,  0.0384,  0.0208, -0.0983,  0.0599, -0.0250, -0.0023, -0.0203,
        -0.1025, -0.0636, -0.0733,  0.0304,  0.0513, -0.1238, -0.1218,  0.0162,
        -0.1006, -0.0132, -0.0679, -0.0035,  0.0640, -0.0428, -0.0831,  0.0431,
         0.0422,  0.0907, -0.0843,  0.0265, -0.1543, -0.0377,  0.0876, -0.0922])
##########################################################
cross_encoder.encoder.layers.1.linear2.weight shape: torch.Size([64, 32])
tensor([[-0.0029, -0.0479,  0.0297,  ..., -0.0061,  0.0358, -0.0363],
        [ 0.0189,  0.0748,  0.1288,  ..., -0.0315, -0.0955,  0.0770],
        [-0.1235,  0.0707, -0.0185,  ..., -0.0342,  0.0605,  0.0471],
        ...,
        [ 0.0955, -0.0212,  0.1571,  ..., -0.0199, -0.1011,  0.1054],
        [ 0.0262, -0.0227, -0.0715,  ..., -0.0903, -0.0907, -0.0596],
        [ 0.0066,  0.0050, -0.1196,  ...,  0.0266, -0.0038,  0.0339]])
tensor([[-0.0116, -0.0539,  0.0372,  ..., -0.0190,  0.0583, -0.0405],
        [ 0.0152,  0.0661,  0.1649,  ..., -0.0532, -0.1258,  0.0667],
        [-0.1336,  0.0823, -0.0349,  ..., -0.0555,  0.0362,  0.0355],
        ...,
        [ 0.0930, -0.0249,  0.1597,  ...,  0.0476, -0.1328,  0.0785],
        [ 0.0386, -0.0276, -0.0617,  ..., -0.0619, -0.0741, -0.0515],
        [-0.0008,  0.0047, -0.1244,  ...,  0.0551,  0.0006, -0.0018]])
##########################################################
cross_encoder.encoder.layers.1.linear2.bias shape: torch.Size([64])
tensor([-0.0034, -0.0138,  0.1276, -0.1450,  0.0891,  0.1579, -0.1167, -0.0908,
        -0.0368,  0.1096,  0.0597, -0.1426,  0.0051,  0.1700,  0.1481,  0.1197,
        -0.0006,  0.0494,  0.0672,  0.1409, -0.1617,  0.1572, -0.1619, -0.0174,
         0.1230,  0.1312,  0.1459,  0.1329, -0.0969,  0.1738, -0.1260, -0.0191,
         0.0815, -0.0048,  0.0266, -0.1282,  0.1538, -0.0062, -0.0989,  0.0706,
         0.0834,  0.0806,  0.0817,  0.1362, -0.0180,  0.0295, -0.0763, -0.1327,
         0.0062,  0.0049, -0.0856,  0.0779,  0.0447,  0.0415,  0.0219, -0.1362,
        -0.0116, -0.0261,  0.1666,  0.0064,  0.0259,  0.0093, -0.1609,  0.1625])
tensor([-0.0114, -0.0197,  0.1125, -0.1340,  0.0875,  0.1419, -0.1048, -0.0904,
        -0.0491,  0.1090,  0.0622, -0.1475,  0.0232,  0.1770,  0.1211,  0.1234,
         0.0004,  0.0381,  0.0568,  0.1345, -0.1500,  0.1605, -0.1468, -0.0331,
         0.1133,  0.1205,  0.1366,  0.1377, -0.1046,  0.1483, -0.1135, -0.0303,
         0.0764, -0.0198,  0.0360, -0.1042,  0.1432, -0.0193, -0.0981,  0.0835,
         0.0690,  0.0879,  0.0670,  0.1445, -0.0230,  0.0161, -0.0693, -0.1300,
         0.0016,  0.0130, -0.0732,  0.0686,  0.0290,  0.0388,  0.0088, -0.1012,
        -0.0011, -0.0159,  0.1710,  0.0033,  0.0396,  0.0289, -0.1500,  0.1624])
##########################################################
cross_encoder.encoder.layers.1.norm1.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([0.9779, 0.9666, 0.9995, 1.0019, 1.0038, 0.9849, 1.0553, 1.0250, 0.9961,
        1.0076, 1.0108, 1.0068, 0.9977, 1.0278, 1.0441, 1.0269, 1.0518, 1.0020,
        1.0204, 0.9660, 1.0452, 0.9897, 0.9779, 1.0027, 0.9734, 1.0168, 1.0259,
        0.9899, 1.0039, 0.9870, 0.9790, 1.0103, 1.0126, 0.9899, 1.0069, 1.0069,
        0.9997, 1.0230, 1.0204, 0.9958, 1.0102, 1.0196, 0.9963, 0.9987, 0.9934,
        1.0302, 1.0325, 1.0608, 0.9631, 1.0100, 1.0277, 1.0130, 0.9888, 1.0284,
        1.0158, 1.0251, 1.0144, 1.0103, 0.9933, 1.0396, 0.9737, 0.9917, 0.9861,
        0.9853])
##########################################################
cross_encoder.encoder.layers.1.norm1.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-0.0110, -0.0084, -0.0071,  0.0123,  0.0026, -0.0079,  0.0114,  0.0007,
        -0.0078,  0.0023,  0.0019, -0.0054,  0.0168,  0.0081, -0.0160,  0.0033,
        -0.0007, -0.0191, -0.0167, -0.0047,  0.0055, -0.0007,  0.0020, -0.0113,
        -0.0101, -0.0050, -0.0088,  0.0036, -0.0023, -0.0189, -0.0030, -0.0077,
        -0.0026, -0.0175,  0.0112,  0.0180, -0.0102, -0.0103, -0.0013,  0.0140,
        -0.0204,  0.0086, -0.0146,  0.0112, -0.0089, -0.0109,  0.0050,  0.0118,
        -0.0044,  0.0051,  0.0097, -0.0092, -0.0146,  0.0035, -0.0080,  0.0263,
         0.0031,  0.0084,  0.0004,  0.0010,  0.0151,  0.0162,  0.0050, -0.0004])
##########################################################
cross_encoder.encoder.layers.1.norm2.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0868, 1.0977, 1.2011, 1.1055, 1.1542, 1.1103, 1.2655, 1.2570, 1.1066,
        1.1643, 1.1243, 1.2461, 1.1935, 1.2088, 1.2533, 1.1887, 1.2848, 1.2025,
        1.1493, 1.1441, 1.3153, 1.1157, 1.1491, 1.1479, 1.1672, 1.2252, 1.2342,
        1.2429, 1.1530, 1.1088, 1.1291, 1.1506, 1.2089, 1.1537, 1.1898, 1.1341,
        1.1493, 1.1672, 1.2265, 1.1574, 1.1951, 1.2316, 1.1444, 1.1433, 1.1248,
        1.1273, 1.1370, 1.2769, 1.1154, 1.1268, 1.2030, 1.1798, 1.1553, 1.1817,
        1.2627, 1.2046, 1.1951, 1.1924, 1.1226, 1.1755, 1.0700, 1.1083, 1.1435,
        1.1579])
##########################################################
cross_encoder.encoder.layers.1.norm2.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 8.5441e-03,  2.7514e-02,  4.5125e-03, -3.2901e-02, -2.9419e-02,
         1.1131e-03,  3.7315e-03,  3.1856e-03,  1.0585e-02,  5.9879e-03,
         6.8345e-03,  1.3816e-02, -9.2765e-03, -1.3264e-02, -1.0482e-02,
        -2.9878e-02, -5.5050e-03,  1.6461e-03,  1.6902e-02, -6.8138e-03,
        -1.2127e-02, -4.7724e-03, -2.0289e-02,  4.3909e-04, -8.0674e-03,
        -2.6069e-02, -3.7780e-03,  1.7132e-02,  2.5051e-02,  7.3890e-03,
        -1.8922e-02,  6.6993e-03,  3.4574e-03,  6.4266e-03,  4.9518e-03,
        -1.9105e-02, -1.5585e-02,  1.7286e-02,  2.8150e-04,  2.3922e-03,
        -5.1599e-03, -5.7879e-03,  4.7248e-03, -9.1457e-05, -1.0211e-02,
         1.5955e-02,  2.6941e-02, -2.7017e-02,  2.6418e-02,  2.0277e-02,
         5.4282e-03,  2.4281e-03, -2.3089e-02, -8.3563e-03, -2.2021e-02,
        -1.4783e-02,  1.6068e-02, -2.5201e-02, -7.4238e-03,  9.7902e-04,
         3.1216e-03, -7.9988e-03, -1.9520e-02, -1.2033e-02])
##########################################################
ffn.dense1.weight shape: torch.Size([32, 64])
tensor([[ 0.0449,  0.0631,  0.0253,  ...,  0.0127,  0.0758, -0.0815],
        [-0.0514, -0.0413,  0.0094,  ..., -0.0521, -0.1051, -0.1779],
        [-0.1754, -0.0123, -0.0469,  ..., -0.0648, -0.0785, -0.0394],
        ...,
        [ 0.0745, -0.0294,  0.1102,  ..., -0.0181, -0.1025,  0.0041],
        [ 0.0193, -0.0273, -0.0393,  ..., -0.0462,  0.0191, -0.0156],
        [ 0.0530, -0.1312, -0.0382,  ..., -0.1012,  0.1152, -0.0435]])
tensor([[ 0.0330,  0.0274,  0.0034,  ...,  0.0326,  0.0723, -0.0671],
        [-0.1287, -0.0528, -0.0551,  ..., -0.0449, -0.0869, -0.1502],
        [-0.1760, -0.0148, -0.0855,  ..., -0.0769, -0.0659, -0.0471],
        ...,
        [ 0.1091, -0.0170,  0.0797,  ..., -0.0334, -0.0859,  0.0295],
        [ 0.0468, -0.0098, -0.0522,  ..., -0.0595, -0.0398, -0.0736],
        [ 0.0658, -0.1484, -0.0862,  ..., -0.0955,  0.1263, -0.0323]])
##########################################################
ffn.dense1.bias shape: torch.Size([32])
tensor([-0.0352,  0.0903,  0.1131, -0.0181,  0.0165, -0.1051, -0.0794,  0.1210,
         0.1075, -0.1020,  0.1005,  0.0370,  0.0622,  0.1126, -0.1175,  0.0869,
        -0.1092, -0.0352,  0.0983, -0.0292, -0.0379, -0.0902, -0.0437,  0.0021,
         0.1081,  0.0539, -0.0961,  0.0648, -0.0727,  0.1177,  0.0163, -0.0884])
tensor([-0.0566,  0.0554,  0.1181, -0.0500,  0.0138, -0.1309, -0.0779,  0.0662,
         0.1113, -0.1219,  0.0853,  0.0211,  0.0473,  0.0682, -0.1656,  0.0697,
        -0.1205, -0.0018,  0.0653, -0.0222, -0.0418, -0.0995, -0.0501, -0.0036,
         0.0897,  0.0387, -0.0803,  0.0987, -0.0795,  0.1271,  0.0079, -0.0993])
##########################################################
ffn.dense2.weight shape: torch.Size([64, 32])
tensor([[-0.0143, -0.0627,  0.0498,  ...,  0.0953,  0.0703,  0.0132],
        [-0.0140, -0.0325, -0.0086,  ...,  0.0075, -0.1609, -0.0267],
        [-0.1012,  0.0128, -0.0021,  ...,  0.0139, -0.0197, -0.0783],
        ...,
        [-0.0307, -0.0492,  0.2029,  ...,  0.0581, -0.0676,  0.1120],
        [-0.1159,  0.0872, -0.1399,  ..., -0.0225,  0.0956,  0.2038],
        [-0.0376, -0.0562, -0.0092,  ..., -0.0218, -0.0790,  0.0576]])
tensor([[-0.0848, -0.1129,  0.0424,  ...,  0.0882,  0.0694,  0.0142],
        [ 0.0159, -0.0284,  0.0175,  ..., -0.0078, -0.1724, -0.0253],
        [-0.0944,  0.0083,  0.0071,  ...,  0.0111, -0.0134, -0.0881],
        ...,
        [-0.0216, -0.0329,  0.1803,  ...,  0.0719, -0.0499,  0.1284],
        [-0.1042,  0.0810, -0.0975,  ...,  0.0041,  0.1142,  0.2182],
        [-0.0460, -0.0108, -0.0215,  ..., -0.0267, -0.0927,  0.0557]])
##########################################################
ffn.dense2.bias shape: torch.Size([64])
tensor([-0.1542, -0.0669,  0.0321,  0.0075,  0.1648,  0.1522, -0.0395,  0.1582,
         0.0541, -0.1114,  0.0268, -0.0085,  0.1631, -0.0519, -0.0524,  0.1553,
         0.0502, -0.0216,  0.0362, -0.0690, -0.1344, -0.0408, -0.1273, -0.0693,
        -0.1548, -0.1541,  0.0696,  0.0319, -0.0708,  0.1032,  0.0053,  0.1679,
         0.0170,  0.1550, -0.0192, -0.0309, -0.1167, -0.1506,  0.1554,  0.0336,
         0.1257, -0.0880,  0.1300, -0.1225,  0.1575,  0.1548,  0.0431, -0.0133,
         0.1504,  0.0193, -0.1633, -0.1643, -0.0996,  0.0785,  0.0159, -0.1462,
        -0.0300, -0.0478,  0.1560, -0.0571,  0.0823, -0.0929, -0.1462,  0.0727])
tensor([-0.1628, -0.0743,  0.0416,  0.0033,  0.1666,  0.1608, -0.0356,  0.1542,
         0.0479, -0.1176,  0.0294, -0.0124,  0.1697, -0.0587, -0.0544,  0.1511,
         0.0472, -0.0260,  0.0284, -0.0660, -0.1224, -0.0443, -0.1108, -0.0825,
        -0.1545, -0.1581,  0.0586,  0.0125, -0.0638,  0.0824, -0.0020,  0.1609,
         0.0071,  0.1480, -0.0154, -0.0079, -0.1082, -0.1552,  0.1577,  0.0402,
         0.1095, -0.0926,  0.1204, -0.1084,  0.1694,  0.1514,  0.0197,  0.0006,
         0.1422,  0.0222, -0.1683, -0.1562, -0.1034,  0.0879,  0.0009, -0.1265,
        -0.0231, -0.0420,  0.1400, -0.0526,  0.0966, -0.0723, -0.1336,  0.0760])
##########################################################
addnorm.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([0.9798, 0.9646, 1.0152, 0.9963, 1.0008, 0.9818, 1.0422, 1.0358, 0.9895,
        1.0077, 1.0251, 1.0122, 1.0006, 1.0312, 1.0262, 0.9998, 1.0626, 1.0009,
        1.0193, 0.9550, 1.0193, 0.9839, 0.9801, 1.0221, 0.9601, 1.0323, 1.0234,
        1.0093, 1.0044, 0.9753, 0.9734, 1.0113, 0.9891, 0.9821, 1.0056, 1.0204,
        1.0024, 1.0248, 1.0179, 0.9991, 0.9951, 1.0272, 1.0027, 1.0043, 0.9993,
        1.0326, 1.0022, 1.0683, 0.9612, 1.0206, 1.0249, 1.0294, 0.9949, 1.0364,
        1.0083, 1.0256, 1.0111, 1.0040, 1.0077, 1.0417, 0.9672, 0.9893, 1.0029,
        0.9870])
##########################################################
addnorm.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-0.0066, -0.0118,  0.0046, -0.0046, -0.0109,  0.0063,  0.0069, -0.0014,
        -0.0091, -0.0044,  0.0040, -0.0017,  0.0122, -0.0039, -0.0016,  0.0012,
         0.0036, -0.0106, -0.0044, -0.0021,  0.0092, -0.0012,  0.0110, -0.0101,
        -0.0099, -0.0058, -0.0147, -0.0060,  0.0024, -0.0171, -0.0035,  0.0021,
        -0.0182, -0.0103,  0.0095,  0.0176, -0.0066, -0.0053, -0.0016,  0.0096,
        -0.0169, -0.0005, -0.0137,  0.0152,  0.0059, -0.0062, -0.0143,  0.0137,
        -0.0069,  0.0048, -0.0023,  0.0031, -0.0052,  0.0095, -0.0068,  0.0135,
         0.0061,  0.0063, -0.0118,  0.0091,  0.0131,  0.0190,  0.0161,  0.0007])
##########################################################
decoder.embedding.weight shape: torch.Size([166, 64])
tensor([[ 0.5019,  0.5071, -1.7331,  ..., -0.1758, -1.2352,  1.5763],
        [-1.6681,  0.4290, -0.8645,  ..., -0.7518,  1.9523, -0.3966],
        [-0.7674,  0.7699, -0.2345,  ...,  0.6751,  0.4288,  1.2685],
        ...,
        [-1.0193, -0.2738, -1.3882,  ...,  0.1266, -0.3696, -0.2509],
        [ 1.2561,  0.4961,  0.5853,  ...,  0.9193,  0.1620,  0.4640],
        [ 0.4386, -0.0382,  2.5157,  ...,  0.9392,  0.0992,  0.5279]])
tensor([[ 0.5019,  0.5071, -1.7331,  ..., -0.1758, -1.2352,  1.5763],
        [-1.6681,  0.4290, -0.8645,  ..., -0.7518,  1.9523, -0.3966],
        [-0.7935,  0.7884, -0.3172,  ...,  0.6579,  0.4639,  1.2409],
        ...,
        [-1.0193, -0.2738, -1.3882,  ...,  0.1266, -0.3696, -0.2509],
        [ 1.2561,  0.4961,  0.5853,  ...,  0.9193,  0.1620,  0.4640],
        [ 0.4386, -0.0382,  2.5157,  ...,  0.9392,  0.0992,  0.5279]])
##########################################################
decoder.blks.block0.attention1.W_q.weight shape: torch.Size([64, 64])
tensor([[ 0.0054, -0.1716,  0.0189,  ..., -0.0148, -0.1096, -0.0207],
        [-0.0385, -0.0717,  0.1536,  ...,  0.1467,  0.0038, -0.2040],
        [ 0.0610,  0.1280, -0.1187,  ...,  0.0539, -0.0765,  0.0442],
        ...,
        [-0.0360, -0.1621, -0.1103,  ...,  0.0374, -0.1892,  0.2257],
        [ 0.1527,  0.1821, -0.0806,  ..., -0.0144, -0.0022, -0.0949],
        [ 0.1373, -0.0290,  0.0041,  ...,  0.0972,  0.0569, -0.0349]])
tensor([[ 0.0296, -0.1855,  0.0214,  ...,  0.0227, -0.1054, -0.0048],
        [-0.0134, -0.0675,  0.1519,  ...,  0.1578,  0.0332, -0.1832],
        [ 0.0668,  0.1156, -0.1055,  ...,  0.0471, -0.0567,  0.0883],
        ...,
        [-0.0402, -0.1335, -0.1195,  ...,  0.0189, -0.1975,  0.2071],
        [ 0.1710,  0.1729, -0.0898,  ..., -0.0021,  0.0254, -0.1036],
        [ 0.1125, -0.0343,  0.0531,  ...,  0.1408,  0.0457,  0.0017]])
##########################################################
decoder.blks.block0.attention1.W_k.weight shape: torch.Size([64, 64])
tensor([[ 0.1067,  0.0096, -0.0129,  ..., -0.0602,  0.2421, -0.0081],
        [-0.0430, -0.0027, -0.1723,  ...,  0.1452, -0.0060, -0.0616],
        [ 0.2073, -0.0344, -0.1773,  ...,  0.1923,  0.1822, -0.0058],
        ...,
        [ 0.0277,  0.0151,  0.1543,  ..., -0.0009,  0.2259, -0.2464],
        [ 0.2577, -0.0195,  0.2001,  ...,  0.0956, -0.2277, -0.1197],
        [ 0.1333,  0.0398,  0.1168,  ...,  0.2322,  0.2014, -0.1090]])
tensor([[ 0.1309, -0.0137, -0.0490,  ..., -0.0641,  0.2199, -0.0150],
        [-0.0548, -0.0234, -0.2003,  ...,  0.1449,  0.0021, -0.0315],
        [ 0.1980, -0.0397, -0.1539,  ...,  0.1769,  0.2018, -0.0197],
        ...,
        [ 0.0275,  0.0071,  0.1148,  ..., -0.0009,  0.2006, -0.2411],
        [ 0.2606, -0.0379,  0.2300,  ...,  0.1213, -0.2072, -0.1286],
        [ 0.1123,  0.0583,  0.1151,  ...,  0.2559,  0.2329, -0.0768]])
##########################################################
decoder.blks.block0.attention1.W_v.weight shape: torch.Size([64, 64])
tensor([[-1.6356e-02,  3.8338e-02,  4.7985e-02,  ..., -3.1455e-02,
         -2.7366e-02, -7.7318e-02],
        [-2.0370e-02, -4.0545e-05, -3.1331e-02,  ...,  7.6763e-02,
          3.2302e-03, -1.4689e-02],
        [-8.3832e-02,  4.4875e-02,  2.2266e-02,  ...,  2.5394e-02,
         -3.2125e-02,  8.5604e-03],
        ...,
        [-1.5864e-02,  8.2705e-02,  9.3251e-03,  ...,  6.3184e-02,
         -3.7414e-02,  1.1953e-02],
        [ 2.0629e-02,  2.8281e-02,  3.2674e-02,  ...,  8.6408e-03,
          3.5655e-02,  6.4103e-03],
        [ 2.0617e-03, -4.0219e-02, -2.9489e-02,  ...,  8.9658e-02,
         -4.3837e-02, -2.6247e-02]])
tensor([[ 0.0174,  0.0229,  0.0030,  ..., -0.0740,  0.0176, -0.1003],
        [-0.0218,  0.0439, -0.0369,  ...,  0.0908, -0.0001, -0.0137],
        [-0.0790,  0.0209,  0.0650,  ...,  0.0360, -0.0593,  0.0106],
        ...,
        [-0.0256,  0.0343,  0.0384,  ...,  0.1225, -0.0374,  0.0275],
        [-0.0076,  0.0092,  0.0636,  ..., -0.0003,  0.0007,  0.0029],
        [-0.0730, -0.0029, -0.0270,  ...,  0.0772, -0.0846, -0.0208]])
##########################################################
decoder.blks.block0.attention1.W_o.weight shape: torch.Size([64, 64])
tensor([[-0.0752,  0.0829,  0.0150,  ...,  0.0612, -0.0127, -0.0353],
        [ 0.0179, -0.0519,  0.0719,  ...,  0.0775,  0.0312,  0.0267],
        [-0.0328,  0.0616, -0.0687,  ..., -0.0281, -0.0073,  0.0126],
        ...,
        [ 0.0022,  0.0638, -0.0918,  ...,  0.0045,  0.0084,  0.0253],
        [-0.0298,  0.0383, -0.0271,  ...,  0.0002, -0.0516,  0.0608],
        [-0.0366,  0.0094, -0.0205,  ..., -0.0311,  0.0160, -0.0082]])
tensor([[-0.0583,  0.1269, -0.0002,  ...,  0.0522,  0.0307, -0.0460],
        [ 0.0288, -0.0149,  0.0808,  ...,  0.1145, -0.0209, -0.0665],
        [-0.0225,  0.0036, -0.0924,  ..., -0.0232, -0.0493,  0.0148],
        ...,
        [ 0.0033,  0.0610, -0.0550,  ..., -0.0106,  0.0586,  0.0731],
        [-0.0401,  0.0430,  0.0023,  ..., -0.0112, -0.0372,  0.0314],
        [-0.0636,  0.0875, -0.0197,  ..., -0.0212,  0.0301, -0.0254]])
##########################################################
decoder.blks.block0.addnorm1.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0258, 1.0287, 1.0332, 1.0616, 1.0060, 1.0826, 0.9773, 1.0306, 0.9881,
        1.0535, 0.9906, 1.0151, 1.0051, 1.0135, 1.0055, 1.0066, 0.9854, 0.9654,
        1.0370, 1.0190, 0.9580, 0.9955, 1.0089, 0.9779, 0.9988, 1.0194, 0.9929,
        0.9951, 0.9989, 0.9916, 0.9579, 1.0096, 0.9876, 1.0005, 0.9486, 1.0307,
        0.9993, 1.0030, 1.0045, 1.0178, 1.0002, 1.0011, 1.0060, 0.9953, 0.9658,
        0.9744, 0.9894, 0.9652, 0.9675, 1.0120, 1.0061, 0.9954, 0.9970, 1.0074,
        0.9902, 1.0379, 0.9916, 0.9893, 1.0163, 1.0139, 0.9872, 0.9923, 0.9960,
        0.9882])
##########################################################
decoder.blks.block0.addnorm1.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 0.0008,  0.0116, -0.0090, -0.0079, -0.0099, -0.0048,  0.0143, -0.0126,
        -0.0125, -0.0202,  0.0171,  0.0017,  0.0116, -0.0356, -0.0090,  0.0174,
        -0.0094,  0.0096, -0.0116,  0.0034,  0.0260, -0.0058,  0.0268,  0.0078,
        -0.0128, -0.0069, -0.0162,  0.0047,  0.0027,  0.0233, -0.0105,  0.0267,
        -0.0321,  0.0340,  0.0112, -0.0194, -0.0086, -0.0261, -0.0063,  0.0187,
        -0.0129, -0.0057,  0.0171, -0.0227,  0.0002,  0.0254,  0.0024,  0.0155,
         0.0044, -0.0070, -0.0059, -0.0174,  0.0102,  0.0071, -0.0197, -0.0090,
         0.0580, -0.0018,  0.0228, -0.0172, -0.0044, -0.0077,  0.0143, -0.0133])
##########################################################
decoder.blks.block0.attention2.W_q.weight shape: torch.Size([64, 64])
tensor([[-0.2203,  0.2860, -0.0306,  ...,  0.0197, -0.0822,  0.0068],
        [-0.0119, -0.0196, -0.0630,  ...,  0.1594, -0.0175,  0.2550],
        [ 0.0125,  0.0690, -0.1068,  ...,  0.3223, -0.1779,  0.0366],
        ...,
        [ 0.0951,  0.0501,  0.1567,  ..., -0.0885, -0.1453, -0.1294],
        [-0.0859, -0.2320, -0.1670,  ..., -0.0309, -0.1635, -0.2406],
        [-0.0989,  0.0764,  0.0382,  ..., -0.0705, -0.1573,  0.0047]])
tensor([[-0.1956,  0.2956, -0.0682,  ...,  0.0205, -0.0480, -0.0339],
        [-0.0234, -0.0286, -0.0172,  ...,  0.1919, -0.0220,  0.2296],
        [-0.0364,  0.1150, -0.1745,  ...,  0.3025, -0.1588, -0.0184],
        ...,
        [ 0.1181,  0.0129,  0.1497,  ..., -0.0848, -0.1529, -0.1538],
        [-0.1372, -0.2705, -0.0859,  ..., -0.0248, -0.1924, -0.2943],
        [-0.1576,  0.0647, -0.0119,  ..., -0.0654, -0.1672,  0.0361]])
##########################################################
decoder.blks.block0.attention2.W_k.weight shape: torch.Size([64, 64])
tensor([[ 0.3377,  0.0783, -0.1297,  ..., -0.0915,  0.2951,  0.1414],
        [ 0.0313,  0.2241, -0.0518,  ...,  0.0164, -0.0874, -0.1757],
        [-0.0776,  0.1274, -0.2868,  ...,  0.1870, -0.1350,  0.1363],
        ...,
        [-0.0371,  0.1136,  0.1168,  ..., -0.0268, -0.0983, -0.1892],
        [ 0.3049, -0.1323, -0.2301,  ...,  0.1022,  0.0925, -0.3393],
        [-0.3464,  0.0464, -0.0160,  ..., -0.0656, -0.0104,  0.0503]])
tensor([[ 0.3479,  0.1111, -0.1887,  ..., -0.1003,  0.2891,  0.1215],
        [ 0.0418,  0.2632, -0.0321,  ..., -0.0352, -0.1352, -0.2185],
        [-0.1079,  0.1211, -0.2137,  ...,  0.1938, -0.1420,  0.1343],
        ...,
        [-0.0371,  0.0991,  0.0843,  ..., -0.0480, -0.0350, -0.1927],
        [ 0.2638, -0.1309, -0.2339,  ...,  0.1424,  0.0948, -0.3029],
        [-0.3524,  0.0192,  0.0157,  ..., -0.0389,  0.0434,  0.0738]])
##########################################################
decoder.blks.block0.attention2.W_v.weight shape: torch.Size([64, 64])
tensor([[ 0.0521,  0.0448, -0.0061,  ...,  0.0177,  0.0174, -0.0430],
        [ 0.0231,  0.0178, -0.0788,  ..., -0.0584,  0.0093, -0.0426],
        [-0.0274,  0.0465, -0.0069,  ...,  0.0298, -0.0749, -0.0067],
        ...,
        [-0.0548,  0.0589,  0.0420,  ..., -0.0055, -0.0520,  0.0376],
        [-0.0087, -0.0167,  0.0426,  ..., -0.0510,  0.0139, -0.0841],
        [-0.0067, -0.0015, -0.0477,  ...,  0.0021, -0.0360,  0.0037]])
tensor([[ 0.0772,  0.0470,  0.0286,  ..., -0.0142, -0.0102, -0.0694],
        [ 0.0535,  0.0333, -0.1085,  ..., -0.0773, -0.0228, -0.0677],
        [-0.0605,  0.0476,  0.0157,  ...,  0.0751, -0.0603,  0.0430],
        ...,
        [-0.0767,  0.0344,  0.0375,  ...,  0.0501, -0.0315,  0.0999],
        [-0.0207, -0.0471,  0.0075,  ..., -0.0292,  0.0629, -0.0542],
        [-0.0513,  0.0011, -0.0417,  ...,  0.0046, -0.0411,  0.0262]])
##########################################################
decoder.blks.block0.attention2.W_o.weight shape: torch.Size([64, 64])
tensor([[ 0.0477, -0.0216,  0.0214,  ..., -0.0439, -0.0005,  0.0573],
        [ 0.0223,  0.0232, -0.0159,  ...,  0.0319,  0.0927,  0.0617],
        [-0.0868, -0.0308,  0.0242,  ...,  0.0487,  0.0646, -0.0124],
        ...,
        [-0.0318, -0.0512, -0.0126,  ...,  0.0399,  0.0453, -0.0295],
        [ 0.0078, -0.0286, -0.0064,  ...,  0.0043, -0.0056,  0.0893],
        [-0.0191,  0.0677, -0.0148,  ..., -0.0108, -0.0145,  0.0312]])
tensor([[ 0.0454, -0.0487,  0.0478,  ..., -0.0782, -0.0481,  0.0206],
        [ 0.0410,  0.0924, -0.0627,  ...,  0.0610,  0.1330,  0.0781],
        [-0.0876, -0.0170,  0.0104,  ...,  0.0623,  0.0532,  0.0063],
        ...,
        [-0.0394, -0.0644,  0.0190,  ...,  0.0752,  0.0128, -0.0201],
        [ 0.0313,  0.0268, -0.0308,  ...,  0.0094, -0.0299,  0.0936],
        [-0.0149,  0.1051, -0.0302,  ...,  0.0033, -0.0513,  0.0351]])
##########################################################
decoder.blks.block0.addnorm2.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0111, 1.0305, 1.0176, 1.0490, 1.0020, 1.0797, 0.9699, 1.0328, 0.9860,
        1.0382, 0.9891, 1.0192, 0.9993, 1.0200, 1.0053, 1.0106, 0.9827, 0.9741,
        1.0334, 1.0152, 0.9550, 0.9869, 1.0131, 0.9797, 1.0016, 1.0200, 0.9942,
        0.9929, 0.9945, 0.9861, 0.9637, 1.0080, 0.9966, 0.9941, 0.9511, 1.0240,
        1.0041, 1.0027, 1.0055, 1.0227, 1.0092, 0.9984, 1.0094, 0.9950, 0.9626,
        0.9759, 0.9864, 0.9760, 0.9888, 1.0139, 1.0105, 0.9962, 1.0014, 1.0038,
        0.9718, 1.0359, 0.9869, 1.0034, 1.0110, 1.0159, 0.9899, 0.9963, 0.9987,
        0.9836])
##########################################################
decoder.blks.block0.addnorm2.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 0.0036,  0.0090, -0.0076, -0.0002, -0.0118, -0.0034,  0.0178, -0.0109,
        -0.0123, -0.0128,  0.0187,  0.0025,  0.0075, -0.0326, -0.0057,  0.0098,
        -0.0047,  0.0052, -0.0129,  0.0012,  0.0277, -0.0122,  0.0228,  0.0076,
        -0.0152, -0.0104, -0.0141,  0.0044,  0.0038,  0.0216, -0.0130,  0.0276,
        -0.0330,  0.0277,  0.0122, -0.0153, -0.0098, -0.0276, -0.0014,  0.0170,
        -0.0106, -0.0068,  0.0151, -0.0246, -0.0073,  0.0257,  0.0008,  0.0140,
         0.0071, -0.0087, -0.0060, -0.0121,  0.0130,  0.0071, -0.0226, -0.0073,
         0.0507, -0.0014,  0.0206, -0.0166, -0.0029, -0.0041,  0.0132, -0.0071])
##########################################################
decoder.blks.block0.ffn.dense1.weight shape: torch.Size([32, 64])
tensor([[ 0.0744,  0.1286,  0.0330,  ...,  0.0857, -0.0249,  0.0179],
        [ 0.0067,  0.0919,  0.0265,  ...,  0.0585, -0.0648,  0.0059],
        [-0.0302, -0.0009, -0.0026,  ..., -0.0479,  0.0889, -0.0135],
        ...,
        [-0.0038,  0.0212,  0.0009,  ..., -0.1007,  0.0358,  0.0011],
        [-0.1194,  0.0759,  0.0154,  ...,  0.0191, -0.0710, -0.0248],
        [ 0.0529,  0.0277,  0.0527,  ...,  0.0097, -0.0603, -0.0979]])
tensor([[ 0.0913,  0.1464, -0.0295,  ...,  0.0476, -0.0041,  0.0728],
        [-0.0411,  0.0695,  0.1022,  ...,  0.1025, -0.0812,  0.0306],
        [-0.0741,  0.0246, -0.0004,  ..., -0.0511,  0.0771, -0.0035],
        ...,
        [ 0.0242,  0.0428, -0.0032,  ..., -0.1527,  0.0089, -0.0632],
        [-0.1394,  0.0993, -0.0950,  ...,  0.0399, -0.0653, -0.0090],
        [ 0.0066,  0.0363,  0.1278,  ..., -0.0054, -0.0791, -0.1138]])
##########################################################
decoder.blks.block0.ffn.dense1.bias shape: torch.Size([32])
tensor([ 0.0703, -0.0290,  0.0130,  0.1202, -0.0855, -0.0090,  0.0535, -0.0296,
         0.0781, -0.0260, -0.0435, -0.0110, -0.0704, -0.0696,  0.0559, -0.0854,
        -0.1116, -0.0176,  0.0648,  0.0061,  0.1212,  0.0892,  0.1128,  0.0900,
         0.0432,  0.0064, -0.0670, -0.0291, -0.0248, -0.0100,  0.0557, -0.0482])
tensor([ 0.0888, -0.0166,  0.0530,  0.1056, -0.0637, -0.0033,  0.0516, -0.0087,
         0.0898, -0.0055, -0.0287, -0.0270, -0.0449, -0.0534,  0.0701, -0.0822,
        -0.0344, -0.0002,  0.0882,  0.0016,  0.1325,  0.1284,  0.1075,  0.1075,
         0.0473,  0.0182, -0.0526, -0.0251,  0.0419, -0.0126,  0.0795, -0.0235])
##########################################################
decoder.blks.block0.ffn.dense2.weight shape: torch.Size([64, 32])
tensor([[-0.0143, -0.1207, -0.0583,  ..., -0.0331,  0.0426,  0.0043],
        [ 0.0128,  0.0272, -0.0861,  ...,  0.0544, -0.0507, -0.0731],
        [-0.0354,  0.0376,  0.0211,  ...,  0.0113, -0.0465, -0.0152],
        ...,
        [ 0.0003, -0.0319,  0.0598,  ..., -0.0679, -0.0264, -0.0740],
        [-0.0405,  0.0089,  0.0133,  ..., -0.0630, -0.0131,  0.0460],
        [-0.0259,  0.0017,  0.0091,  ...,  0.0443, -0.0430, -0.0344]])
tensor([[-0.0362, -0.1476, -0.0069,  ..., -0.0390,  0.0231,  0.0191],
        [ 0.0221,  0.0826, -0.1211,  ...,  0.0645, -0.0226, -0.1218],
        [-0.0555,  0.0075, -0.0130,  ..., -0.0304, -0.0619, -0.0319],
        ...,
        [-0.0123, -0.0676,  0.0793,  ..., -0.1104, -0.0629, -0.1057],
        [ 0.0045,  0.0485,  0.0260,  ..., -0.0281,  0.0146,  0.0676],
        [-0.0746,  0.0338, -0.0010,  ..., -0.0018, -0.0704, -0.0655]])
##########################################################
decoder.blks.block0.ffn.dense2.bias shape: torch.Size([64])
tensor([ 0.0754, -0.0017, -0.0552, -0.0782, -0.1036,  0.0787,  0.1611,  0.0608,
        -0.0789,  0.0581, -0.1238, -0.1158, -0.1766, -0.1431,  0.1042,  0.0457,
        -0.0456, -0.1350, -0.0302,  0.0634,  0.1214, -0.0759, -0.1152, -0.1740,
        -0.1321, -0.0351, -0.0580, -0.0916,  0.0690,  0.0035,  0.0448,  0.1470,
        -0.0355,  0.0653, -0.1287, -0.1310, -0.0282, -0.1546,  0.0691, -0.0159,
         0.1010,  0.0060, -0.0765,  0.1441,  0.1126, -0.1125, -0.1708,  0.1652,
         0.0866, -0.0299, -0.1257, -0.0123,  0.0031,  0.1328, -0.0471,  0.1521,
         0.1029, -0.0789, -0.0800,  0.1654,  0.0385, -0.0891,  0.1721,  0.0006])
tensor([ 0.0787,  0.0075, -0.0558, -0.0764, -0.1104,  0.0735,  0.1799,  0.0502,
        -0.0889,  0.0417, -0.1041, -0.1116, -0.1670, -0.1716,  0.0999,  0.0543,
        -0.0477, -0.1292, -0.0403,  0.0583,  0.1409, -0.0852, -0.0930, -0.1592,
        -0.1439, -0.0453, -0.0703, -0.0874,  0.0705,  0.0263,  0.0296,  0.1710,
        -0.0658,  0.0908, -0.1176, -0.1475, -0.0383, -0.1793,  0.0645, -0.0039,
         0.0862, -0.0051, -0.0669,  0.1185,  0.1039, -0.0895, -0.1651,  0.1724,
         0.0894, -0.0421, -0.1282, -0.0179,  0.0140,  0.1349, -0.0714,  0.1383,
         0.1472, -0.0793, -0.0617,  0.1444,  0.0347, -0.0868,  0.1837, -0.0066])
##########################################################
decoder.blks.block0.addnorm3.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0200, 1.0162, 1.0224, 1.0480, 1.0044, 1.0794, 0.9948, 1.0262, 0.9900,
        1.0687, 0.9867, 1.0030, 0.9618, 1.0230, 1.0011, 1.0031, 0.9842, 0.9669,
        1.0396, 1.0148, 0.9656, 0.9849, 1.0088, 0.9769, 1.0087, 1.0106, 0.9816,
        0.9941, 0.9965, 0.9874, 0.9914, 0.9787, 0.9915, 0.9967, 0.9455, 1.0196,
        1.0014, 0.9643, 0.9964, 1.0215, 1.0090, 0.9940, 1.0178, 0.9758, 0.9606,
        0.9694, 0.9838, 0.9858, 1.0026, 1.0182, 1.0127, 1.0031, 0.9927, 1.0076,
        0.9831, 1.0243, 1.0044, 1.0072, 1.0116, 1.0081, 0.9894, 1.0042, 0.9843,
        0.9940])
##########################################################
decoder.blks.block0.addnorm3.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 0.0107,  0.0015, -0.0079,  0.0043, -0.0217, -0.0026,  0.0196, -0.0013,
        -0.0136, -0.0110,  0.0192,  0.0085, -0.0104, -0.0224, -0.0094,  0.0046,
         0.0032,  0.0159, -0.0268,  0.0049,  0.0304, -0.0076,  0.0251,  0.0112,
        -0.0147, -0.0027, -0.0066,  0.0021,  0.0083,  0.0186,  0.0002,  0.0079,
        -0.0230,  0.0232, -0.0019, -0.0145, -0.0033, -0.0051, -0.0017,  0.0218,
        -0.0054, -0.0054,  0.0250, -0.0124,  0.0069,  0.0197,  0.0122,  0.0072,
         0.0094, -0.0067, -0.0080, -0.0171,  0.0183,  0.0124, -0.0164, -0.0103,
         0.0641, -0.0067,  0.0196, -0.0199,  0.0015, -0.0105,  0.0080, -0.0083])
##########################################################
decoder.blks.block1.attention1.W_q.weight shape: torch.Size([64, 64])
tensor([[-0.1652, -0.1521,  0.0884,  ..., -0.0691, -0.0256, -0.0906],
        [-0.1212,  0.0132, -0.0783,  ...,  0.0083, -0.0903,  0.0686],
        [ 0.1342,  0.0428, -0.2246,  ..., -0.1444,  0.1235, -0.2041],
        ...,
        [-0.0416,  0.1046,  0.0372,  ...,  0.1199, -0.0977,  0.0055],
        [ 0.2035,  0.2485,  0.0947,  ...,  0.1078,  0.0713, -0.0323],
        [-0.0941,  0.0484, -0.2820,  ...,  0.2568,  0.0437, -0.0233]])
tensor([[-0.1207, -0.2329, -0.0067,  ..., -0.0247,  0.0054, -0.0727],
        [-0.1178, -0.0023, -0.0209,  ...,  0.0140, -0.0677,  0.0620],
        [ 0.2633,  0.0288, -0.1799,  ..., -0.1538,  0.1486, -0.2635],
        ...,
        [-0.0732,  0.0691,  0.0590,  ...,  0.1204, -0.1159,  0.0006],
        [ 0.2127,  0.2230,  0.1720,  ...,  0.1646,  0.0911, -0.0006],
        [-0.0467,  0.0413, -0.2885,  ...,  0.2902,  0.0909,  0.0152]])
##########################################################
decoder.blks.block1.attention1.W_k.weight shape: torch.Size([64, 64])
tensor([[-0.0797,  0.0013,  0.0229,  ..., -0.2019,  0.1812, -0.1899],
        [ 0.1390, -0.0846,  0.0802,  ..., -0.1400,  0.0971,  0.2102],
        [ 0.0570, -0.0649, -0.1356,  ...,  0.0051,  0.1244,  0.0771],
        ...,
        [ 0.1436,  0.1018, -0.1855,  ..., -0.1138, -0.1957,  0.0144],
        [-0.2297, -0.0980,  0.1446,  ..., -0.0203,  0.0741,  0.1209],
        [-0.1665, -0.1771, -0.0827,  ..., -0.0087,  0.1391,  0.0242]])
tensor([[-0.0493,  0.0313,  0.0259,  ..., -0.2675,  0.1483, -0.2644],
        [ 0.1600, -0.0959,  0.0869,  ..., -0.1927,  0.1331,  0.1734],
        [ 0.0186, -0.0456, -0.1181,  ...,  0.0237,  0.0577,  0.0643],
        ...,
        [ 0.1197,  0.0789, -0.1941,  ..., -0.1696, -0.2081, -0.0088],
        [-0.2431, -0.0589,  0.0932,  ..., -0.0127,  0.1065,  0.0912],
        [-0.1414, -0.1610, -0.1102,  ...,  0.0016,  0.1490,  0.0058]])
##########################################################
decoder.blks.block1.attention1.W_v.weight shape: torch.Size([64, 64])
tensor([[ 0.0119, -0.0073, -0.0140,  ...,  0.0049,  0.0416, -0.0261],
        [-0.0431,  0.0143,  0.0116,  ..., -0.0280, -0.0481,  0.0371],
        [-0.0001, -0.0013,  0.0245,  ...,  0.0184, -0.0981, -0.0338],
        ...,
        [ 0.0396, -0.0800,  0.0803,  ...,  0.0406,  0.0374,  0.0195],
        [ 0.0005,  0.0363,  0.0527,  ..., -0.0757,  0.0246, -0.0338],
        [ 0.0500, -0.0567,  0.0309,  ..., -0.0386, -0.0234,  0.0368]])
tensor([[ 0.0400, -0.0155, -0.0420,  ..., -0.0052,  0.0671, -0.0632],
        [-0.1096,  0.0926, -0.0256,  ..., -0.0120, -0.0252,  0.0571],
        [ 0.0605, -0.0418,  0.1144,  ...,  0.0575, -0.1141, -0.0495],
        ...,
        [ 0.0660, -0.0357,  0.0527,  ...,  0.0451,  0.1090,  0.0696],
        [ 0.0330,  0.0727, -0.0051,  ..., -0.0582,  0.1064, -0.0079],
        [ 0.1962, -0.0307,  0.0164,  ..., -0.0719, -0.0323,  0.0164]])
##########################################################
decoder.blks.block1.attention1.W_o.weight shape: torch.Size([64, 64])
tensor([[ 0.0109,  0.0007, -0.0785,  ...,  0.0035, -0.0946, -0.0032],
        [ 0.0207, -0.0588, -0.0025,  ..., -0.0069,  0.0424,  0.0285],
        [ 0.0029, -0.0363,  0.0003,  ..., -0.0532, -0.0528, -0.0259],
        ...,
        [-0.0106, -0.0297, -0.0398,  ..., -0.0361,  0.0234,  0.0127],
        [ 0.0230, -0.0112, -0.1005,  ...,  0.0146, -0.0608,  0.0034],
        [ 0.0008,  0.0004, -0.0137,  ..., -0.0409,  0.0676, -0.0244]])
tensor([[ 0.0089, -0.0134, -0.0752,  ..., -0.0443, -0.1532, -0.0015],
        [ 0.0765,  0.0026,  0.0061,  ..., -0.0055,  0.0412,  0.0177],
        [ 0.0202, -0.0698,  0.0250,  ..., -0.0456, -0.0249,  0.0048],
        ...,
        [-0.0151, -0.0931,  0.0172,  ..., -0.1093, -0.0524,  0.0226],
        [ 0.1249,  0.0563, -0.1840,  ...,  0.0392, -0.0192, -0.0380],
        [-0.0296, -0.0193, -0.0013,  ..., -0.0936, -0.0335, -0.0040]])
##########################################################
decoder.blks.block1.addnorm1.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0013, 1.0184, 1.0107, 1.0335, 1.0110, 1.0627, 1.0019, 1.0129, 0.9912,
        1.0465, 1.0086, 1.0054, 0.9910, 1.0228, 0.9938, 1.0372, 0.9992, 0.9922,
        1.0121, 1.0259, 1.0045, 1.0039, 1.0078, 0.9828, 1.0119, 1.0009, 0.9724,
        0.9832, 1.0196, 0.9922, 0.9776, 0.9838, 0.9984, 0.9985, 0.9913, 1.0079,
        0.9883, 0.9919, 0.9852, 1.0346, 1.0216, 0.9799, 1.0199, 0.9938, 0.9631,
        0.9951, 0.9985, 0.9752, 1.0160, 1.0190, 1.0214, 1.0092, 0.9877, 1.0189,
        1.0107, 1.0481, 0.9873, 1.0152, 1.0043, 1.0205, 0.9775, 1.0082, 0.9932,
        0.9988])
##########################################################
decoder.blks.block1.addnorm1.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 0.0025,  0.0090, -0.0113, -0.0047, -0.0049, -0.0071,  0.0130, -0.0056,
        -0.0143, -0.0262,  0.0134, -0.0003,  0.0162, -0.0206, -0.0211,  0.0032,
        -0.0041,  0.0130, -0.0327,  0.0026,  0.0122, -0.0095,  0.0306,  0.0167,
        -0.0072, -0.0094, -0.0082, -0.0033,  0.0056,  0.0226, -0.0097,  0.0099,
        -0.0206,  0.0198, -0.0010, -0.0033,  0.0009, -0.0074,  0.0017,  0.0287,
        -0.0119, -0.0013,  0.0131, -0.0087,  0.0025,  0.0183,  0.0120,  0.0076,
         0.0120, -0.0053,  0.0003, -0.0012,  0.0129,  0.0077, -0.0254, -0.0036,
         0.0224, -0.0064,  0.0093, -0.0090,  0.0002, -0.0169,  0.0048, -0.0081])
##########################################################
decoder.blks.block1.attention2.W_q.weight shape: torch.Size([64, 64])
tensor([[-0.0874, -0.1614, -0.1782,  ..., -0.3261, -0.0716,  0.0854],
        [-0.0125, -0.1108,  0.0035,  ..., -0.0338,  0.1557,  0.1777],
        [-0.0122,  0.1830,  0.2023,  ...,  0.2565, -0.0278,  0.1685],
        ...,
        [-0.0197,  0.0709,  0.0923,  ...,  0.0397, -0.1386, -0.0775],
        [-0.0330,  0.0141,  0.0318,  ..., -0.1781, -0.0946, -0.0190],
        [-0.0814, -0.1084, -0.0442,  ..., -0.0892,  0.0513, -0.0735]])
tensor([[ 0.0405, -0.1507, -0.2656,  ..., -0.3193, -0.0548,  0.0786],
        [ 0.0298, -0.0821, -0.0102,  ...,  0.0225,  0.1968,  0.1960],
        [-0.0066,  0.2438,  0.2468,  ...,  0.2635, -0.0053,  0.1667],
        ...,
        [-0.0355,  0.0911,  0.1023,  ...,  0.0530, -0.1793, -0.0909],
        [-0.0673,  0.0057,  0.0491,  ..., -0.1833, -0.1148, -0.0024],
        [-0.0087, -0.1310, -0.0725,  ..., -0.0664,  0.0404, -0.0466]])
##########################################################
decoder.blks.block1.attention2.W_k.weight shape: torch.Size([64, 64])
tensor([[ 0.0475, -0.0681,  0.1691,  ...,  0.1691, -0.0716, -0.0649],
        [ 0.0017, -0.0861,  0.1096,  ...,  0.0594, -0.1458, -0.2816],
        [ 0.1049,  0.0368,  0.0702,  ...,  0.0429,  0.0278, -0.0859],
        ...,
        [-0.0630,  0.0897, -0.0703,  ..., -0.0382, -0.0922, -0.0613],
        [ 0.1598, -0.1509,  0.0147,  ..., -0.1783, -0.2125,  0.0498],
        [-0.0762, -0.0975, -0.1106,  ...,  0.0845, -0.1381,  0.0070]])
tensor([[-0.0189, -0.1268,  0.2315,  ...,  0.2447, -0.0777,  0.0096],
        [ 0.0167, -0.1144,  0.1151,  ...,  0.0734, -0.1431, -0.2579],
        [ 0.1251,  0.0293,  0.0136,  ..., -0.0031,  0.0485, -0.1262],
        ...,
        [-0.0929,  0.0875, -0.1138,  ..., -0.0022, -0.0536, -0.0327],
        [ 0.1869, -0.1574,  0.0148,  ..., -0.1975, -0.2633,  0.0357],
        [-0.1215, -0.1164, -0.0646,  ...,  0.1040, -0.1327,  0.0472]])
##########################################################
decoder.blks.block1.attention2.W_v.weight shape: torch.Size([64, 64])
tensor([[-0.0210, -0.0030,  0.0167,  ..., -0.0479,  0.0606,  0.0021],
        [-0.0039, -0.0420,  0.0157,  ..., -0.0528,  0.0254,  0.0298],
        [ 0.0147,  0.0268, -0.0044,  ..., -0.0369,  0.0192, -0.0185],
        ...,
        [ 0.0624,  0.0148,  0.0456,  ...,  0.0095, -0.0456,  0.0423],
        [ 0.0062, -0.0009, -0.0139,  ...,  0.0012, -0.0502,  0.0522],
        [-0.0380, -0.0014,  0.0279,  ..., -0.0202,  0.0671, -0.0123]])
tensor([[ 0.0006,  0.0193,  0.0493,  ..., -0.0563,  0.0328,  0.0073],
        [-0.0324, -0.0347,  0.0611,  ..., -0.0388,  0.0253,  0.0586],
        [ 0.0236,  0.0049, -0.0257,  ..., -0.0334,  0.0878, -0.0289],
        ...,
        [ 0.1040,  0.0278,  0.0561,  ..., -0.0457, -0.0679,  0.0375],
        [ 0.0352,  0.0261, -0.0213,  ..., -0.0333, -0.0723,  0.0218],
        [-0.0609, -0.0219,  0.0250,  ...,  0.0038,  0.0703, -0.0265]])
##########################################################
decoder.blks.block1.attention2.W_o.weight shape: torch.Size([64, 64])
tensor([[-0.0122, -0.0091,  0.0361,  ...,  0.0439, -0.0857,  0.0472],
        [ 0.0046, -0.0522, -0.0032,  ..., -0.0165,  0.0833, -0.0692],
        [-0.1049,  0.0344, -0.0022,  ...,  0.0532,  0.0312,  0.0890],
        ...,
        [ 0.0454, -0.0394, -0.0074,  ..., -0.0510,  0.0071, -0.0281],
        [ 0.0007,  0.0358,  0.0137,  ..., -0.0062, -0.0225, -0.0288],
        [-0.0274, -0.0130,  0.0528,  ...,  0.0400,  0.0666,  0.0252]])
tensor([[ 0.0090,  0.0149,  0.0079,  ...,  0.0381, -0.0792,  0.0262],
        [-0.0636, -0.0788,  0.0515,  ...,  0.0007,  0.1065, -0.0677],
        [-0.1354,  0.0671, -0.0052,  ...,  0.0634,  0.0411,  0.0933],
        ...,
        [-0.0359, -0.0686,  0.0341,  ...,  0.0032,  0.0038, -0.1321],
        [ 0.0107,  0.0040,  0.0018,  ..., -0.0691,  0.0230,  0.0372],
        [-0.0352,  0.0481,  0.0515,  ...,  0.0647,  0.0855, -0.0056]])
##########################################################
decoder.blks.block1.addnorm2.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([0.9728, 1.0140, 1.0173, 1.0211, 1.0054, 1.0537, 1.0031, 1.0040, 0.9928,
        1.0526, 1.0055, 1.0009, 0.9878, 1.0184, 0.9981, 1.0329, 0.9909, 0.9992,
        1.0082, 1.0199, 0.9966, 1.0047, 1.0070, 0.9788, 1.0109, 0.9965, 0.9738,
        0.9780, 1.0102, 0.9887, 0.9780, 0.9906, 1.0100, 1.0037, 0.9871, 1.0151,
        0.9810, 0.9864, 0.9953, 1.0352, 1.0247, 0.9757, 1.0144, 0.9894, 0.9620,
        0.9738, 0.9978, 0.9900, 1.0124, 1.0228, 1.0165, 1.0169, 0.9932, 1.0076,
        1.0167, 1.0469, 0.9945, 1.0161, 1.0026, 1.0265, 0.9837, 1.0151, 0.9838,
        0.9994])
##########################################################
decoder.blks.block1.addnorm2.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-0.0038,  0.0154, -0.0125, -0.0066,  0.0009, -0.0074,  0.0130, -0.0088,
        -0.0166, -0.0283,  0.0124,  0.0041,  0.0122, -0.0207, -0.0187, -0.0005,
         0.0006,  0.0127, -0.0373,  0.0004,  0.0050, -0.0055,  0.0308,  0.0182,
        -0.0061, -0.0092, -0.0063, -0.0070,  0.0046,  0.0227, -0.0122,  0.0116,
        -0.0212,  0.0211, -0.0009, -0.0039,  0.0033, -0.0078,  0.0037,  0.0205,
        -0.0121,  0.0010,  0.0009, -0.0076, -0.0023,  0.0146,  0.0109,  0.0162,
         0.0100, -0.0046, -0.0020, -0.0007,  0.0116,  0.0071, -0.0227, -0.0073,
         0.0120, -0.0094,  0.0084,  0.0019, -0.0016, -0.0139,  0.0049, -0.0140])
##########################################################
decoder.blks.block1.ffn.dense1.weight shape: torch.Size([32, 64])
tensor([[-0.0348,  0.0123, -0.0038,  ..., -0.0342, -0.0188, -0.0754],
        [-0.0890,  0.0007, -0.1110,  ...,  0.0079, -0.0027, -0.0104],
        [ 0.0079, -0.0313,  0.0167,  ..., -0.0529,  0.1084,  0.0384],
        ...,
        [ 0.0090, -0.0263, -0.1532,  ...,  0.0319,  0.0174,  0.0682],
        [ 0.0241,  0.0132, -0.0055,  ..., -0.0797, -0.0531, -0.1001],
        [ 0.0663,  0.0378,  0.0453,  ..., -0.0264,  0.0552, -0.0119]])
tensor([[-0.0705,  0.0673,  0.0353,  ...,  0.0182, -0.0420, -0.0525],
        [-0.1158,  0.0120, -0.1773,  ..., -0.0084,  0.0100,  0.0474],
        [ 0.0126,  0.0258,  0.0630,  ..., -0.0738,  0.0805,  0.0457],
        ...,
        [ 0.0246, -0.0584, -0.2544,  ..., -0.0152,  0.0050,  0.0261],
        [ 0.0204,  0.0234, -0.0123,  ..., -0.0840, -0.0617, -0.1108],
        [ 0.0204,  0.0477,  0.0149,  ...,  0.0027,  0.0662,  0.0200]])
##########################################################
decoder.blks.block1.ffn.dense1.bias shape: torch.Size([32])
tensor([-0.0186,  0.1112, -0.1195,  0.0077,  0.0315, -0.0650, -0.0884,  0.0812,
         0.1084,  0.0006,  0.0663,  0.0574, -0.0645, -0.0409,  0.0338,  0.0193,
        -0.0692, -0.0696, -0.0033,  0.0621, -0.0469, -0.0038, -0.0504,  0.0141,
         0.0349,  0.0546,  0.0542,  0.0016, -0.0548, -0.0441,  0.1140, -0.1155])
tensor([ 0.0157,  0.0973, -0.1313,  0.0048,  0.0422, -0.0673, -0.0948,  0.0904,
         0.1213, -0.0064,  0.0574,  0.0757, -0.0689, -0.0133,  0.0511,  0.0304,
        -0.0479, -0.0671,  0.0237,  0.0797, -0.0273,  0.0085, -0.0271,  0.0255,
         0.0345,  0.0780,  0.0615,  0.0264, -0.0566, -0.0494,  0.1151, -0.0866])
##########################################################
decoder.blks.block1.ffn.dense2.weight shape: torch.Size([64, 32])
tensor([[ 0.0441,  0.0033,  0.1148,  ...,  0.0891, -0.0448, -0.0479],
        [-0.0027,  0.0433,  0.0081,  ...,  0.0553,  0.0278, -0.0646],
        [-0.0174, -0.0076, -0.0605,  ...,  0.0448, -0.0567, -0.0374],
        ...,
        [-0.0808,  0.0261, -0.0022,  ..., -0.0126,  0.0148, -0.1166],
        [ 0.0176, -0.0022,  0.0067,  ...,  0.0617, -0.0095, -0.0053],
        [ 0.0125, -0.0140, -0.0572,  ...,  0.0609, -0.0129,  0.0787]])
tensor([[ 0.0433, -0.0225,  0.1085,  ...,  0.1074, -0.0631, -0.0950],
        [ 0.0509,  0.0649,  0.0306,  ...,  0.0646,  0.0594, -0.0476],
        [ 0.0159, -0.0258, -0.0793,  ...,  0.0181, -0.0723, -0.0315],
        ...,
        [-0.0787, -0.0320, -0.0359,  ..., -0.0029, -0.0347, -0.0839],
        [-0.0056,  0.0064,  0.0400,  ...,  0.0582,  0.0174, -0.0426],
        [ 0.0844, -0.0563, -0.0612,  ...,  0.0707, -0.0562,  0.0403]])
##########################################################
decoder.blks.block1.ffn.dense2.bias shape: torch.Size([64])
tensor([-1.3169e-01,  1.1508e-01,  3.6106e-05, -1.2093e-02, -1.2293e-01,
         2.1902e-02, -1.3313e-01,  2.3889e-02,  1.4877e-01,  1.1404e-01,
        -6.4869e-03, -6.2912e-02,  1.4927e-01,  5.3300e-02, -1.1068e-01,
        -7.4528e-02, -1.2594e-01,  1.6978e-01, -1.7508e-01,  5.4441e-02,
        -9.2380e-02, -1.5362e-01,  7.8025e-02,  1.5502e-01, -1.0827e-01,
         1.4493e-01, -4.1407e-04, -1.3985e-02, -8.4905e-02,  2.5494e-02,
        -1.7260e-01, -8.9184e-02,  1.2718e-01, -1.3350e-01,  1.4841e-01,
        -5.7347e-02, -1.5875e-01, -8.1660e-02, -2.9990e-02, -5.8752e-02,
         9.0391e-02, -8.3630e-02, -1.1044e-01, -1.6792e-01,  8.6591e-03,
         1.0615e-01, -5.4752e-02,  8.7235e-02, -1.3942e-01,  7.4783e-02,
        -1.0368e-01,  5.6906e-02,  1.6671e-01,  8.1363e-03, -1.6235e-01,
        -4.0078e-02,  5.9636e-02, -1.4577e-01, -1.2979e-01,  8.5122e-02,
         4.3378e-02,  1.3271e-01, -1.1870e-01,  1.2533e-01])
tensor([-0.1355,  0.1275, -0.0125, -0.0185, -0.1162,  0.0133, -0.1152,  0.0151,
         0.1324,  0.0862,  0.0102, -0.0573,  0.1534,  0.0315, -0.1249, -0.0775,
        -0.1219,  0.1788, -0.2065,  0.0529, -0.0805, -0.1580,  0.0935,  0.1675,
        -0.1108,  0.1317, -0.0049, -0.0180, -0.0782,  0.0443, -0.1807, -0.0791,
         0.1099, -0.1085,  0.1434, -0.0597, -0.1479, -0.0898, -0.0224, -0.0411,
         0.0797, -0.0827, -0.1016, -0.1723,  0.0040,  0.1214, -0.0458,  0.1032,
        -0.1271,  0.0715, -0.1028,  0.0607,  0.1757,  0.0154, -0.1769, -0.0448,
         0.0691, -0.1508, -0.1158,  0.0798,  0.0434,  0.1164, -0.1127,  0.1142])
##########################################################
decoder.blks.block1.addnorm3.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([0.9798, 1.0080, 1.0131, 1.0309, 0.9966, 1.0508, 1.0069, 1.0149, 0.9961,
        1.0532, 1.0012, 0.9982, 0.9866, 1.0013, 0.9908, 1.0287, 1.0011, 1.0020,
        1.0237, 1.0268, 0.9990, 0.9887, 1.0117, 0.9717, 1.0063, 1.0027, 0.9932,
        0.9762, 1.0235, 0.9915, 0.9924, 0.9884, 1.0094, 1.0071, 0.9921, 1.0191,
        0.9806, 0.9907, 1.0075, 1.0382, 1.0255, 0.9748, 1.0215, 0.9928, 0.9615,
        0.9861, 1.0009, 0.9897, 1.0249, 1.0258, 1.0205, 1.0301, 1.0026, 1.0053,
        1.0310, 1.0506, 1.0000, 1.0115, 0.9944, 1.0238, 0.9950, 1.0115, 0.9603,
        1.0219])
##########################################################
decoder.blks.block1.addnorm3.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-0.0056,  0.0107, -0.0214, -0.0054,  0.0029, -0.0005,  0.0099, -0.0124,
        -0.0151, -0.0349,  0.0071, -0.0011,  0.0036, -0.0179, -0.0248, -0.0034,
        -0.0048,  0.0137, -0.0414,  0.0005,  0.0067,  0.0086,  0.0242,  0.0129,
        -0.0103, -0.0115,  0.0031, -0.0103,  0.0129,  0.0172, -0.0108,  0.0029,
        -0.0230,  0.0237,  0.0004, -0.0064,  0.0029,  0.0036, -0.0021,  0.0282,
        -0.0104, -0.0039,  0.0066, -0.0059, -0.0048,  0.0112,  0.0133,  0.0089,
         0.0102, -0.0037, -0.0063,  0.0023,  0.0157,  0.0021, -0.0240, -0.0057,
         0.0152, -0.0061,  0.0082, -0.0066,  0.0025, -0.0203, -0.0114, -0.0171])
##########################################################
decoder.blks.block2.attention1.W_q.weight shape: torch.Size([64, 64])
tensor([[ 0.0126,  0.0093,  0.1146,  ..., -0.0328,  0.2889,  0.1089],
        [ 0.1139, -0.0195, -0.1401,  ..., -0.0979,  0.0497, -0.0739],
        [-0.0537,  0.0203, -0.0013,  ..., -0.1356, -0.0491,  0.0154],
        ...,
        [ 0.1226, -0.1358, -0.1635,  ..., -0.0141, -0.0173, -0.1083],
        [-0.0324, -0.0758,  0.1439,  ...,  0.0977,  0.2005,  0.0947],
        [-0.0862,  0.1935, -0.0906,  ...,  0.1017, -0.0321, -0.0540]])
tensor([[ 0.0422,  0.0086,  0.1803,  ..., -0.0437,  0.2825,  0.1432],
        [ 0.1706,  0.0365, -0.1475,  ..., -0.0941,  0.0849, -0.0549],
        [-0.0491,  0.0266,  0.0407,  ..., -0.1596, -0.0425, -0.0435],
        ...,
        [ 0.1455, -0.1521, -0.2134,  ..., -0.0530, -0.0083, -0.1992],
        [-0.0388, -0.0957,  0.1119,  ...,  0.0517,  0.2015,  0.0754],
        [-0.1423,  0.2267, -0.0490,  ...,  0.1131, -0.0832, -0.1091]])
##########################################################
decoder.blks.block2.attention1.W_k.weight shape: torch.Size([64, 64])
tensor([[ 0.0618,  0.2285,  0.0408,  ..., -0.1909,  0.0535, -0.2130],
        [ 0.2623, -0.0395,  0.1740,  ..., -0.1568, -0.1451,  0.0247],
        [ 0.0754, -0.3363, -0.1882,  ...,  0.2151,  0.0304,  0.0945],
        ...,
        [-0.2432, -0.1342, -0.1000,  ...,  0.1018,  0.1400, -0.0659],
        [ 0.0837,  0.0948, -0.0030,  ..., -0.0220,  0.0513, -0.1014],
        [ 0.0051,  0.2902,  0.2562,  ...,  0.1105, -0.0747, -0.2549]])
tensor([[ 0.0451,  0.2362,  0.0420,  ..., -0.1386,  0.0379, -0.2623],
        [ 0.2261, -0.0813,  0.2063,  ..., -0.1445, -0.1825,  0.0011],
        [ 0.0487, -0.3091, -0.1516,  ...,  0.1679,  0.0181,  0.1115],
        ...,
        [-0.2146, -0.1594, -0.1013,  ...,  0.1148,  0.1358, -0.0503],
        [ 0.0444,  0.0759,  0.0040,  ..., -0.0447,  0.0298, -0.0603],
        [ 0.0181,  0.3478,  0.2890,  ...,  0.1376, -0.0822, -0.2620]])
##########################################################
decoder.blks.block2.attention1.W_v.weight shape: torch.Size([64, 64])
tensor([[-0.0198,  0.0262,  0.1005,  ..., -0.0101, -0.0119,  0.0347],
        [ 0.0190,  0.0506,  0.0107,  ...,  0.0411, -0.0579,  0.0943],
        [ 0.0112,  0.0262, -0.0635,  ...,  0.0026,  0.0088, -0.0301],
        ...,
        [ 0.0225,  0.0595, -0.0500,  ..., -0.0010, -0.0056,  0.0228],
        [-0.0237, -0.0268,  0.0071,  ..., -0.0576, -0.0653, -0.0119],
        [ 0.0108, -0.0421, -0.0306,  ...,  0.0014,  0.0244,  0.0258]])
tensor([[-0.0077,  0.0512,  0.0548,  ..., -0.0332,  0.0236,  0.0499],
        [-0.0234,  0.0104,  0.1345,  ...,  0.1135, -0.0988,  0.0974],
        [ 0.0554,  0.0192, -0.0885,  ...,  0.1743,  0.0333,  0.0857],
        ...,
        [-0.0197,  0.0555, -0.0028,  ..., -0.0422, -0.0416,  0.0328],
        [-0.0661, -0.0237,  0.0548,  ..., -0.0937, -0.1260, -0.0119],
        [-0.0100, -0.0703, -0.0114,  ...,  0.0233,  0.0458,  0.0348]])
##########################################################
decoder.blks.block2.attention1.W_o.weight shape: torch.Size([64, 64])
tensor([[-0.0096,  0.0318,  0.0707,  ..., -0.0016, -0.0205,  0.0412],
        [-0.0050,  0.0348, -0.0273,  ..., -0.0284, -0.0172, -0.0653],
        [ 0.0814,  0.0254, -0.0495,  ...,  0.0166, -0.0258, -0.0108],
        ...,
        [ 0.0054, -0.0689,  0.1284,  ...,  0.0272, -0.0138,  0.0781],
        [-0.0326,  0.0422,  0.0274,  ...,  0.0293, -0.0159, -0.0956],
        [-0.0215,  0.0206, -0.0247,  ..., -0.0065, -0.0100,  0.0386]])
tensor([[-0.0182,  0.0056,  0.1463,  ..., -0.0048, -0.0441,  0.0715],
        [ 0.0387,  0.0109,  0.0091,  ..., -0.0390, -0.0258, -0.1211],
        [ 0.1378, -0.0113, -0.1097,  ..., -0.0186, -0.0522,  0.0024],
        ...,
        [-0.0092,  0.0156,  0.1276,  ..., -0.0258, -0.0858,  0.1125],
        [-0.0648,  0.0805,  0.0166,  ...,  0.0530,  0.0054, -0.0966],
        [-0.0130,  0.0248,  0.1234,  ..., -0.0599, -0.0763,  0.0762]])
##########################################################
decoder.blks.block2.addnorm1.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([0.9839, 1.0200, 0.9992, 1.0163, 1.0110, 1.0643, 1.0019, 1.0112, 0.9779,
        1.0530, 0.9782, 0.9966, 0.9796, 1.0228, 1.0142, 1.0108, 1.0096, 0.9959,
        0.9970, 1.0235, 1.0399, 0.9992, 1.0354, 0.9953, 1.0124, 0.9870, 0.9773,
        0.9669, 0.9885, 0.9930, 0.9767, 0.9884, 1.0359, 1.0089, 0.9986, 1.0029,
        0.9870, 1.0012, 1.0100, 1.0440, 1.0297, 0.9950, 1.0193, 0.9989, 0.9689,
        0.9755, 0.9952, 1.0046, 1.0250, 1.0324, 0.9879, 1.0233, 1.0179, 1.0018,
        0.9726, 1.0310, 1.0288, 1.0054, 0.9955, 1.0038, 1.0099, 1.0143, 0.9775,
        1.0217])
##########################################################
decoder.blks.block2.addnorm1.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-0.0112,  0.0136, -0.0031, -0.0066, -0.0058,  0.0068,  0.0184, -0.0235,
        -0.0067, -0.0174, -0.0033,  0.0120,  0.0177, -0.0077, -0.0153, -0.0019,
        -0.0054,  0.0193, -0.0272, -0.0094, -0.0047, -0.0023,  0.0225,  0.0222,
         0.0035, -0.0114, -0.0132,  0.0045,  0.0164,  0.0074, -0.0061,  0.0087,
        -0.0215,  0.0035,  0.0012, -0.0071,  0.0088, -0.0028,  0.0134, -0.0014,
        -0.0050,  0.0042,  0.0041, -0.0059, -0.0061,  0.0037,  0.0137, -0.0090,
         0.0035, -0.0047, -0.0029,  0.0149,  0.0265,  0.0175, -0.0067,  0.0003,
         0.0020, -0.0206,  0.0079, -0.0231, -0.0121, -0.0082, -0.0043,  0.0044])
##########################################################
decoder.blks.block2.attention2.W_q.weight shape: torch.Size([64, 64])
tensor([[-0.1027,  0.1105, -0.2646,  ..., -0.2689, -0.1693,  0.0912],
        [ 0.1518, -0.0897, -0.0576,  ..., -0.0665, -0.0761, -0.2177],
        [ 0.1382,  0.1598,  0.0751,  ..., -0.1618,  0.1357, -0.0668],
        ...,
        [-0.2086,  0.0544,  0.0189,  ...,  0.1008, -0.0023, -0.1671],
        [-0.0596, -0.2038,  0.1257,  ..., -0.0642,  0.1591, -0.0396],
        [ 0.0537, -0.0117,  0.1538,  ...,  0.0685,  0.0843, -0.1442]])
tensor([[-0.1183,  0.1299, -0.3129,  ..., -0.3064, -0.1752,  0.0869],
        [ 0.1608, -0.1125,  0.0185,  ..., -0.1028, -0.0922, -0.2594],
        [ 0.1426,  0.2091,  0.1014,  ..., -0.1830,  0.1614, -0.0458],
        ...,
        [-0.1570,  0.0476,  0.0134,  ...,  0.1769, -0.0157, -0.1738],
        [-0.0240, -0.2334,  0.1719,  ...,  0.0194,  0.1550, -0.0027],
        [ 0.0362, -0.0088,  0.1370,  ...,  0.0679,  0.0480, -0.1503]])
##########################################################
decoder.blks.block2.attention2.W_k.weight shape: torch.Size([64, 64])
tensor([[-0.0576, -0.1521, -0.0664,  ...,  0.0114,  0.1010, -0.1257],
        [-0.0053, -0.0284,  0.0376,  ..., -0.0388,  0.0728,  0.0753],
        [ 0.2398, -0.0037, -0.0128,  ..., -0.1565, -0.0178, -0.0133],
        ...,
        [-0.0982,  0.1875,  0.0125,  ...,  0.0366, -0.1074,  0.0428],
        [-0.0412,  0.0409, -0.0793,  ..., -0.2576, -0.0583, -0.0166],
        [ 0.0420,  0.0586, -0.0175,  ...,  0.1150, -0.0520, -0.0412]])
tensor([[-0.0894, -0.2050, -0.0576,  ...,  0.0515,  0.1220, -0.0961],
        [-0.0032, -0.0364,  0.1025,  ..., -0.0372,  0.0610,  0.0710],
        [ 0.2289, -0.0605, -0.0559,  ..., -0.1317,  0.0054,  0.0314],
        ...,
        [-0.0703,  0.2190,  0.0270,  ..., -0.0058, -0.1322,  0.0248],
        [-0.0421,  0.0352, -0.1044,  ..., -0.2638, -0.1202, -0.0096],
        [ 0.0360,  0.0646,  0.0183,  ...,  0.1171, -0.0306, -0.0264]])
##########################################################
decoder.blks.block2.attention2.W_v.weight shape: torch.Size([64, 64])
tensor([[ 9.7017e-03,  2.3013e-02, -1.8108e-02,  ...,  4.4981e-02,
         -3.1362e-02, -1.0216e-02],
        [ 4.7454e-02, -3.8264e-02,  4.1096e-03,  ...,  5.3956e-02,
         -1.2284e-02,  3.0534e-02],
        [ 1.3317e-02,  4.8215e-02, -5.8713e-02,  ...,  1.5984e-02,
         -6.4501e-02,  2.2255e-02],
        ...,
        [-3.2957e-02,  4.4083e-02,  6.7708e-03,  ..., -5.4314e-02,
         -2.7064e-02,  3.6067e-03],
        [-7.2686e-02,  8.6264e-02,  1.3049e-02,  ..., -7.5103e-02,
          1.0711e-02, -6.6884e-05],
        [-1.2321e-02, -1.3513e-02, -2.4438e-02,  ..., -5.0036e-02,
         -2.2680e-02, -1.5487e-02]])
tensor([[-0.0002,  0.0256, -0.0497,  ...,  0.0220, -0.0477, -0.0096],
        [ 0.0563, -0.0664,  0.0782,  ...,  0.0592, -0.0167,  0.0688],
        [-0.0157,  0.0339, -0.0923,  ...,  0.0071, -0.0645,  0.0183],
        ...,
        [-0.0106,  0.0426, -0.0508,  ..., -0.0381, -0.0124,  0.0243],
        [-0.1199,  0.1005,  0.0528,  ..., -0.0548, -0.0225, -0.0403],
        [-0.0370, -0.0412, -0.0650,  ..., -0.0368,  0.0263,  0.0063]])
##########################################################
decoder.blks.block2.attention2.W_o.weight shape: torch.Size([64, 64])
tensor([[ 0.0330, -0.0230,  0.0363,  ...,  0.0256, -0.0212, -0.0176],
        [ 0.0581,  0.0936,  0.0268,  ...,  0.0225,  0.0103, -0.0732],
        [ 0.0151,  0.0010, -0.0186,  ..., -0.0322,  0.0046, -0.0144],
        ...,
        [-0.0471,  0.0480, -0.0353,  ...,  0.0200, -0.0090, -0.0159],
        [-0.0702,  0.0296, -0.0286,  ..., -0.0255,  0.0017, -0.0364],
        [-0.0269, -0.0058,  0.0030,  ..., -0.0084,  0.0049, -0.0004]])
tensor([[ 0.0073, -0.0264,  0.1152,  ..., -0.0336, -0.0179, -0.0386],
        [ 0.0869,  0.0792,  0.0043,  ...,  0.0507,  0.0267, -0.0697],
        [ 0.0268, -0.0175,  0.0005,  ...,  0.0018,  0.0424, -0.0203],
        ...,
        [-0.0566,  0.0350, -0.0435,  ..., -0.0061, -0.0135, -0.0455],
        [-0.0525,  0.0445, -0.0029,  ..., -0.0865, -0.0056,  0.0039],
        [-0.0179,  0.0431,  0.0248,  ..., -0.0430,  0.0220,  0.0135]])
##########################################################
decoder.blks.block2.addnorm2.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([0.9856, 1.0108, 0.9908, 1.0180, 1.0096, 1.0483, 0.9964, 1.0058, 0.9789,
        1.0541, 0.9813, 0.9929, 0.9830, 1.0140, 1.0056, 1.0243, 1.0019, 0.9750,
        0.9879, 1.0167, 1.0605, 1.0092, 1.0245, 0.9958, 1.0110, 0.9841, 0.9902,
        0.9628, 0.9838, 0.9831, 0.9716, 0.9893, 1.0283, 1.0127, 0.9972, 1.0032,
        0.9839, 0.9905, 1.0175, 1.0374, 1.0258, 1.0013, 1.0276, 0.9952, 0.9732,
        0.9661, 0.9862, 1.0175, 1.0263, 1.0270, 0.9812, 1.0047, 1.0165, 0.9995,
        0.9731, 1.0369, 1.0216, 1.0028, 0.9863, 1.0147, 1.0191, 1.0007, 0.9823,
        1.0290])
##########################################################
decoder.blks.block2.addnorm2.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-5.6912e-03,  1.4302e-02, -1.6338e-03, -8.1362e-03,  1.3493e-03,
         1.1652e-02,  2.1319e-02, -2.4983e-02, -8.0321e-03, -1.4350e-02,
        -2.1118e-03,  1.4214e-02,  1.5723e-02, -1.0596e-02, -2.1185e-02,
         8.7308e-04, -2.8571e-03,  2.4111e-02, -2.7339e-02, -1.0284e-02,
        -4.5566e-03, -4.4160e-03,  2.0547e-02,  2.5023e-02,  5.3235e-03,
        -1.2418e-02, -1.4860e-02,  3.4573e-03,  1.6972e-02,  1.2070e-02,
        -5.1448e-03,  8.1688e-03, -2.0219e-02,  5.8722e-03,  2.1720e-03,
        -7.4666e-03,  6.0461e-03, -1.1669e-03,  9.9673e-03,  6.4918e-05,
        -8.3855e-03,  2.6191e-03,  6.4244e-03, -8.0553e-03, -9.8889e-03,
         4.5557e-03,  1.4667e-02, -8.0372e-03,  2.5854e-03, -6.4447e-03,
        -4.9468e-03,  1.5464e-02,  2.3182e-02,  1.3007e-02, -5.5359e-03,
         1.3679e-03,  1.0032e-02, -1.8848e-02,  4.8424e-03, -2.5510e-02,
        -1.1465e-02, -1.2185e-02, -1.0524e-03,  2.0607e-03])
##########################################################
decoder.blks.block2.ffn.dense1.weight shape: torch.Size([32, 64])
tensor([[-3.0399e-02,  2.9260e-02, -5.1069e-02,  ...,  3.4285e-02,
          2.9527e-02,  7.4069e-03],
        [ 3.4591e-02,  3.5628e-02,  1.1072e-02,  ..., -5.2781e-02,
          1.7861e-02, -1.3121e-02],
        [-1.5881e-02,  3.8540e-02,  7.1834e-02,  ...,  9.1458e-03,
         -4.1790e-02,  1.4522e-01],
        ...,
        [-8.4671e-02,  1.9909e-02,  2.7529e-02,  ...,  3.0091e-02,
         -4.0848e-02, -1.0364e-01],
        [ 4.6953e-02,  6.9757e-02, -1.8948e-02,  ...,  7.9695e-02,
          1.2070e-02, -4.5333e-02],
        [-1.0597e-02, -9.4189e-02, -4.0009e-02,  ..., -7.0873e-02,
         -2.1162e-06,  4.2069e-02]])
tensor([[ 0.0183,  0.0348, -0.0302,  ...,  0.0136, -0.0092, -0.0480],
        [ 0.0391,  0.0261,  0.0100,  ..., -0.0470,  0.0021, -0.0084],
        [-0.0503,  0.0333,  0.0487,  ..., -0.0061, -0.0152,  0.1430],
        ...,
        [-0.1196,  0.0360, -0.0095,  ...,  0.0061, -0.0069, -0.1455],
        [ 0.0441,  0.0149, -0.0348,  ...,  0.1245,  0.0151, -0.0827],
        [-0.0235, -0.0920, -0.0483,  ..., -0.1232, -0.0177,  0.1661]])
##########################################################
decoder.blks.block2.ffn.dense1.bias shape: torch.Size([32])
tensor([ 0.0615,  0.0521,  0.0906,  0.1112,  0.0112, -0.0713,  0.0967,  0.1027,
         0.0182, -0.0270, -0.0058, -0.0191, -0.0046,  0.0876, -0.0299,  0.0643,
         0.1154,  0.0845, -0.0345,  0.0092,  0.1058, -0.0319,  0.0042,  0.0136,
        -0.0393,  0.1207,  0.0117,  0.0182,  0.0056,  0.1048,  0.1012,  0.0180])
tensor([ 0.0337,  0.0630,  0.0792,  0.0886,  0.0156, -0.0495,  0.1189,  0.1158,
         0.0214, -0.0237,  0.0064, -0.0172,  0.0016,  0.0931, -0.0480,  0.0324,
         0.1386,  0.0671, -0.0014,  0.0154,  0.1053, -0.0269,  0.0223,  0.0334,
        -0.0033,  0.1440,  0.0220,  0.0302,  0.0180,  0.0974,  0.0659,  0.0288])
##########################################################
decoder.blks.block2.ffn.dense2.weight shape: torch.Size([64, 32])
tensor([[ 0.0262, -0.0818, -0.0121,  ...,  0.0081,  0.0398, -0.0535],
        [ 0.0176,  0.0080,  0.0679,  ..., -0.0482, -0.0204,  0.0510],
        [ 0.0009, -0.0029,  0.0056,  ..., -0.0059,  0.0154, -0.0158],
        ...,
        [-0.0319, -0.0766, -0.0756,  ..., -0.0217,  0.0543, -0.0852],
        [-0.0286, -0.0172, -0.0274,  ...,  0.0451, -0.0487,  0.0533],
        [-0.0141,  0.1101, -0.0319,  ..., -0.0168, -0.0373, -0.0733]])
tensor([[ 0.0034, -0.0783, -0.0563,  ...,  0.0540,  0.0316, -0.0701],
        [ 0.0405,  0.0302,  0.0652,  ..., -0.0773, -0.0001,  0.1025],
        [-0.0315, -0.0383,  0.0274,  ...,  0.0178,  0.0029, -0.0369],
        ...,
        [-0.0983, -0.0960, -0.0557,  ..., -0.0219,  0.0613, -0.1250],
        [-0.0039, -0.0068, -0.0427,  ...,  0.0454, -0.0421,  0.0945],
        [-0.0544,  0.0814, -0.0098,  ..., -0.0167, -0.0105, -0.1033]])
##########################################################
decoder.blks.block2.ffn.dense2.bias shape: torch.Size([64])
tensor([ 0.0725, -0.1149,  0.0480,  0.0607, -0.0306,  0.0850,  0.0642,  0.0550,
        -0.0259,  0.0021, -0.1035,  0.0647,  0.0701,  0.0971, -0.0217, -0.0040,
         0.0110,  0.1317, -0.0840,  0.1665, -0.1596, -0.1306, -0.1484,  0.0198,
        -0.0737, -0.0441,  0.0135, -0.0201,  0.0269,  0.1632, -0.0008, -0.0320,
        -0.1704, -0.0663,  0.0312, -0.0962, -0.0189, -0.1617,  0.0372, -0.0396,
         0.0987, -0.1105,  0.0936,  0.0678,  0.0094, -0.0487, -0.1436,  0.1635,
         0.0132,  0.0867,  0.1438, -0.1585,  0.1739, -0.0276, -0.1299,  0.1641,
         0.0371, -0.1423, -0.0185, -0.0235,  0.1508, -0.0324, -0.0179, -0.0159])
tensor([ 0.0722, -0.0989,  0.0441,  0.0502, -0.0302,  0.0886,  0.0806,  0.0298,
        -0.0306, -0.0132, -0.1017,  0.0767,  0.0825,  0.0839, -0.0426, -0.0010,
         0.0052,  0.1508, -0.1059,  0.1522, -0.1633, -0.1356, -0.1191,  0.0373,
        -0.0684, -0.0545, -0.0012, -0.0233,  0.0368,  0.1690, -0.0093, -0.0249,
        -0.1866, -0.0534,  0.0299, -0.0972, -0.0128, -0.1592,  0.0418, -0.0373,
         0.0932, -0.1102,  0.0969,  0.0597, -0.0028, -0.0424, -0.1266,  0.1512,
         0.0142,  0.0822,  0.1381, -0.1381,  0.1930, -0.0155, -0.1330,  0.1632,
         0.0464, -0.1555, -0.0110, -0.0475,  0.1363, -0.0418, -0.0191, -0.0142])
##########################################################
decoder.blks.block2.addnorm3.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([0.9999, 1.0368, 1.0196, 1.0173, 1.0197, 1.0453, 1.0125, 1.0267, 0.9880,
        1.0744, 1.0089, 0.9931, 0.9731, 1.0168, 1.0056, 1.0367, 1.0070, 0.9938,
        1.0116, 1.0339, 1.0592, 1.0068, 1.0267, 0.9973, 1.0205, 1.0053, 0.9971,
        0.9950, 1.0175, 0.9802, 0.9953, 0.9943, 1.0741, 1.0131, 1.0003, 1.0304,
        0.9911, 0.9821, 1.0203, 1.0533, 1.0396, 1.0309, 1.0245, 0.9938, 0.9855,
        0.9762, 1.0004, 1.0209, 1.0189, 1.0445, 1.0108, 0.9990, 1.0294, 0.9976,
        1.0138, 1.0575, 1.0445, 1.0077, 0.9930, 1.0525, 1.0308, 1.0164, 0.9841,
        1.0368])
##########################################################
decoder.blks.block2.addnorm3.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-0.0095,  0.0153, -0.0131, -0.0112,  0.0037,  0.0111,  0.0128, -0.0217,
        -0.0146, -0.0187,  0.0029,  0.0168,  0.0006, -0.0045, -0.0173,  0.0054,
        -0.0108,  0.0327, -0.0353, -0.0129, -0.0036,  0.0060,  0.0174,  0.0241,
        -0.0039, -0.0198, -0.0111, -0.0065,  0.0129,  0.0066, -0.0024,  0.0088,
        -0.0268,  0.0061, -0.0008, -0.0128,  0.0008,  0.0109,  0.0059,  0.0091,
        -0.0017,  0.0101,  0.0171, -0.0014, -0.0079,  0.0073,  0.0108, -0.0063,
         0.0048, -0.0032, -0.0098,  0.0061,  0.0281,  0.0122, -0.0079, -0.0057,
         0.0164, -0.0254,  0.0052, -0.0368, -0.0078, -0.0149,  0.0016,  0.0068])
##########################################################
decoder.blks.block3.attention1.W_q.weight shape: torch.Size([64, 64])
tensor([[ 0.0591,  0.2522, -0.0185,  ..., -0.0175,  0.0147, -0.0655],
        [-0.0909, -0.2201,  0.1872,  ...,  0.0412, -0.0052,  0.0963],
        [ 0.0943,  0.2936,  0.0024,  ...,  0.1088,  0.0155, -0.0445],
        ...,
        [-0.2044, -0.2282,  0.1381,  ...,  0.1310,  0.0026, -0.1272],
        [-0.0185,  0.1976, -0.0113,  ...,  0.0631, -0.2645, -0.0990],
        [ 0.1705,  0.0957, -0.0381,  ...,  0.0771, -0.0069,  0.2077]])
tensor([[-0.0023,  0.3268,  0.0198,  ..., -0.0331,  0.0088, -0.0004],
        [-0.1054, -0.2512,  0.1964,  ...,  0.0706, -0.0082,  0.0919],
        [ 0.0764,  0.3350, -0.0765,  ...,  0.0413,  0.0446, -0.0400],
        ...,
        [-0.2700, -0.1901,  0.1778,  ...,  0.1433, -0.0003, -0.2155],
        [-0.0403,  0.2142,  0.0211,  ...,  0.0065, -0.2807, -0.0726],
        [ 0.1875,  0.1164, -0.0714,  ...,  0.1229,  0.0058,  0.2405]])
##########################################################
decoder.blks.block3.attention1.W_k.weight shape: torch.Size([64, 64])
tensor([[ 0.0049, -0.0311, -0.0895,  ..., -0.0016, -0.0527, -0.1774],
        [ 0.0815,  0.0762,  0.0219,  ..., -0.2764, -0.0176,  0.2504],
        [-0.1718,  0.0587,  0.0689,  ...,  0.0298,  0.2008,  0.1993],
        ...,
        [ 0.1889, -0.2156, -0.1778,  ..., -0.0118, -0.2733,  0.1105],
        [ 0.0092,  0.0874, -0.2151,  ..., -0.0337,  0.0809,  0.1467],
        [-0.0849,  0.3457, -0.0625,  ..., -0.0648,  0.0128, -0.0738]])
tensor([[ 0.0183, -0.0517, -0.1148,  ..., -0.0113, -0.0095, -0.2008],
        [ 0.1121,  0.1474,  0.0682,  ..., -0.3418, -0.0855,  0.2265],
        [-0.1595,  0.0079,  0.0036,  ...,  0.0677,  0.2766,  0.1851],
        ...,
        [ 0.1835, -0.2830, -0.1744,  ...,  0.0735, -0.2439,  0.1550],
        [ 0.0279,  0.1083, -0.1465,  ..., -0.1108, -0.0148,  0.1496],
        [-0.0198,  0.3651, -0.1613,  ..., -0.1254,  0.0608, -0.1010]])
##########################################################
decoder.blks.block3.attention1.W_v.weight shape: torch.Size([64, 64])
tensor([[ 0.0207, -0.0362, -0.0496,  ...,  0.0552, -0.0356,  0.0191],
        [ 0.0245, -0.0055,  0.0305,  ...,  0.0593, -0.0506, -0.0233],
        [-0.0435, -0.0074,  0.0090,  ...,  0.0229,  0.0097,  0.0715],
        ...,
        [ 0.0141, -0.0544, -0.0317,  ..., -0.0680, -0.0044, -0.0187],
        [-0.0300, -0.0219, -0.0585,  ...,  0.0334,  0.0606, -0.0576],
        [ 0.0074,  0.0097, -0.0466,  ..., -0.0200, -0.0801,  0.0677]])
tensor([[ 0.0086, -0.0698, -0.0518,  ...,  0.1020, -0.0053,  0.0765],
        [ 0.0234, -0.0066,  0.0448,  ...,  0.0313, -0.0778, -0.0452],
        [-0.0748, -0.0570,  0.0271,  ...,  0.0434, -0.0081,  0.0369],
        ...,
        [ 0.0957, -0.0926, -0.0658,  ..., -0.1037,  0.0079, -0.0688],
        [-0.0668,  0.0059, -0.0419,  ...,  0.0275,  0.0678, -0.0238],
        [-0.0300,  0.0565, -0.0058,  ..., -0.0603, -0.0909,  0.1081]])
##########################################################
decoder.blks.block3.attention1.W_o.weight shape: torch.Size([64, 64])
tensor([[-0.0091,  0.0153,  0.0703,  ..., -0.0049,  0.0667,  0.0410],
        [ 0.0398, -0.0308,  0.0414,  ...,  0.0113,  0.0314,  0.0422],
        [-0.0210,  0.0092,  0.0681,  ..., -0.0049,  0.0509, -0.0139],
        ...,
        [ 0.0203, -0.0556, -0.0495,  ...,  0.0831, -0.0087,  0.0175],
        [-0.0361,  0.0154, -0.0262,  ...,  0.0028,  0.0326,  0.0880],
        [ 0.0399,  0.0806, -0.0348,  ...,  0.0036, -0.0162,  0.0007]])
tensor([[-0.0224, -0.0039,  0.0529,  ...,  0.0277,  0.0112, -0.0017],
        [ 0.0598, -0.0303,  0.0683,  ..., -0.0014,  0.0879,  0.0854],
        [-0.1285,  0.0344, -0.0029,  ..., -0.0033,  0.0339, -0.0458],
        ...,
        [-0.0400, -0.0208, -0.0836,  ...,  0.0697, -0.0312,  0.0062],
        [ 0.0467, -0.0008,  0.0221,  ..., -0.0264,  0.0079,  0.1539],
        [-0.0200,  0.1179, -0.0400,  ...,  0.0143, -0.0097, -0.0347]])
##########################################################
decoder.blks.block3.addnorm1.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0009, 1.0116, 1.0400, 0.9992, 1.0093, 1.0447, 0.9748, 0.9719, 0.9993,
        1.0101, 1.0014, 0.9871, 0.9984, 0.9918, 1.0316, 1.0195, 0.9951, 0.9970,
        1.0151, 1.0472, 1.0674, 0.9769, 0.9990, 1.0002, 1.0060, 0.9865, 1.0072,
        0.9826, 1.0156, 0.9826, 1.0009, 0.9668, 1.0215, 1.0249, 0.9876, 1.0202,
        0.9955, 0.9984, 1.0185, 1.0462, 0.9999, 1.0001, 1.0444, 0.9825, 1.0021,
        1.0074, 1.0183, 1.0105, 1.0460, 1.0560, 0.9970, 1.0111, 0.9761, 1.0246,
        0.9825, 1.0300, 1.0178, 0.9844, 0.9851, 1.0326, 1.0294, 0.9965, 0.9719,
        1.0239])
##########################################################
decoder.blks.block3.addnorm1.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-0.0218, -0.0002, -0.0086, -0.0059, -0.0069,  0.0119,  0.0066, -0.0036,
        -0.0040, -0.0128, -0.0056,  0.0173, -0.0075, -0.0008, -0.0165, -0.0094,
         0.0003,  0.0180, -0.0153,  0.0069, -0.0045, -0.0063,  0.0255,  0.0133,
        -0.0085, -0.0150, -0.0246, -0.0236,  0.0113,  0.0067, -0.0042,  0.0082,
        -0.0364,  0.0107, -0.0111, -0.0060,  0.0008,  0.0027,  0.0049,  0.0262,
        -0.0100,  0.0245,  0.0136, -0.0012, -0.0086,  0.0093,  0.0132, -0.0185,
         0.0079, -0.0007, -0.0073, -0.0140,  0.0130,  0.0123,  0.0057, -0.0022,
         0.0157, -0.0077, -0.0071, -0.0049, -0.0041, -0.0148,  0.0005,  0.0041])
##########################################################
decoder.blks.block3.attention2.W_q.weight shape: torch.Size([64, 64])
tensor([[-0.0989, -0.2795, -0.1954,  ...,  0.1577, -0.0302, -0.2439],
        [-0.0306,  0.1893,  0.0612,  ...,  0.0781,  0.0977,  0.1202],
        [-0.1459,  0.1292,  0.0136,  ..., -0.0012, -0.0757, -0.1207],
        ...,
        [ 0.0249,  0.0521,  0.1577,  ...,  0.0244, -0.0290,  0.0873],
        [ 0.1248, -0.0872,  0.0851,  ..., -0.1376,  0.2351,  0.0410],
        [-0.0243,  0.1804, -0.0182,  ..., -0.0166,  0.0594,  0.0750]])
tensor([[-0.0758, -0.2648, -0.1920,  ...,  0.1373, -0.0153, -0.2588],
        [-0.0359,  0.1793,  0.0575,  ...,  0.0840,  0.1032,  0.1342],
        [-0.1974,  0.1121,  0.0092,  ..., -0.0198, -0.1277, -0.1249],
        ...,
        [-0.0313,  0.1043,  0.2055,  ..., -0.0147, -0.0425,  0.0402],
        [ 0.1679, -0.1079,  0.1099,  ..., -0.0927,  0.1975, -0.0507],
        [-0.0500,  0.2051, -0.0231,  ..., -0.0615,  0.0655,  0.0996]])
##########################################################
decoder.blks.block3.attention2.W_k.weight shape: torch.Size([64, 64])
tensor([[-0.0350,  0.1447,  0.1548,  ...,  0.1111,  0.1743,  0.1705],
        [-0.0182,  0.2603, -0.0573,  ..., -0.1895, -0.1914,  0.1131],
        [-0.0362, -0.0357,  0.0912,  ...,  0.2167,  0.0444,  0.1077],
        ...,
        [-0.0017, -0.0011, -0.1224,  ..., -0.0928,  0.0212,  0.0545],
        [ 0.0299, -0.1134,  0.2620,  ..., -0.0661, -0.1494, -0.0445],
        [-0.0076,  0.0619,  0.0040,  ...,  0.2113, -0.1112,  0.0735]])
tensor([[-0.0352,  0.1314,  0.1868,  ...,  0.1224,  0.2028,  0.1770],
        [ 0.0049,  0.3154, -0.1238,  ..., -0.2333, -0.2261,  0.0675],
        [-0.0602, -0.0244,  0.1323,  ...,  0.2227,  0.0626,  0.0862],
        ...,
        [ 0.0048, -0.0146, -0.1153,  ..., -0.0934,  0.0313,  0.0533],
        [ 0.0494, -0.1341,  0.2741,  ..., -0.0522, -0.1422, -0.0447],
        [-0.0518,  0.0491, -0.0401,  ...,  0.2309, -0.1041,  0.1277]])
##########################################################
decoder.blks.block3.attention2.W_v.weight shape: torch.Size([64, 64])
tensor([[-0.0348, -0.0329, -0.0113,  ...,  0.0017,  0.0781,  0.1160],
        [-0.0610,  0.0269, -0.0153,  ...,  0.0442, -0.0301, -0.0577],
        [ 0.0313,  0.0210,  0.0237,  ...,  0.0169, -0.0041, -0.0376],
        ...,
        [ 0.0025, -0.0424, -0.0662,  ...,  0.0093, -0.0271, -0.0568],
        [-0.0264,  0.0264, -0.0047,  ..., -0.0374,  0.0132, -0.0475],
        [-0.0924,  0.0723,  0.0384,  ...,  0.0042,  0.0482, -0.0269]])
tensor([[-5.4626e-02, -5.1499e-02, -4.6841e-02,  ...,  3.3955e-02,
          9.4213e-02,  1.4281e-01],
        [-6.7777e-02,  3.3664e-02, -1.0223e-02,  ...,  4.0136e-02,
         -3.0201e-02, -6.7793e-02],
        [ 2.1829e-02,  3.8675e-02,  1.5149e-02,  ..., -1.5842e-02,
         -3.0199e-02, -7.9060e-02],
        ...,
        [ 3.4688e-03, -5.2179e-02, -5.5422e-02,  ...,  1.4041e-02,
          3.6068e-03, -4.2794e-02],
        [-4.9291e-02,  6.3156e-02,  5.7856e-02,  ..., -6.7788e-02,
         -3.8017e-02, -7.5805e-02],
        [-9.6513e-02,  3.7562e-02,  5.1794e-02,  ...,  2.7910e-02,
          5.4777e-02,  7.4164e-05]])
##########################################################
decoder.blks.block3.attention2.W_o.weight shape: torch.Size([64, 64])
tensor([[ 0.0248, -0.0430, -0.0255,  ..., -0.0324,  0.0260,  0.0313],
        [ 0.0638,  0.0637,  0.0242,  ..., -0.0172,  0.0573,  0.0004],
        [-0.0146,  0.0582,  0.0740,  ..., -0.0016,  0.0697, -0.0176],
        ...,
        [ 0.0484, -0.0084, -0.0309,  ...,  0.0302, -0.0169, -0.0642],
        [-0.0326,  0.0503, -0.0400,  ...,  0.0044,  0.0641, -0.0319],
        [-0.0539, -0.0620, -0.0332,  ..., -0.0298, -0.0125,  0.0077]])
tensor([[ 0.0222, -0.0344, -0.0160,  ..., -0.0529,  0.0445,  0.0945],
        [ 0.0560,  0.0613,  0.0291,  ..., -0.0544,  0.0790,  0.0174],
        [-0.0096,  0.0536,  0.0677,  ...,  0.0009,  0.0770, -0.0454],
        ...,
        [ 0.0639, -0.0048, -0.0515,  ...,  0.0429,  0.0110, -0.0909],
        [-0.0376,  0.0541, -0.0420,  ...,  0.0507, -0.0219,  0.0068],
        [-0.1236, -0.1245, -0.0159,  ..., -0.0253, -0.0333,  0.0151]])
##########################################################
decoder.blks.block3.addnorm2.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([0.9755, 0.9984, 1.0338, 0.9935, 0.9992, 1.0414, 0.9778, 0.9457, 1.0133,
        1.0002, 0.9985, 0.9765, 1.0031, 0.9944, 1.0143, 0.9830, 0.9681, 1.0202,
        1.0204, 1.0405, 1.0672, 0.9854, 0.9845, 1.0011, 1.0055, 0.9848, 0.9867,
        0.9890, 1.0023, 0.9716, 0.9979, 0.9887, 1.0188, 1.0167, 0.9802, 1.0023,
        0.9991, 1.0021, 1.0263, 1.0536, 0.9942, 1.0040, 1.0304, 0.9844, 0.9976,
        1.0036, 1.0136, 1.0098, 1.0268, 1.0458, 0.9916, 1.0216, 0.9876, 1.0161,
        0.9782, 1.0147, 0.9925, 0.9830, 0.9846, 1.0146, 1.0305, 0.9904, 0.9655,
        1.0195])
##########################################################
decoder.blks.block3.addnorm2.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-1.7431e-02, -2.4915e-03, -7.1287e-03, -1.0555e-02, -6.6432e-03,
         2.4441e-03,  1.0892e-02, -6.8844e-03, -1.3130e-02, -1.7805e-02,
        -2.3186e-03,  1.3601e-02,  7.3217e-04, -1.2945e-03, -8.1379e-03,
         6.9729e-04,  2.8695e-03,  1.2645e-02, -2.1557e-02,  2.3299e-03,
        -1.9691e-03, -6.7125e-03,  2.5188e-02,  1.2832e-02, -1.0011e-02,
        -1.8118e-02, -2.0827e-02, -1.3882e-02,  7.5721e-03,  6.1338e-03,
         1.7281e-03,  8.0838e-03, -2.9941e-02,  1.0256e-02, -1.4818e-02,
        -1.0295e-02,  3.4375e-03,  6.8664e-03,  8.5704e-03,  2.3979e-02,
        -8.4578e-03,  2.6325e-02,  1.3132e-02,  2.8206e-03, -1.1189e-02,
         1.2157e-02,  1.1548e-02, -2.2586e-02,  9.7585e-03,  1.7781e-03,
        -3.5658e-03, -9.7677e-03,  1.5793e-02,  1.0999e-02, -2.1624e-03,
        -2.4210e-03,  6.6201e-03, -8.8690e-03, -9.7792e-05, -8.3248e-03,
        -9.6271e-03, -6.3282e-03,  1.0260e-02,  9.9595e-05])
##########################################################
decoder.blks.block3.ffn.dense1.weight shape: torch.Size([32, 64])
tensor([[ 0.0784,  0.0177, -0.0226,  ..., -0.0104,  0.0187,  0.0931],
        [-0.0290, -0.0417,  0.0264,  ...,  0.1037, -0.0285,  0.0744],
        [ 0.0277, -0.0211,  0.1076,  ...,  0.0762, -0.0698,  0.0264],
        ...,
        [ 0.0465, -0.0362, -0.0063,  ...,  0.0153,  0.0583, -0.0777],
        [ 0.0514, -0.0759, -0.0630,  ...,  0.0273, -0.0608,  0.0676],
        [-0.0874, -0.0341,  0.0034,  ..., -0.0525,  0.0309,  0.0204]])
tensor([[ 0.0335,  0.0165, -0.0031,  ..., -0.0269,  0.0282,  0.0959],
        [-0.0615, -0.0432,  0.0184,  ...,  0.1001, -0.0403,  0.0872],
        [ 0.0375, -0.0017,  0.0666,  ...,  0.1220, -0.0707,  0.0762],
        ...,
        [ 0.0283, -0.0646, -0.0318,  ...,  0.0519,  0.0508, -0.1010],
        [ 0.0977, -0.0473, -0.1066,  ..., -0.0004, -0.0263,  0.0930],
        [-0.0868, -0.0334, -0.0764,  ..., -0.0321,  0.0711,  0.0698]])
##########################################################
decoder.blks.block3.ffn.dense1.bias shape: torch.Size([32])
tensor([ 0.0030,  0.0379, -0.0111,  0.0441, -0.0736,  0.1087, -0.0686, -0.0979,
         0.0058,  0.0078,  0.0338, -0.0880, -0.0552, -0.0425,  0.0962,  0.0425,
         0.0928, -0.0337, -0.0030, -0.0181, -0.1080, -0.0851, -0.1007, -0.0188,
         0.0486,  0.0729, -0.0547,  0.0036, -0.0791, -0.0853, -0.0926,  0.0541])
tensor([ 0.0127,  0.0538,  0.0080,  0.0524, -0.0803,  0.1168, -0.0625, -0.0869,
         0.0260,  0.0148,  0.0676, -0.0637, -0.0420, -0.0444,  0.1091,  0.0337,
         0.0642, -0.0203,  0.0240, -0.0022, -0.1240, -0.0820, -0.0983, -0.0318,
         0.0787,  0.0828, -0.0375,  0.0257, -0.0785, -0.0705, -0.0888,  0.0786])
##########################################################
decoder.blks.block3.ffn.dense2.weight shape: torch.Size([64, 32])
tensor([[ 0.0014,  0.0306, -0.0080,  ..., -0.0263,  0.0550, -0.0407],
        [-0.0017,  0.0516, -0.0444,  ...,  0.0040, -0.0255,  0.0049],
        [ 0.0296, -0.0291,  0.0862,  ...,  0.1146,  0.0230,  0.0316],
        ...,
        [-0.0654, -0.0124, -0.1127,  ..., -0.0355,  0.0074,  0.1129],
        [ 0.0155,  0.0351,  0.0620,  ..., -0.0489,  0.0087, -0.0133],
        [-0.0047,  0.0255, -0.0248,  ...,  0.0178, -0.0295,  0.0121]])
tensor([[-0.0266,  0.0198,  0.0324,  ..., -0.0512,  0.0897, -0.0169],
        [ 0.0041,  0.0856,  0.0556,  ...,  0.0145, -0.0485,  0.0297],
        [ 0.0227, -0.0360,  0.0754,  ...,  0.1279,  0.0166, -0.0182],
        ...,
        [-0.0740,  0.0138, -0.0834,  ..., -0.0375,  0.1041,  0.1018],
        [ 0.0378,  0.0336,  0.0857,  ..., -0.0932,  0.0133,  0.0028],
        [-0.0149,  0.0255,  0.0968,  ..., -0.0218,  0.0015,  0.0063]])
##########################################################
decoder.blks.block3.ffn.dense2.bias shape: torch.Size([64])
tensor([-0.0680, -0.1683,  0.0130,  0.0849,  0.1659, -0.1293, -0.1463, -0.0395,
         0.0616,  0.0595,  0.0076, -0.1257,  0.1324,  0.0822,  0.0854,  0.1204,
         0.1209,  0.1404,  0.1160, -0.1464, -0.0153, -0.0668, -0.1555, -0.1758,
         0.0183, -0.0886,  0.1753,  0.0538,  0.0946,  0.0825, -0.1443, -0.0558,
         0.1643, -0.1510,  0.0307,  0.0739,  0.1437,  0.0810, -0.1643,  0.0595,
         0.1065,  0.1098, -0.1029,  0.0032, -0.0070, -0.0617,  0.1590, -0.0350,
         0.0810, -0.0830,  0.0314,  0.1572, -0.0436,  0.0709,  0.1236,  0.0790,
        -0.1736, -0.0405,  0.0865, -0.1036, -0.1024,  0.0920,  0.0092, -0.0122])
tensor([-0.0780, -0.1694,  0.0031,  0.0714,  0.1595, -0.1242, -0.1332, -0.0441,
         0.0534,  0.0439,  0.0115, -0.1109,  0.1304,  0.0831,  0.0764,  0.1204,
         0.1239,  0.1568,  0.0943, -0.1418, -0.0183, -0.0717, -0.1306, -0.1632,
         0.0110, -0.1063,  0.1474,  0.0389,  0.0961,  0.0823, -0.1396, -0.0443,
         0.1291, -0.1419,  0.0131,  0.0646,  0.1426,  0.0836, -0.1541,  0.0786,
         0.1013,  0.1330, -0.0897,  0.0033, -0.0193, -0.0479,  0.1690, -0.0561,
         0.0904, -0.0778,  0.0282,  0.1484, -0.0263,  0.0839,  0.1210,  0.0715,
        -0.1653, -0.0485,  0.0895, -0.1110, -0.1098,  0.0813,  0.0205, -0.0114])
##########################################################
decoder.blks.block3.addnorm3.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([0.9861, 1.0240, 1.0185, 0.9820, 1.0055, 1.0470, 1.0076, 0.9641, 1.0124,
        1.0188, 1.0256, 0.9653, 1.0122, 0.9993, 0.9988, 1.0333, 0.9850, 1.0282,
        1.0401, 1.0369, 1.0630, 0.9789, 1.0009, 1.0125, 1.0198, 1.0000, 1.0254,
        1.0045, 1.0274, 0.9775, 1.0265, 0.9838, 1.0344, 1.0235, 0.9876, 1.0168,
        1.0043, 1.0114, 1.0355, 1.0575, 0.9966, 1.0198, 1.0133, 1.0114, 1.0157,
        1.0231, 1.0118, 1.0115, 1.0344, 1.0555, 0.9947, 1.0240, 0.9876, 1.0325,
        1.0041, 1.0346, 1.0415, 0.9968, 1.0114, 1.0278, 1.0268, 1.0156, 0.9726,
        1.0472])
##########################################################
decoder.blks.block3.addnorm3.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-1.1939e-02, -3.7069e-03, -1.6481e-02, -1.6210e-02, -5.1253e-03,
         3.2579e-03,  1.5941e-02, -2.9362e-03, -1.5468e-02, -1.3667e-02,
         2.8514e-03,  1.3165e-02,  2.9431e-03,  2.3179e-03,  3.4487e-04,
        -4.0783e-04, -6.4545e-04,  1.5256e-02, -2.2332e-02, -1.7995e-04,
        -1.7841e-04,  3.2244e-03,  1.5782e-02,  1.3071e-02, -1.8161e-02,
        -1.7942e-02, -2.0242e-02, -1.6579e-02,  4.4575e-03, -2.0806e-03,
        -5.6810e-05,  3.7950e-03, -2.9791e-02,  5.0645e-03, -1.4795e-02,
        -1.3162e-02, -3.0023e-03,  1.0807e-02,  4.6596e-03,  3.3033e-02,
        -1.1051e-02,  3.7715e-02,  2.1657e-02,  1.4684e-02, -1.7580e-02,
         1.9695e-02,  1.0215e-02, -2.6863e-02,  2.1132e-02,  5.0702e-03,
        -6.8015e-03, -5.8740e-03,  2.4694e-02,  1.6210e-02,  1.3691e-02,
        -1.7494e-02, -5.7014e-03, -1.2940e-02, -1.4030e-03, -1.0270e-02,
        -3.2205e-03, -4.7830e-03,  1.8993e-02,  2.4724e-03])
##########################################################
decoder.blks.block4.attention1.W_q.weight shape: torch.Size([64, 64])
tensor([[ 0.0094,  0.1563,  0.1642,  ...,  0.0161, -0.1773, -0.0715],
        [-0.0650,  0.0983,  0.1339,  ...,  0.1250, -0.0160, -0.2430],
        [ 0.2409,  0.0701, -0.1935,  ..., -0.0924, -0.0947, -0.1533],
        ...,
        [ 0.2369,  0.2421,  0.1780,  ..., -0.2444,  0.0900,  0.1769],
        [ 0.0306,  0.0240,  0.0963,  ...,  0.0704, -0.0009,  0.1053],
        [ 0.0178, -0.1106, -0.0768,  ..., -0.0519, -0.0198, -0.0613]])
tensor([[ 0.0458,  0.0891,  0.1670,  ...,  0.0341, -0.2049, -0.1230],
        [-0.0660,  0.1467,  0.0799,  ...,  0.1849,  0.0361, -0.1990],
        [ 0.3148,  0.0495, -0.2290,  ..., -0.0461, -0.0542, -0.1519],
        ...,
        [ 0.2609,  0.1824,  0.1549,  ..., -0.1564,  0.0972,  0.1925],
        [ 0.0199,  0.0868,  0.0412,  ...,  0.0766,  0.0607,  0.1100],
        [-0.0280, -0.0999, -0.0970,  ..., -0.0928, -0.0186, -0.1149]])
##########################################################
decoder.blks.block4.attention1.W_k.weight shape: torch.Size([64, 64])
tensor([[ 0.0938,  0.1541,  0.1015,  ..., -0.0081, -0.0828,  0.0139],
        [ 0.2674, -0.0733, -0.0511,  ...,  0.0093, -0.0359, -0.0227],
        [ 0.0974, -0.0124, -0.1489,  ...,  0.1779, -0.1123,  0.0415],
        ...,
        [-0.0820, -0.2206,  0.0242,  ..., -0.1297,  0.1228, -0.0419],
        [ 0.0413, -0.1271, -0.0381,  ...,  0.1074, -0.0492,  0.1021],
        [ 0.2067,  0.2946, -0.0653,  ...,  0.1946, -0.0288, -0.1302]])
tensor([[ 0.0583,  0.1544,  0.1229,  ..., -0.0728, -0.0960, -0.0366],
        [ 0.2319, -0.0876, -0.0873,  ...,  0.0857, -0.0697, -0.0227],
        [ 0.0935,  0.0161, -0.1787,  ...,  0.2012, -0.1309,  0.0813],
        ...,
        [-0.0756, -0.2506,  0.0294,  ..., -0.2429,  0.1132, -0.0108],
        [ 0.0125, -0.1347, -0.0175,  ...,  0.0255, -0.0735,  0.0267],
        [ 0.2047,  0.2447,  0.0021,  ...,  0.1826, -0.0852, -0.0195]])
##########################################################
decoder.blks.block4.attention1.W_v.weight shape: torch.Size([64, 64])
tensor([[ 0.0120, -0.0489,  0.0170,  ...,  0.0532,  0.0064,  0.0234],
        [ 0.0758,  0.0692, -0.0496,  ..., -0.0161, -0.0081, -0.0247],
        [ 0.0120, -0.0496, -0.0179,  ..., -0.0932,  0.0743, -0.0940],
        ...,
        [ 0.0359,  0.0009,  0.0086,  ...,  0.0349,  0.0382,  0.0094],
        [-0.0500, -0.0034,  0.0192,  ...,  0.0579, -0.0358, -0.0232],
        [ 0.0441, -0.0473,  0.0139,  ...,  0.0019,  0.0165,  0.0732]])
tensor([[ 0.0527, -0.1940,  0.0825,  ...,  0.0560, -0.0391,  0.0214],
        [ 0.0357,  0.1338, -0.0538,  ..., -0.0186,  0.0119, -0.0179],
        [ 0.0185, -0.0965, -0.0179,  ..., -0.0464,  0.1069, -0.1269],
        ...,
        [ 0.0039,  0.0559,  0.0415,  ...,  0.0858,  0.0475, -0.0153],
        [-0.0818,  0.0298,  0.0910,  ...,  0.1189, -0.0449, -0.0555],
        [ 0.0942, -0.0382, -0.0311,  ..., -0.0394,  0.0277,  0.0695]])
##########################################################
decoder.blks.block4.attention1.W_o.weight shape: torch.Size([64, 64])
tensor([[ 0.0030, -0.0635, -0.0044,  ...,  0.0682, -0.0608,  0.0795],
        [ 0.0045,  0.0159,  0.0503,  ...,  0.0178, -0.0193, -0.0529],
        [ 0.0392,  0.0102, -0.0348,  ...,  0.0504, -0.0031,  0.0445],
        ...,
        [ 0.0385,  0.0367, -0.1189,  ...,  0.0128, -0.0017, -0.0400],
        [ 0.0275,  0.0238,  0.0277,  ...,  0.0120,  0.0568,  0.0093],
        [ 0.0049,  0.0181,  0.0328,  ..., -0.0340,  0.0073,  0.0142]])
tensor([[ 0.0209, -0.0798, -0.0280,  ...,  0.0860, -0.0632,  0.0593],
        [-0.1105,  0.1035,  0.0692,  ...,  0.0288,  0.0339, -0.1036],
        [ 0.0109, -0.0186,  0.0077,  ..., -0.0005, -0.0250,  0.1422],
        ...,
        [ 0.0980,  0.0322, -0.0909,  ..., -0.0439, -0.0711, -0.0346],
        [ 0.0485,  0.0458, -0.0593,  ...,  0.0972,  0.0988, -0.1555],
        [ 0.0278,  0.0765,  0.1055,  ..., -0.0883, -0.0715,  0.0225]])
##########################################################
decoder.blks.block4.addnorm1.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([0.9740, 0.9997, 1.0311, 0.9992, 1.0088, 1.0356, 1.0169, 0.9414, 1.0182,
        0.9823, 1.0418, 1.0061, 1.0142, 1.0007, 1.0103, 1.0089, 0.9804, 1.0229,
        1.0187, 1.0328, 1.0617, 0.9969, 0.9844, 0.9921, 1.0068, 0.9880, 1.0402,
        1.0083, 1.0065, 1.0030, 1.0237, 0.9748, 1.0079, 1.0353, 0.9972, 1.0217,
        0.9782, 1.0171, 1.0388, 1.0071, 0.9311, 1.0372, 1.0194, 1.0060, 1.0046,
        1.0005, 1.0072, 1.0006, 1.0110, 1.0477, 0.9849, 1.0065, 0.9832, 1.0144,
        0.9801, 1.0325, 1.0142, 0.9724, 1.0096, 1.0163, 1.0213, 1.0386, 0.9986,
        1.0523])
##########################################################
decoder.blks.block4.addnorm1.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-0.0124,  0.0077, -0.0110, -0.0097, -0.0072, -0.0150,  0.0198,  0.0079,
        -0.0141, -0.0119, -0.0004,  0.0070,  0.0077,  0.0023,  0.0007, -0.0004,
         0.0085,  0.0103, -0.0182, -0.0026,  0.0099,  0.0113,  0.0119,  0.0078,
        -0.0158, -0.0091, -0.0163, -0.0101,  0.0133, -0.0164, -0.0019, -0.0202,
        -0.0173, -0.0024, -0.0187, -0.0144, -0.0122,  0.0103, -0.0075,  0.0129,
        -0.0176,  0.0256,  0.0209,  0.0139, -0.0136,  0.0154,  0.0090, -0.0246,
         0.0190,  0.0083, -0.0028,  0.0080,  0.0085,  0.0122,  0.0048, -0.0045,
        -0.0061, -0.0058, -0.0017, -0.0079, -0.0053, -0.0017,  0.0113, -0.0098])
##########################################################
decoder.blks.block4.attention2.W_q.weight shape: torch.Size([64, 64])
tensor([[ 0.2311, -0.1478, -0.0105,  ...,  0.1109,  0.0015, -0.0363],
        [-0.0515,  0.2054, -0.0413,  ...,  0.0313,  0.0668,  0.1375],
        [-0.0629, -0.0464, -0.0122,  ..., -0.0735, -0.0058, -0.0279],
        ...,
        [-0.1179, -0.0712, -0.0241,  ..., -0.1273,  0.1025,  0.2498],
        [ 0.0338, -0.0617,  0.1507,  ...,  0.0220, -0.1813,  0.0142],
        [-0.0482,  0.2867, -0.0136,  ..., -0.0059,  0.0574, -0.1075]])
tensor([[ 0.2247, -0.0953, -0.0300,  ...,  0.0765,  0.0378, -0.0576],
        [-0.0357,  0.1695, -0.0987,  ...,  0.0554,  0.0455,  0.0953],
        [-0.0746, -0.0572, -0.0220,  ...,  0.0271,  0.0035, -0.0679],
        ...,
        [-0.1067, -0.0538, -0.0491,  ..., -0.1140,  0.1084,  0.2521],
        [ 0.0168, -0.0637,  0.2064,  ..., -0.0014, -0.2314, -0.0208],
        [-0.0694,  0.3003,  0.0042,  ..., -0.0311,  0.0695, -0.1077]])
##########################################################
decoder.blks.block4.attention2.W_k.weight shape: torch.Size([64, 64])
tensor([[ 0.0850,  0.2062,  0.0816,  ...,  0.0095,  0.0338,  0.0869],
        [ 0.0347,  0.0441, -0.1146,  ..., -0.0710, -0.2177,  0.1436],
        [-0.1163,  0.1337,  0.1522,  ..., -0.0983, -0.0848,  0.0160],
        ...,
        [ 0.0029, -0.0433,  0.0701,  ..., -0.0118, -0.1956,  0.1520],
        [ 0.0803, -0.1626, -0.1710,  ..., -0.0795,  0.0479,  0.0791],
        [ 0.1416,  0.1137,  0.0460,  ...,  0.1405,  0.1848,  0.0531]])
tensor([[ 0.0261,  0.1566,  0.1296,  ...,  0.0272,  0.0670,  0.1116],
        [ 0.0661, -0.0199, -0.0922,  ..., -0.0707, -0.2439,  0.1575],
        [-0.1154,  0.1116,  0.0779,  ..., -0.0780, -0.0543,  0.0324],
        ...,
        [ 0.0105,  0.0109,  0.0762,  ..., -0.0652, -0.2977,  0.1046],
        [ 0.0683, -0.2012, -0.1373,  ..., -0.0895,  0.0890,  0.1355],
        [ 0.1380,  0.0899,  0.1316,  ...,  0.1347,  0.2261,  0.0748]])
##########################################################
decoder.blks.block4.attention2.W_v.weight shape: torch.Size([64, 64])
tensor([[ 7.2069e-02,  1.3530e-02, -3.4305e-02,  ..., -5.2643e-03,
         -5.3199e-02,  1.9351e-02],
        [-2.7913e-02, -4.2721e-02,  5.2100e-02,  ..., -7.1785e-02,
          3.2705e-02,  7.6487e-03],
        [ 1.4885e-02, -2.1747e-05,  3.8729e-02,  ..., -1.5822e-02,
          3.2992e-03,  5.0700e-03],
        ...,
        [ 1.0333e-01, -2.6635e-02, -5.1219e-02,  ...,  5.2450e-02,
          6.5534e-02, -6.5751e-02],
        [-4.1593e-03,  2.8986e-03,  5.5852e-02,  ...,  5.1154e-02,
          2.5836e-02,  5.6513e-03],
        [ 3.3187e-02, -1.4473e-02, -2.1291e-02,  ...,  4.1915e-02,
         -2.0672e-02,  1.2894e-03]])
tensor([[ 0.1023,  0.0482,  0.0289,  ..., -0.0777, -0.1179, -0.0336],
        [ 0.0037, -0.0547,  0.0618,  ..., -0.0850,  0.0283, -0.0308],
        [ 0.0453,  0.0243,  0.0645,  ..., -0.0559, -0.0521, -0.0615],
        ...,
        [ 0.1236, -0.0045, -0.0142,  ...,  0.0298,  0.0138, -0.0630],
        [-0.0126, -0.0043, -0.0429,  ...,  0.0655,  0.0459, -0.0180],
        [ 0.0705, -0.0293, -0.0615,  ...,  0.0346, -0.0022, -0.0047]])
##########################################################
decoder.blks.block4.attention2.W_o.weight shape: torch.Size([64, 64])
tensor([[-0.0104,  0.0091,  0.0316,  ...,  0.0291, -0.0305,  0.0405],
        [ 0.0289,  0.0147,  0.0883,  ..., -0.1043,  0.0112,  0.0100],
        [-0.0593,  0.0835,  0.0508,  ...,  0.0203, -0.0100, -0.0396],
        ...,
        [ 0.0179, -0.0759,  0.0581,  ...,  0.0427, -0.0469, -0.0005],
        [-0.0481, -0.0313, -0.0767,  ..., -0.0371,  0.0243, -0.0073],
        [-0.0320, -0.0646,  0.0174,  ..., -0.0928,  0.0228,  0.0449]])
tensor([[-0.0444, -0.0307,  0.0708,  ...,  0.0207,  0.0029,  0.0424],
        [ 0.0380,  0.0179,  0.0346,  ..., -0.1168,  0.0283,  0.0474],
        [-0.0503,  0.1031,  0.0287,  ...,  0.0598, -0.0692,  0.0233],
        ...,
        [ 0.0293, -0.0754,  0.0231,  ...,  0.0821,  0.0086, -0.0010],
        [-0.0671, -0.0263, -0.0529,  ..., -0.0386, -0.0098,  0.0242],
        [-0.0570, -0.0647,  0.0007,  ..., -0.1126,  0.0699,  0.0103]])
##########################################################
decoder.blks.block4.addnorm2.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([0.9774, 0.9854, 1.0103, 1.0034, 1.0088, 0.9847, 0.9999, 0.9311, 1.0076,
        0.9677, 1.0320, 0.9974, 1.0393, 1.0044, 0.9972, 1.0291, 0.9801, 1.0148,
        1.0112, 1.0085, 1.0436, 1.0042, 0.9740, 0.9635, 0.9814, 0.9784, 1.0345,
        1.0051, 1.0043, 1.0108, 1.0219, 0.9711, 0.9564, 1.0145, 0.9880, 1.0124,
        0.9866, 1.0149, 1.0352, 0.9893, 0.9148, 1.0245, 1.0121, 1.0043, 0.9917,
        0.9910, 0.9921, 1.0089, 1.0330, 1.0435, 0.9850, 1.0311, 0.9718, 1.0183,
        0.9748, 0.9947, 0.9904, 0.9700, 1.0155, 1.0029, 1.0280, 1.0522, 0.9885,
        1.0622])
##########################################################
decoder.blks.block4.addnorm2.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-0.0120, -0.0016, -0.0146, -0.0090, -0.0046,  0.0023,  0.0126,  0.0015,
        -0.0130, -0.0051,  0.0039,  0.0070,  0.0066,  0.0021, -0.0020,  0.0087,
         0.0177,  0.0003, -0.0105, -0.0136, -0.0027,  0.0201,  0.0078,  0.0003,
        -0.0065, -0.0044, -0.0185, -0.0130,  0.0111, -0.0162, -0.0082, -0.0171,
        -0.0160,  0.0107, -0.0110, -0.0162, -0.0002,  0.0056,  0.0034,  0.0046,
        -0.0152,  0.0207,  0.0222,  0.0105, -0.0141,  0.0014,  0.0120, -0.0060,
         0.0128,  0.0051, -0.0036,  0.0180,  0.0124,  0.0118,  0.0061, -0.0069,
         0.0036,  0.0007,  0.0036, -0.0144, -0.0072, -0.0099,  0.0176, -0.0010])
##########################################################
decoder.blks.block4.ffn.dense1.weight shape: torch.Size([32, 64])
tensor([[ 0.0747,  0.0457, -0.0594,  ..., -0.0468, -0.0484, -0.0879],
        [ 0.0430,  0.0267,  0.0304,  ...,  0.0300,  0.0170,  0.1148],
        [-0.0164, -0.0507, -0.0739,  ..., -0.0226, -0.0457, -0.0043],
        ...,
        [ 0.0052, -0.0321, -0.0184,  ..., -0.0235, -0.0208, -0.0352],
        [-0.0123, -0.0339, -0.0224,  ..., -0.0040,  0.0280, -0.1135],
        [ 0.0297, -0.0039,  0.0143,  ..., -0.0079,  0.0093,  0.0029]])
tensor([[ 0.0992,  0.0264, -0.1242,  ..., -0.0221, -0.0396, -0.1255],
        [ 0.0047,  0.0363,  0.0039,  ...,  0.0896,  0.0186,  0.1742],
        [-0.0325,  0.0092, -0.0918,  ..., -0.0799, -0.0696, -0.0003],
        ...,
        [-0.0247, -0.0444, -0.0061,  ..., -0.0047, -0.0587, -0.0422],
        [-0.0583, -0.0240, -0.0642,  ...,  0.0260,  0.0389, -0.0714],
        [-0.0344,  0.0268, -0.0172,  ..., -0.0469,  0.0198, -0.0359]])
##########################################################
decoder.blks.block4.ffn.dense1.bias shape: torch.Size([32])
tensor([-0.1037, -0.0016,  0.0606, -0.0921, -0.0013,  0.0141,  0.1061,  0.0972,
        -0.0510, -0.1218,  0.0124, -0.1110, -0.0943, -0.0696,  0.0081,  0.0953,
         0.0593,  0.0563, -0.1189,  0.0265,  0.1062, -0.0754, -0.0695, -0.0519,
        -0.0407, -0.0074,  0.0666, -0.1085, -0.1155, -0.0945, -0.0378, -0.1146])
tensor([-0.0981,  0.0006,  0.0581, -0.0734, -0.0068,  0.0239,  0.1118,  0.1233,
        -0.0556, -0.1215, -0.0026, -0.0900, -0.1139, -0.0711,  0.0027,  0.0799,
         0.0515,  0.0893, -0.0771, -0.0067,  0.1008, -0.0563, -0.0752, -0.0649,
        -0.0244,  0.0028,  0.0672, -0.1014, -0.1009, -0.0874, -0.0296, -0.0855])
##########################################################
decoder.blks.block4.ffn.dense2.weight shape: torch.Size([64, 32])
tensor([[ 0.0402,  0.0638, -0.0434,  ..., -0.0268, -0.0165, -0.0821],
        [-0.1351,  0.1299,  0.0883,  ..., -0.0834,  0.0633, -0.0139],
        [ 0.0138, -0.0490, -0.0378,  ...,  0.0783, -0.0506, -0.0881],
        ...,
        [ 0.0400, -0.0541,  0.1347,  ..., -0.0491,  0.0079, -0.0498],
        [-0.0780, -0.0484, -0.0075,  ...,  0.0231, -0.0208,  0.0622],
        [ 0.0365, -0.0094,  0.0209,  ...,  0.0342, -0.0188,  0.0236]])
tensor([[ 0.0603,  0.0501, -0.0244,  ..., -0.0875, -0.0527, -0.1062],
        [-0.1829,  0.1376,  0.1041,  ..., -0.0474,  0.0868, -0.0037],
        [ 0.0155, -0.0474, -0.0552,  ...,  0.1074, -0.0818, -0.0597],
        ...,
        [ 0.0312, -0.0597,  0.1453,  ..., -0.0756, -0.0261, -0.0839],
        [-0.1229, -0.1009,  0.0438,  ..., -0.0004,  0.0506,  0.0843],
        [-0.0052, -0.0516,  0.0298,  ..., -0.0289, -0.0388,  0.0448]])
##########################################################
decoder.blks.block4.ffn.dense2.bias shape: torch.Size([64])
tensor([ 0.1321, -0.1365, -0.1569, -0.1420, -0.0525,  0.1581, -0.1724, -0.1580,
         0.1668, -0.0525, -0.1538, -0.1146, -0.0816,  0.0035, -0.1612, -0.0971,
        -0.0181,  0.0638,  0.0518, -0.1536, -0.1156,  0.0433, -0.0669,  0.0486,
        -0.1460,  0.0284, -0.0285, -0.1173, -0.1027,  0.0330, -0.1305, -0.0811,
         0.0617, -0.1014,  0.1131,  0.0533,  0.0750,  0.0451,  0.1531, -0.1736,
        -0.1430,  0.0184, -0.1677, -0.0261,  0.0553, -0.0009, -0.0448,  0.0247,
         0.0899, -0.1276,  0.0237, -0.1194, -0.1171,  0.1595, -0.0472,  0.0738,
        -0.0399, -0.1204,  0.1014, -0.0026, -0.1125,  0.0605, -0.0211,  0.0603])
tensor([ 0.1234, -0.1350, -0.1709, -0.1491, -0.0576,  0.1606, -0.1592, -0.1535,
         0.1515, -0.0542, -0.1461, -0.1024, -0.0710,  0.0069, -0.1620, -0.0820,
        -0.0013,  0.0613,  0.0415, -0.1691, -0.1230,  0.0598, -0.0557,  0.0478,
        -0.1493,  0.0266, -0.0527, -0.1247, -0.0900,  0.0177, -0.1377, -0.0954,
         0.0462, -0.0873,  0.0979,  0.0379,  0.0752,  0.0508,  0.1518, -0.1658,
        -0.1585,  0.0406, -0.1452, -0.0226,  0.0401,  0.0005, -0.0324,  0.0149,
         0.0976, -0.1160,  0.0209, -0.1032, -0.1055,  0.1707, -0.0414,  0.0642,
        -0.0390, -0.1120,  0.0997, -0.0204, -0.1147,  0.0481,  0.0006,  0.0588])
##########################################################
decoder.blks.block4.addnorm3.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([0.9951, 1.0069, 1.0320, 1.0258, 1.0122, 0.9946, 1.0183, 0.9780, 1.0252,
        0.9955, 1.0387, 1.0079, 1.0463, 1.0127, 1.0156, 1.0803, 1.0158, 1.0502,
        1.0376, 1.0127, 1.0716, 1.0441, 1.0030, 0.9786, 1.0060, 1.0017, 1.0530,
        1.0473, 1.0196, 1.0188, 1.0274, 1.0090, 1.0393, 1.0460, 0.9993, 1.0286,
        1.0317, 1.0191, 1.0610, 1.0154, 0.9482, 1.0899, 1.0244, 1.0421, 1.0198,
        1.0084, 1.0218, 1.0284, 1.0693, 1.0613, 1.0013, 1.0395, 1.0059, 1.0200,
        0.9982, 1.0472, 1.0096, 1.0000, 1.0014, 1.0079, 1.0617, 1.0723, 1.0022,
        1.0915])
##########################################################
decoder.blks.block4.addnorm3.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-0.0116, -0.0135, -0.0207, -0.0158, -0.0105,  0.0027,  0.0115, -0.0022,
        -0.0258, -0.0163,  0.0022,  0.0245,  0.0104,  0.0057, -0.0087,  0.0153,
         0.0208,  0.0083, -0.0288, -0.0099, -0.0087,  0.0023,  0.0144,  0.0187,
        -0.0118, -0.0077, -0.0229, -0.0184,  0.0096, -0.0185,  0.0002, -0.0148,
        -0.0293,  0.0054, -0.0176, -0.0120,  0.0039,  0.0148,  0.0056,  0.0214,
        -0.0111,  0.0382,  0.0252,  0.0142, -0.0216,  0.0088,  0.0158,  0.0062,
         0.0305,  0.0098, -0.0131,  0.0117,  0.0267,  0.0189,  0.0109, -0.0435,
        -0.0011, -0.0175, -0.0014, -0.0112, -0.0144, -0.0217,  0.0176,  0.0024])
##########################################################
decoder.blks.block5.attention1.W_q.weight shape: torch.Size([64, 64])
tensor([[-0.1604,  0.1345,  0.0974,  ...,  0.1762,  0.0637,  0.1121],
        [ 0.0312,  0.0196, -0.1444,  ...,  0.0542,  0.0211, -0.0224],
        [ 0.2203,  0.0380,  0.0215,  ...,  0.1383, -0.1288,  0.2579],
        ...,
        [-0.0399, -0.1999,  0.0912,  ...,  0.0748,  0.0999, -0.1209],
        [-0.0975,  0.1678,  0.1356,  ..., -0.0790,  0.1473, -0.0564],
        [-0.1406,  0.1380,  0.1957,  ...,  0.1997, -0.0776, -0.1640]])
tensor([[-0.1971,  0.1148,  0.1323,  ...,  0.1912,  0.0353,  0.1513],
        [-0.0172,  0.0929, -0.1590,  ...,  0.1516,  0.0513,  0.1201],
        [ 0.2282,  0.0519,  0.0188,  ...,  0.1698, -0.1228,  0.2459],
        ...,
        [-0.0550, -0.1724,  0.1508,  ...,  0.0083,  0.0318, -0.0829],
        [-0.0880,  0.1724,  0.1079,  ..., -0.0748,  0.1748,  0.0168],
        [-0.0957,  0.0737,  0.1978,  ...,  0.1816, -0.0724, -0.0925]])
##########################################################
decoder.blks.block5.attention1.W_k.weight shape: torch.Size([64, 64])
tensor([[-0.1418, -0.1245, -0.1448,  ..., -0.0972,  0.0865, -0.1398],
        [ 0.1245,  0.0645,  0.0358,  ..., -0.1255,  0.0106, -0.1785],
        [-0.1072, -0.0630,  0.0673,  ...,  0.0332, -0.1430, -0.2278],
        ...,
        [-0.1205, -0.1861,  0.1899,  ...,  0.0429, -0.0860, -0.0567],
        [ 0.0085, -0.0756, -0.2098,  ...,  0.2589, -0.0063, -0.1412],
        [-0.1487,  0.0712,  0.1425,  ...,  0.0894,  0.0825,  0.0062]])
tensor([[-0.1477, -0.0391, -0.2234,  ..., -0.1576,  0.0924, -0.1865],
        [ 0.1564,  0.0232, -0.0070,  ..., -0.2235,  0.0252, -0.1798],
        [-0.1627, -0.0079,  0.0909,  ...,  0.0668, -0.1338, -0.2201],
        ...,
        [-0.0638, -0.2534,  0.1703,  ...,  0.0379, -0.1371, -0.1044],
        [ 0.0676, -0.0987, -0.3302,  ...,  0.1858,  0.0495, -0.1195],
        [-0.0888, -0.0315,  0.1891,  ...,  0.0686,  0.0060,  0.1218]])
##########################################################
decoder.blks.block5.attention1.W_v.weight shape: torch.Size([64, 64])
tensor([[ 0.0002,  0.0201,  0.0233,  ..., -0.0083, -0.0276, -0.0125],
        [ 0.0689, -0.0351,  0.0086,  ...,  0.0789, -0.0156, -0.0086],
        [ 0.0450, -0.0423,  0.0159,  ..., -0.0090, -0.0017,  0.0047],
        ...,
        [ 0.0098, -0.0097, -0.0571,  ..., -0.0171,  0.0190, -0.0343],
        [ 0.0007, -0.0430, -0.1049,  ...,  0.0506,  0.0599,  0.0659],
        [ 0.0584,  0.0023,  0.0085,  ...,  0.0159,  0.0717, -0.0111]])
tensor([[-0.0223, -0.0324, -0.0109,  ...,  0.0843, -0.0299, -0.0169],
        [ 0.0206, -0.0054,  0.0492,  ...,  0.1101, -0.0279,  0.0833],
        [ 0.0789, -0.0343, -0.0368,  ..., -0.0224,  0.0937, -0.0702],
        ...,
        [ 0.0474,  0.0092, -0.0631,  ...,  0.1790,  0.1197,  0.0179],
        [ 0.1037, -0.1005, -0.1085,  ...,  0.1595,  0.0868,  0.0958],
        [ 0.0321, -0.0778,  0.0391,  ...,  0.0885,  0.0472, -0.0468]])
##########################################################
decoder.blks.block5.attention1.W_o.weight shape: torch.Size([64, 64])
tensor([[ 0.0191,  0.0386,  0.0304,  ...,  0.0120,  0.0361, -0.0117],
        [-0.0043, -0.0136, -0.0353,  ...,  0.0280,  0.0555,  0.0213],
        [-0.0387,  0.0440,  0.0574,  ...,  0.0385,  0.0055, -0.0034],
        ...,
        [ 0.0931,  0.0203,  0.0832,  ...,  0.0629, -0.0707,  0.0375],
        [ 0.0985,  0.0664, -0.0209,  ...,  0.0005,  0.0228, -0.1152],
        [-0.0017, -0.0354, -0.0940,  ..., -0.0760, -0.0865, -0.0811]])
tensor([[ 0.0637,  0.0825,  0.0811,  ...,  0.0284,  0.0214,  0.0158],
        [ 0.0611, -0.0364, -0.0269,  ..., -0.0277,  0.0708,  0.0445],
        [-0.0344,  0.0467,  0.0244,  ...,  0.1113,  0.0523,  0.0495],
        ...,
        [ 0.1296,  0.0597,  0.1610,  ...,  0.0658, -0.1736,  0.1124],
        [ 0.2364,  0.0652, -0.0135,  ..., -0.0992, -0.0347, -0.1603],
        [-0.0190,  0.0020, -0.0838,  ..., -0.0877, -0.1254, -0.0196]])
##########################################################
decoder.blks.block5.addnorm1.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0233, 0.9171, 1.0030, 1.0303, 1.0096, 1.0189, 1.0018, 0.9934, 1.0022,
        0.9254, 1.0522, 1.0188, 1.0539, 0.9959, 1.0161, 1.0590, 1.0400, 1.0481,
        0.9671, 0.9672, 1.0488, 1.0476, 0.9845, 0.9826, 0.9964, 0.9529, 1.0368,
        1.0132, 0.9910, 1.0197, 0.9945, 0.9566, 0.9807, 1.0489, 1.0074, 1.0033,
        0.9944, 0.9956, 1.0324, 0.9305, 0.9029, 1.0625, 1.0161, 1.0376, 1.0333,
        1.0160, 1.0357, 1.0521, 1.0626, 1.0522, 1.0266, 1.0507, 1.0090, 1.0035,
        0.9509, 1.0412, 0.9636, 1.0225, 1.0156, 0.9868, 1.0308, 1.0171, 1.0119,
        1.0777])
##########################################################
decoder.blks.block5.addnorm1.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-7.0396e-03, -1.1085e-02, -1.5571e-02, -7.3818e-03, -1.8845e-02,
        -7.2747e-03,  1.0606e-02,  2.3208e-03, -1.1006e-02, -3.9012e-03,
        -2.1766e-03,  2.8786e-02,  1.7455e-03,  9.7429e-03, -8.6180e-03,
         5.9445e-03,  2.3559e-02,  3.5977e-03, -1.8745e-02, -6.0889e-03,
        -3.0358e-02, -6.3669e-03, -9.1930e-05,  1.1678e-02,  7.8425e-03,
         1.9303e-03, -1.9654e-02, -1.1239e-02, -2.0033e-03, -1.7933e-02,
         3.6636e-03, -2.5865e-02, -1.2963e-02,  1.2061e-02, -1.7100e-02,
        -1.0292e-02, -1.2479e-05,  1.8648e-02,  7.2183e-03, -4.3394e-04,
        -9.7110e-03,  2.3503e-02,  2.6015e-02,  4.5040e-03, -8.6793e-03,
        -1.0317e-03,  2.4721e-02,  9.4402e-05,  1.9416e-02,  1.1913e-02,
        -9.3099e-03,  3.8447e-03,  1.8773e-02,  1.7961e-02,  7.0921e-03,
        -3.0380e-02, -6.4709e-03, -1.1084e-03, -4.6183e-03, -1.9618e-02,
         4.6910e-03, -2.7600e-02,  2.1210e-02, -2.0674e-02])
##########################################################
decoder.blks.block5.attention2.W_q.weight shape: torch.Size([64, 64])
tensor([[ 0.1511,  0.0269,  0.0938,  ...,  0.2025,  0.0293,  0.1271],
        [-0.0739, -0.0419,  0.0568,  ..., -0.0886,  0.1573, -0.1764],
        [-0.0820,  0.0797,  0.0448,  ..., -0.2101, -0.0419, -0.1715],
        ...,
        [-0.1151,  0.0733,  0.0393,  ...,  0.0809, -0.1154, -0.1610],
        [ 0.0508,  0.0346,  0.1087,  ...,  0.1337, -0.0550,  0.0164],
        [ 0.0195,  0.0165, -0.2316,  ...,  0.2458, -0.1352,  0.0568]])
tensor([[ 0.1295, -0.0063,  0.0743,  ...,  0.2934,  0.0334,  0.1889],
        [-0.0895, -0.0204,  0.0225,  ..., -0.0915,  0.1681, -0.1791],
        [-0.0981,  0.0907,  0.0075,  ..., -0.2094, -0.0500, -0.1570],
        ...,
        [-0.0695,  0.0550,  0.0755,  ...,  0.1182, -0.0585, -0.2112],
        [ 0.0526,  0.0430,  0.0903,  ...,  0.1025, -0.0598,  0.0106],
        [ 0.0391, -0.0051, -0.2522,  ...,  0.2078, -0.1219,  0.1006]])
##########################################################
decoder.blks.block5.attention2.W_k.weight shape: torch.Size([64, 64])
tensor([[ 0.0179, -0.1072, -0.2423,  ...,  0.1746,  0.0013, -0.3074],
        [-0.0787, -0.0871, -0.1216,  ..., -0.0678, -0.0432,  0.0586],
        [-0.0261, -0.0694,  0.1408,  ...,  0.0166,  0.0525, -0.1081],
        ...,
        [-0.1899, -0.0864,  0.0654,  ...,  0.1317,  0.0150, -0.1828],
        [ 0.0220, -0.0832,  0.0176,  ..., -0.0230, -0.0500, -0.0722],
        [ 0.3232, -0.0735, -0.0720,  ..., -0.0983,  0.0081, -0.1832]])
tensor([[ 0.0439, -0.0372, -0.2363,  ...,  0.1749, -0.0108, -0.3111],
        [-0.0851, -0.0460,  0.0139,  ..., -0.0737, -0.0169,  0.0561],
        [-0.0480, -0.0325,  0.1299,  ...,  0.0013,  0.1112, -0.1242],
        ...,
        [-0.2056, -0.0892,  0.0826,  ...,  0.1476,  0.0186, -0.1706],
        [ 0.1117,  0.0082, -0.0565,  ..., -0.0930, -0.1383, -0.1374],
        [ 0.3801, -0.1550, -0.0388,  ..., -0.0856,  0.1869, -0.1626]])
##########################################################
decoder.blks.block5.attention2.W_v.weight shape: torch.Size([64, 64])
tensor([[ 0.0826,  0.0267, -0.0174,  ..., -0.0154,  0.0235, -0.0775],
        [ 0.0102,  0.0061, -0.0157,  ...,  0.0396,  0.0288, -0.0014],
        [ 0.0470, -0.0299, -0.0040,  ..., -0.0135,  0.0214, -0.0358],
        ...,
        [-0.0232, -0.0433,  0.0155,  ..., -0.0713, -0.0234,  0.0149],
        [-0.0583,  0.0466,  0.0842,  ..., -0.0283,  0.0203, -0.0730],
        [ 0.0239,  0.0202, -0.0005,  ...,  0.0089, -0.0028, -0.0079]])
tensor([[ 0.0928,  0.0294, -0.0176,  ..., -0.0775, -0.0408, -0.1651],
        [ 0.0088, -0.0293, -0.1463,  ...,  0.0033,  0.1051, -0.0094],
        [ 0.0728, -0.0375, -0.0366,  ..., -0.0947, -0.0161, -0.1012],
        ...,
        [-0.1141, -0.0700,  0.0384,  ..., -0.0749, -0.0042,  0.0174],
        [-0.0446,  0.0511, -0.0025,  ..., -0.0297,  0.0622, -0.0929],
        [ 0.0900, -0.0021,  0.0098,  ...,  0.0440, -0.0068,  0.0486]])
##########################################################
decoder.blks.block5.attention2.W_o.weight shape: torch.Size([64, 64])
tensor([[-0.0258, -0.0449,  0.0249,  ...,  0.0088,  0.0802,  0.0007],
        [-0.0111,  0.0304,  0.0154,  ..., -0.0091, -0.0140,  0.0336],
        [-0.0114,  0.0361,  0.0089,  ...,  0.0161,  0.0652,  0.0181],
        ...,
        [-0.0344, -0.0533,  0.0646,  ...,  0.0227,  0.0184, -0.0496],
        [ 0.0039, -0.0274, -0.0714,  ..., -0.0293, -0.0400, -0.0348],
        [ 0.0692,  0.0520, -0.0344,  ..., -0.0091, -0.0623,  0.0144]])
tensor([[-0.0356, -0.0741, -0.0331,  ..., -0.0427,  0.0620,  0.0063],
        [-0.0315,  0.1837,  0.0570,  ...,  0.0127, -0.0093,  0.0268],
        [-0.0410, -0.0522, -0.0378,  ..., -0.0143,  0.1735,  0.0154],
        ...,
        [-0.0880, -0.0167, -0.0395,  ...,  0.0088,  0.0752, -0.1775],
        [-0.0022,  0.0452, -0.0217,  ..., -0.0325, -0.0916, -0.1179],
        [ 0.0583,  0.1164, -0.0410,  ...,  0.0583, -0.0815, -0.0146]])
##########################################################
decoder.blks.block5.addnorm2.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0152, 0.9486, 1.0123, 1.0067, 0.9962, 1.0219, 0.9554, 1.0246, 0.9981,
        0.8579, 1.0256, 0.9922, 1.0550, 0.9779, 1.0280, 1.0579, 1.0363, 1.0576,
        0.9333, 0.9251, 1.0733, 0.9963, 0.9678, 0.9685, 0.9994, 0.9349, 1.0192,
        1.0317, 0.9483, 1.0223, 0.9756, 0.9488, 0.9323, 1.0359, 0.9973, 0.9684,
        0.9473, 0.9974, 1.0317, 0.9606, 0.9057, 1.0710, 1.0002, 1.0478, 1.0421,
        1.0029, 1.0131, 1.0572, 1.0736, 1.0385, 1.0231, 1.0441, 1.0082, 0.9679,
        0.9357, 1.0186, 0.9002, 1.0008, 1.0535, 0.9574, 1.0382, 1.0289, 1.0102,
        1.0686])
##########################################################
decoder.blks.block5.addnorm2.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-0.0127, -0.0106, -0.0198, -0.0043, -0.0237, -0.0090,  0.0127, -0.0003,
        -0.0019,  0.0053,  0.0058,  0.0236,  0.0061,  0.0090, -0.0061,  0.0010,
        -0.0093,  0.0036, -0.0094,  0.0073, -0.0222,  0.0020,  0.0019,  0.0055,
         0.0092, -0.0043, -0.0038, -0.0076, -0.0013, -0.0170,  0.0115, -0.0163,
        -0.0024,  0.0074, -0.0092, -0.0091,  0.0067,  0.0194,  0.0124, -0.0070,
         0.0022,  0.0210,  0.0232,  0.0048, -0.0011, -0.0077,  0.0247, -0.0012,
         0.0099,  0.0098,  0.0110,  0.0020,  0.0119,  0.0090,  0.0048, -0.0106,
        -0.0149, -0.0003, -0.0144,  0.0017, -0.0021, -0.0317,  0.0268, -0.0199])
##########################################################
decoder.blks.block5.ffn.dense1.weight shape: torch.Size([32, 64])
tensor([[-0.0032,  0.0033, -0.0817,  ...,  0.0828,  0.0984, -0.0457],
        [ 0.1030, -0.0087, -0.0112,  ..., -0.0445,  0.0410,  0.1224],
        [ 0.0672, -0.0544,  0.0662,  ..., -0.0758,  0.0274,  0.0553],
        ...,
        [-0.1094,  0.0543, -0.0199,  ..., -0.0047, -0.0102,  0.0296],
        [-0.0346, -0.0327, -0.0297,  ...,  0.0744,  0.0479,  0.0929],
        [ 0.0108, -0.0473, -0.0025,  ...,  0.0050, -0.0439, -0.0707]])
tensor([[-0.0065, -0.0166, -0.1754,  ..., -0.0615,  0.2332,  0.0361],
        [ 0.1401, -0.0006, -0.1156,  ..., -0.0128,  0.0662,  0.1478],
        [ 0.4152,  0.0575,  0.1512,  ..., -0.1833,  0.2280,  0.0380],
        ...,
        [-0.1555,  0.0642, -0.0251,  ..., -0.0109, -0.0170,  0.0340],
        [ 0.1172, -0.1898, -0.0491,  ...,  0.1257, -0.0502,  0.1202],
        [ 0.0602, -0.0645,  0.0651,  ..., -0.0246, -0.2186, -0.0326]])
##########################################################
decoder.blks.block5.ffn.dense1.bias shape: torch.Size([32])
tensor([-0.0129, -0.0117, -0.0673,  0.1131, -0.0226, -0.0917,  0.0436, -0.0427,
         0.1219, -0.0875,  0.0141,  0.0200,  0.0356,  0.0529, -0.1225,  0.0642,
        -0.0178, -0.0658,  0.0122, -0.0772,  0.0476,  0.0030, -0.0186, -0.0090,
         0.0637,  0.0606,  0.0275,  0.0494,  0.0439, -0.0835,  0.0017,  0.0738])
tensor([ 0.0214, -0.0088, -0.1249,  0.1195, -0.0062, -0.0672,  0.0539, -0.0183,
         0.1175, -0.0910, -0.0094,  0.0083,  0.0298,  0.0812, -0.1097,  0.0824,
        -0.0368, -0.0296,  0.0513, -0.0862,  0.0342,  0.0085,  0.0404, -0.0004,
         0.0829,  0.0851,  0.0479,  0.1042,  0.0677, -0.0712, -0.0196,  0.0499])
##########################################################
decoder.blks.block5.ffn.dense2.weight shape: torch.Size([64, 32])
tensor([[ 0.1123,  0.0211,  0.0648,  ...,  0.0026,  0.0289, -0.0271],
        [ 0.0680, -0.0257,  0.0308,  ..., -0.0066, -0.0605,  0.0406],
        [-0.0271,  0.0090,  0.0714,  ..., -0.1362,  0.0313,  0.0049],
        ...,
        [ 0.0055,  0.0101,  0.0533,  ...,  0.0095, -0.0747, -0.0685],
        [ 0.0285, -0.0061, -0.0084,  ..., -0.0817, -0.0640, -0.0289],
        [-0.1213, -0.0567,  0.0309,  ..., -0.0301,  0.0832, -0.0348]])
tensor([[-0.0664,  0.1065,  0.0160,  ..., -0.0364,  0.2286, -0.0465],
        [-0.1835, -0.0576,  0.0218,  ..., -0.0185, -0.0329,  0.0116],
        [-0.1188, -0.0566,  0.1106,  ..., -0.1264, -0.0838, -0.0075],
        ...,
        [-0.2183,  0.1243,  0.0615,  ..., -0.0348, -0.0382, -0.2416],
        [ 0.1357, -0.0071,  0.2128,  ..., -0.0786, -0.1227, -0.1120],
        [-0.2679, -0.0193, -0.2962,  ..., -0.1044,  0.2120, -0.0505]])
##########################################################
decoder.blks.block5.ffn.dense2.bias shape: torch.Size([64])
tensor([ 0.1186,  0.1055,  0.0135,  0.0515, -0.0479, -0.1614,  0.1446, -0.1757,
         0.0318, -0.0894,  0.0943, -0.0170, -0.1049,  0.0355,  0.1527,  0.0821,
         0.1611, -0.1293, -0.1555, -0.0245,  0.0055, -0.1166,  0.0302,  0.0275,
         0.1008,  0.1568,  0.0495, -0.0033, -0.0211, -0.1699,  0.0197, -0.0062,
        -0.1258, -0.1471, -0.1386,  0.0349,  0.0629, -0.0266,  0.0430,  0.1219,
         0.1166,  0.1124, -0.1362, -0.1488,  0.0491, -0.0141, -0.1145, -0.1095,
         0.0745,  0.0611, -0.0039,  0.1533, -0.1379, -0.0489, -0.1073,  0.0954,
         0.1072,  0.1629, -0.0328,  0.1331, -0.1003,  0.0034, -0.1004, -0.0578])
tensor([ 0.1099,  0.0888, -0.0026,  0.0468, -0.0702, -0.1738,  0.1556, -0.1754,
         0.0254, -0.0851,  0.0971,  0.0088, -0.1030,  0.0414,  0.1482,  0.0757,
         0.1451, -0.1297, -0.1608, -0.0183, -0.0130, -0.1102,  0.0311,  0.0332,
         0.1092,  0.1522,  0.0405, -0.0103, -0.0253, -0.1822,  0.0316, -0.0223,
        -0.1290, -0.1380, -0.1420,  0.0272,  0.0690, -0.0046,  0.0557,  0.1105,
         0.1191,  0.1291, -0.1185, -0.1415,  0.0419, -0.0276, -0.0893, -0.1114,
         0.0828,  0.0746,  0.0079,  0.1531, -0.1303, -0.0463, -0.0942,  0.0902,
         0.0848,  0.1624, -0.0483,  0.1366, -0.0955, -0.0240, -0.0771, -0.0815])
##########################################################
decoder.blks.block5.addnorm3.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.3216, 1.3243, 1.3307, 1.2932, 1.3642, 1.4077, 1.2827, 1.3698, 1.3052,
        1.3607, 1.3246, 1.3342, 1.3171, 1.2660, 1.3690, 1.3288, 1.3319, 1.4031,
        1.3698, 1.2213, 1.4819, 1.3537, 1.3812, 1.3123, 1.3025, 1.2918, 1.3366,
        1.3579, 1.2767, 1.4163, 1.3483, 1.2299, 1.2602, 1.3529, 1.3188, 1.3293,
        1.2798, 1.2458, 1.3705, 1.2605, 1.3262, 1.4158, 1.3264, 1.4211, 1.3247,
        1.2927, 1.2907, 1.3750, 1.4445, 1.3851, 1.4021, 1.4525, 1.2968, 1.3473,
        1.2897, 1.3727, 1.2906, 1.3314, 1.3762, 1.3172, 1.3424, 1.4789, 1.3355,
        1.4119])
##########################################################
decoder.blks.block5.addnorm3.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-0.2031,  0.1795, -0.1853, -0.1999,  0.1945,  0.1791,  0.1722, -0.1972,
        -0.2010, -0.1756,  0.1423,  0.1081,  0.1781, -0.1618, -0.2057,  0.1901,
         0.1949,  0.1838, -0.2192, -0.1713, -0.1756, -0.1849,  0.1695,  0.2074,
        -0.1433, -0.1947, -0.1982, -0.1846,  0.1813,  0.1667, -0.2039,  0.1435,
        -0.1785,  0.1696,  0.1252, -0.2050,  0.1930, -0.1501,  0.1968,  0.1831,
        -0.1940,  0.2247,  0.2294, -0.1878, -0.1510,  0.1827,  0.1455,  0.1958,
         0.2120, -0.2306, -0.2004,  0.1869,  0.1988,  0.1906, -0.1804, -0.2055,
         0.1946, -0.1706,  0.1660, -0.2166, -0.1888, -0.2147,  0.2157,  0.1782])
##########################################################
decoder.dense.weight shape: torch.Size([166, 64])
tensor([[ 0.0418, -0.0015, -0.0162,  ...,  0.0423,  0.0081, -0.0067],
        [ 0.0087,  0.0460,  0.0076,  ...,  0.0485,  0.0271,  0.0006],
        [-0.0232, -0.0140, -0.0102,  ..., -0.0031, -0.0196,  0.0583],
        ...,
        [-0.0688, -0.0085, -0.0274,  ...,  0.0215, -0.0044,  0.0183],
        [-0.0056,  0.0281,  0.0135,  ..., -0.0740,  0.0466,  0.0527],
        [-0.0278,  0.0218, -0.0379,  ...,  0.0402, -0.0301, -0.0299]])
tensor([[ 0.1435, -0.0760,  0.0754,  ...,  0.1305, -0.1045, -0.0818],
        [ 0.1102, -0.0353,  0.0946,  ...,  0.1306, -0.0800, -0.0856],
        [ 0.0768, -0.0815,  0.0961,  ...,  0.0727, -0.1305, -0.0319],
        ...,
        [ 0.0292, -0.0818,  0.0700,  ...,  0.1153, -0.1217, -0.0766],
        [ 0.0947, -0.0489,  0.0971,  ...,  0.0256, -0.0499, -0.0235],
        [ 0.0695, -0.0554,  0.0618,  ...,  0.1245, -0.1515, -0.1196]])
##########################################################
decoder.dense.bias shape: torch.Size([166])
tensor([-1.0796e-01, -4.3733e-02,  1.0571e-02, -1.1413e-01, -6.2166e-02,
        -5.7815e-02, -1.1122e-01,  9.1325e-02,  9.8864e-02, -1.0285e-02,
        -7.1417e-02, -7.2376e-02,  8.6115e-02, -1.1775e-01, -2.0229e-02,
         1.3419e-02, -1.1170e-02, -4.4290e-02,  4.3261e-02,  1.2159e-01,
         5.7948e-02,  8.4409e-02,  1.1192e-01,  1.4197e-02,  7.2677e-02,
        -6.4966e-02,  2.3370e-02, -1.1571e-01, -8.2582e-02, -3.0905e-02,
        -9.0416e-02, -1.0089e-01,  8.6030e-02, -2.2688e-02, -2.9270e-02,
         9.8048e-02, -8.0257e-02, -3.1890e-02, -1.0078e-01,  2.2536e-02,
         1.2138e-01,  5.0671e-02, -5.8975e-02, -6.5879e-02,  1.1861e-01,
         2.9397e-02,  7.0720e-02, -8.7537e-03,  6.4070e-02,  7.3788e-02,
        -1.2143e-01,  5.9006e-02, -6.3149e-02, -5.3429e-02, -5.3403e-02,
        -7.4306e-02,  3.0482e-02,  2.3166e-02,  5.0514e-02, -6.2963e-02,
         1.1654e-01, -1.3377e-02,  8.6107e-02, -5.0847e-02, -1.1885e-01,
         2.3143e-03, -2.9118e-02,  1.4045e-02, -3.0627e-02, -1.9328e-02,
        -1.7950e-03,  2.5309e-02, -1.0375e-01,  7.3190e-02, -7.6721e-02,
        -6.5281e-02, -2.7788e-02, -9.3974e-02, -5.5763e-02,  8.3193e-02,
        -5.1480e-02,  2.7518e-02, -2.9151e-02,  8.3063e-02,  6.1730e-03,
        -1.0520e-01,  7.2136e-02, -4.0255e-02, -8.4455e-02, -2.9165e-02,
        -1.1787e-01, -7.8361e-02,  1.0667e-01,  9.8524e-02,  8.7246e-02,
         5.5287e-02, -2.9356e-02, -1.7712e-02,  1.0860e-01,  7.9218e-02,
         8.2106e-02, -3.6563e-02,  2.9915e-02,  1.0530e-01,  8.8132e-02,
         3.6187e-02,  3.6453e-02, -1.2323e-01,  6.9053e-02,  8.5816e-02,
         1.1739e-02, -4.7842e-02,  6.1929e-05, -3.1929e-02, -9.0516e-02,
         7.1086e-02, -8.1373e-02, -5.7282e-02,  3.3870e-03,  1.1148e-01,
        -1.1865e-01, -6.7960e-02,  1.7448e-02, -6.8830e-02,  7.9971e-02,
         3.2632e-02,  8.2372e-02, -4.7297e-02,  3.4128e-03,  1.1555e-01,
         1.1199e-01, -3.8484e-02, -9.5756e-02,  1.1768e-01, -7.9070e-02,
        -8.5025e-02, -1.0676e-01,  1.1881e-02, -3.8869e-02, -1.0754e-01,
         1.0034e-01,  4.6521e-02, -9.9387e-02,  5.7376e-02,  8.3910e-02,
         2.7191e-02, -1.1163e-01, -2.8478e-02,  4.6571e-03, -4.0008e-02,
         3.6045e-02, -1.3333e-02,  8.0242e-02, -1.1307e-01,  1.1980e-01,
         6.2506e-02, -5.4953e-04, -9.8797e-03, -8.1450e-02, -2.5637e-02,
         7.1962e-02,  6.0376e-02,  6.0831e-02, -9.6111e-02,  3.4495e-02,
        -7.6213e-03])
tensor([-0.2041, -0.1408, -0.0927, -0.0962,  0.0346,  0.0311, -0.0261,  0.1637,
         0.1551,  0.0533, -0.0398, -0.0412,  0.0937, -0.0523,  0.0453,  0.0537,
         0.0079, -0.0476,  0.0951,  0.2196,  0.0551,  0.0549,  0.1065,  0.0443,
         0.0112, -0.1047,  0.0028, -0.1685, -0.1358, -0.0792, -0.1573, -0.0890,
         0.0527, -0.0497, -0.0265,  0.0334, -0.1134, -0.0990, -0.1738, -0.0236,
         0.0890,  0.0020, -0.0780, -0.1224,  0.0446, -0.0713,  0.0296, -0.1104,
        -0.0122, -0.0255, -0.2240, -0.0464, -0.1143, -0.1217, -0.1561, -0.1422,
        -0.0742, -0.0850, -0.0497, -0.1644,  0.0141, -0.1170, -0.0181, -0.1132,
        -0.2190, -0.1025, -0.0736, -0.0905, -0.1076, -0.1169, -0.1016, -0.0785,
        -0.2020, -0.0262, -0.1740, -0.1655, -0.1229, -0.1948, -0.1567, -0.0214,
        -0.1545, -0.0728, -0.1320, -0.0197, -0.0982, -0.2026, -0.0295, -0.1365,
        -0.1834, -0.1286, -0.2201, -0.1842,  0.0096, -0.0040, -0.0099, -0.0429,
        -0.1257, -0.1207,  0.0081, -0.0217, -0.0174, -0.1350, -0.0716,  0.0026,
        -0.0170, -0.0614, -0.0636, -0.2223, -0.0288, -0.0151, -0.0896, -0.1427,
        -0.1013, -0.1298, -0.1911, -0.0268, -0.1786, -0.1560, -0.1028,  0.0118,
        -0.2211, -0.1667, -0.0830, -0.1680, -0.0177, -0.0690, -0.0165, -0.1498,
        -0.0977,  0.0148,  0.0091, -0.1412, -0.1980,  0.0170, -0.1788, -0.1890,
        -0.2078, -0.0903, -0.1371, -0.2082, -0.0009, -0.0514, -0.2012, -0.0395,
        -0.0166, -0.0748, -0.2084, -0.1291, -0.0957, -0.1379, -0.0628, -0.1205,
        -0.0230, -0.2128,  0.0158, -0.0365, -0.1042, -0.1063, -0.1828, -0.1301,
        -0.0257, -0.0446, -0.0383, -0.1992, -0.0573, -0.1127])
##########################################################
{'prot_encoder.encoder.layers.0.self_attn.in_proj_bias': tensor(0.0060), 'smi_encoder.encoder.layers.0.norm2.bias': tensor(0.0062), 'smi_encoder.encoder.layers.0.self_attn.out_proj.bias': tensor(0.0062), 'smi_encoder.encoder.layers.0.self_attn.in_proj_bias': tensor(0.0063), 'prot_encoder.encoder.layers.2.self_attn.out_proj.bias': tensor(0.0065), 'smi_encoder.encoder.layers.2.self_attn.in_proj_bias': tensor(0.0066), 'smi_encoder.encoder.layers.0.linear2.bias': tensor(0.0069), 'prot_encoder.encoder.layers.1.self_attn.in_proj_bias': tensor(0.0069), 'cross_encoder.encoder.layers.0.self_attn.out_proj.bias': tensor(0.0069), 'smi_encoder.encoder.layers.0.norm1.bias': tensor(0.0069), 'prot_encoder.encoder.layers.2.norm1.bias': tensor(0.0072), 'prot_encoder.encoder.layers.1.self_attn.out_proj.bias': tensor(0.0073), 'smi_encoder.encoder.layers.1.self_attn.in_proj_bias': tensor(0.0074), 'prot_encoder.encoder.layers.2.self_attn.in_proj_bias': tensor(0.0075), 'cross_encoder.encoder.layers.0.norm2.bias': tensor(0.0076), 'cross_encoder.encoder.layers.1.self_attn.out_proj.bias': tensor(0.0077), 'cross_encoder.encoder.layers.0.norm1.bias': tensor(0.0077), 'smi_encoder.encoder.layers.1.self_attn.out_proj.bias': tensor(0.0078), 'addnorm.ln.bias': tensor(0.0079), 'smi_encoder.encoder.layers.1.norm2.bias': tensor(0.0079), 'smi_encoder.encoder.layers.2.self_attn.out_proj.bias': tensor(0.0079), 'prot_encoder.encoder.layers.1.norm1.bias': tensor(0.0080), 'smi_encoder.encoder.layers.1.norm1.bias': tensor(0.0082), 'smi_encoder.encoder.layers.1.linear2.bias': tensor(0.0083), 'smi_encoder.encoder.layers.2.norm2.bias': tensor(0.0085), 'prot_encoder.encoder.layers.2.norm2.bias': tensor(0.0085), 'prot_encoder.encoder.layers.1.norm2.bias': tensor(0.0085), 'ffn.dense2.bias': tensor(0.0085), 'cross_encoder.encoder.layers.1.norm1.bias': tensor(0.0086), 'prot_encoder.encoder.layers.0.self_attn.out_proj.bias': tensor(0.0086), 'cross_encoder.encoder.layers.0.linear2.bias': tensor(0.0087), 'smi_encoder.encoder.layers.2.linear2.bias': tensor(0.0088), 'decoder.blks.block4.addnorm2.ln.bias': tensor(0.0090), 'smi_encoder.encoder.layers.2.norm1.bias': tensor(0.0094), 'decoder.blks.block2.ffn.dense2.bias': tensor(0.0094), 'prot_encoder.encoder.layers.2.linear2.bias': tensor(0.0094), 'decoder.blks.block4.ffn.dense2.bias': tensor(0.0096), 'prot_encoder.encoder.layers.1.linear2.bias': tensor(0.0096), 'decoder.blks.block3.addnorm2.ln.bias': tensor(0.0096), 'decoder.blks.block3.ffn.dense2.bias': tensor(0.0097), 'decoder.blks.block5.addnorm2.ln.bias': tensor(0.0098), 'decoder.blks.block2.addnorm1.ln.bias': tensor(0.0098), 'prot_encoder.encoder.layers.0.norm2.bias': tensor(0.0098), 'decoder.blks.block1.ffn.dense2.bias': tensor(0.0099), 'decoder.blks.block5.ffn.dense2.bias': tensor(0.0099), 'prot_encoder.encoder.layers.0.norm1.bias': tensor(0.0099), 'prot_encoder.dense.weight': tensor(0.0101), 'decoder.blks.block2.addnorm2.ln.bias': tensor(0.0101), 'cross_encoder.encoder.layers.1.linear2.bias': tensor(0.0102), 'decoder.blks.block3.addnorm1.ln.bias': tensor(0.0102), 'decoder.blks.block1.addnorm2.ln.bias': tensor(0.0102), 'cross_encoder.encoder.layers.0.self_attn.in_proj_bias': tensor(0.0103), 'prot_encoder.encoder.layers.0.linear2.bias': tensor(0.0104), 'decoder.blks.block4.addnorm1.ln.bias': tensor(0.0105), 'decoder.blks.block1.addnorm1.ln.bias': tensor(0.0105), 'decoder.blks.block1.addnorm3.ln.bias': tensor(0.0106), 'prot_encoder.embedding.weight': tensor(0.0110), 'decoder.blks.block2.addnorm3.ln.bias': tensor(0.0113), 'decoder.blks.block3.addnorm3.ln.bias': tensor(0.0113), 'decoder.blks.block5.addnorm1.ln.bias': tensor(0.0116), 'decoder.blks.block0.ffn.dense2.bias': tensor(0.0121), 'cross_encoder.encoder.layers.1.norm2.bias': tensor(0.0121), 'decoder.blks.block0.addnorm3.ln.bias': tensor(0.0122), 'prot_encoder.addnorm.ln.bias': tensor(0.0126), 'smi_encoder.encoder.layers.0.linear1.bias': tensor(0.0126), 'smi_encoder.encoder.layers.2.linear1.bias': tensor(0.0127), 'decoder.blks.block0.addnorm2.ln.bias': tensor(0.0128), 'decoder.blks.block4.ffn.dense1.bias': tensor(0.0129), 'prot_encoder.encoder.layers.0.linear1.bias': tensor(0.0131), 'decoder.blks.block1.ffn.dense1.bias': tensor(0.0133), 'smi_encoder.encoder.layers.1.linear1.bias': tensor(0.0134), 'smi_encoder.embedding.weight': tensor(0.0136), 'decoder.blks.block0.addnorm1.ln.bias': tensor(0.0137), 'decoder.blks.block3.ffn.dense1.bias': tensor(0.0141), 'prot_encoder.encoder.layers.0.self_attn.in_proj_weight': tensor(0.0141), 'decoder.blks.block4.addnorm3.ln.bias': tensor(0.0143), 'smi_encoder.encoder.layers.0.self_attn.in_proj_weight': tensor(0.0150), 'decoder.blks.block1.addnorm1.ln.weight': tensor(0.0152), 'decoder.blks.block2.ffn.dense1.bias': tensor(0.0152), 'decoder.blks.block1.addnorm2.ln.weight': tensor(0.0153), 'smi_encoder.encoder.layers.2.self_attn.out_proj.weight': tensor(0.0154), 'cross_encoder.encoder.layers.1.self_attn.in_proj_bias': tensor(0.0156), 'decoder.blks.block1.addnorm3.ln.weight': tensor(0.0161), 'prot_encoder.encoder.layers.0.self_attn.out_proj.weight': tensor(0.0162), 'prot_encoder.encoder.layers.1.linear1.bias': tensor(0.0164), 'smi_encoder.encoder.layers.0.linear2.weight': tensor(0.0166), 'decoder.blks.block0.addnorm2.ln.weight': tensor(0.0168), 'smi_encoder.encoder.layers.1.self_attn.out_proj.weight': tensor(0.0169), 'cross_encoder.encoder.layers.1.self_attn.out_proj.weight': tensor(0.0169), 'decoder.blks.block2.addnorm1.ln.weight': tensor(0.0169), 'prot_encoder.encoder.layers.2.self_attn.out_proj.weight': tensor(0.0170), 'prot_encoder.encoder.layers.1.self_attn.out_proj.weight': tensor(0.0171), 'cross_encoder.encoder.layers.0.self_attn.out_proj.weight': tensor(0.0171), 'cross_encoder.encoder.layers.1.linear2.weight': tensor(0.0172), 'decoder.blks.block3.addnorm2.ln.weight': tensor(0.0173), 'prot_encoder.encoder.layers.2.linear1.bias': tensor(0.0173), 'smi_encoder.encoder.layers.0.norm2.weight': tensor(0.0173), 'decoder.blks.block0.addnorm3.ln.weight': tensor(0.0175), 'decoder.blks.block0.addnorm1.ln.weight': tensor(0.0176), 'decoder.blks.block0.attention1.W_k.weight': tensor(0.0177), 'decoder.blks.block2.addnorm2.ln.weight': tensor(0.0178), 'smi_encoder.encoder.layers.1.linear2.weight': tensor(0.0178), 'decoder.blks.block0.attention1.W_q.weight': tensor(0.0178), 'smi_encoder.encoder.layers.2.self_attn.in_proj_weight': tensor(0.0179), 'decoder.blks.block3.addnorm1.ln.weight': tensor(0.0179), 'smi_encoder.encoder.layers.0.self_attn.out_proj.weight': tensor(0.0180), 'cross_encoder.encoder.layers.1.norm1.weight': tensor(0.0180), 'prot_encoder.encoder.layers.1.self_attn.in_proj_weight': tensor(0.0182), 'smi_encoder.encoder.layers.0.norm1.weight': tensor(0.0182), 'ffn.dense1.bias': tensor(0.0183), 'cross_encoder.encoder.layers.0.linear2.weight': tensor(0.0184), 'prot_encoder.ffn.dense2.bias': tensor(0.0185), 'cross_encoder.encoder.layers.0.norm1.weight': tensor(0.0185), 'ffn.dense2.weight': tensor(0.0187), 'cross_encoder.encoder.layers.0.norm2.weight': tensor(0.0187), 'smi_encoder.encoder.layers.2.linear2.weight': tensor(0.0188), 'decoder.blks.block0.ffn.dense1.bias': tensor(0.0189), 'addnorm.ln.weight': tensor(0.0190), 'decoder.embedding.weight': tensor(0.0191), 'cross_encoder.encoder.layers.0.self_attn.in_proj_weight': tensor(0.0193), 'decoder.blks.block4.addnorm1.ln.weight': tensor(0.0195), 'prot_encoder.encoder.layers.2.self_attn.in_proj_weight': tensor(0.0199), 'smi_encoder.encoder.layers.1.linear1.weight': tensor(0.0200), 'smi_encoder.encoder.layers.2.norm1.weight': tensor(0.0200), 'smi_encoder.encoder.layers.1.norm1.weight': tensor(0.0203), 'smi_encoder.encoder.layers.0.linear1.weight': tensor(0.0204), 'smi_encoder.encoder.layers.1.self_attn.in_proj_weight': tensor(0.0204), 'smi_encoder.encoder.layers.1.norm2.weight': tensor(0.0207), 'decoder.blks.block4.addnorm2.ln.weight': tensor(0.0208), 'prot_encoder.ffn.dense1.bias': tensor(0.0209), 'decoder.blks.block5.ffn.dense1.bias': tensor(0.0211), 'cross_encoder.encoder.layers.1.linear1.weight': tensor(0.0213), 'smi_encoder.encoder.layers.2.linear1.weight': tensor(0.0213), 'decoder.blks.block2.addnorm3.ln.weight': tensor(0.0214), 'decoder.blks.block3.addnorm3.ln.weight': tensor(0.0215), 'cross_encoder.encoder.layers.1.self_attn.in_proj_weight': tensor(0.0216), 'decoder.blks.block0.attention2.W_o.weight': tensor(0.0216), 'decoder.blks.block1.attention2.W_o.weight': tensor(0.0217), 'cross_encoder.encoder.layers.0.linear1.weight': tensor(0.0219), 'decoder.blks.block2.attention2.W_o.weight': tensor(0.0226), 'cross_encoder.encoder.layers.0.linear1.bias': tensor(0.0226), 'ffn.dense1.weight': tensor(0.0230), 'decoder.blks.block1.attention2.W_v.weight': tensor(0.0231), 'cross_encoder.encoder.layers.1.linear1.bias': tensor(0.0234), 'prot_encoder.encoder.layers.0.linear2.weight': tensor(0.0235), 'prot_encoder.encoder.layers.0.linear1.weight': tensor(0.0236), 'prot_encoder.encoder.layers.1.linear2.weight': tensor(0.0239), 'prot_encoder.encoder.layers.2.linear2.weight': tensor(0.0240), 'decoder.blks.block3.attention2.W_o.weight': tensor(0.0240), 'decoder.blks.block2.attention2.W_v.weight': tensor(0.0245), 'decoder.blks.block0.attention2.W_v.weight': tensor(0.0249), 'decoder.blks.block0.ffn.dense2.weight': tensor(0.0253), 'decoder.blks.block1.ffn.dense2.weight': tensor(0.0259), 'prot_encoder.encoder.layers.2.linear1.weight': tensor(0.0259), 'prot_encoder.encoder.layers.1.linear1.weight': tensor(0.0260), 'decoder.blks.block3.attention2.W_v.weight': tensor(0.0267), 'decoder.blks.block2.ffn.dense2.weight': tensor(0.0268), 'prot_encoder.ffn.dense2.weight': tensor(0.0268), 'decoder.blks.block0.attention2.W_k.weight': tensor(0.0276), 'prot_encoder.ffn.dense1.weight': tensor(0.0277), 'decoder.blks.block3.ffn.dense2.weight': tensor(0.0280), 'decoder.blks.block4.addnorm3.ln.weight': tensor(0.0284), 'decoder.blks.block1.attention1.W_k.weight': tensor(0.0287), 'decoder.blks.block2.attention1.W_q.weight': tensor(0.0288), 'decoder.blks.block1.attention2.W_q.weight': tensor(0.0291), 'decoder.blks.block1.attention1.W_q.weight': tensor(0.0292), 'decoder.blks.block2.attention2.W_q.weight': tensor(0.0295), 'decoder.blks.block0.attention1.W_o.weight': tensor(0.0297), 'decoder.blks.block0.attention2.W_q.weight': tensor(0.0298), 'decoder.blks.block1.ffn.dense1.weight': tensor(0.0299), 'decoder.blks.block2.ffn.dense1.weight': tensor(0.0300), 'decoder.blks.block2.attention1.W_k.weight': tensor(0.0301), 'decoder.blks.block0.attention1.W_v.weight': tensor(0.0302), 'decoder.blks.block0.ffn.dense1.weight': tensor(0.0304), 'decoder.blks.block4.attention2.W_o.weight': tensor(0.0307), 'decoder.blks.block5.addnorm1.ln.weight': tensor(0.0309), 'decoder.blks.block1.attention2.W_k.weight': tensor(0.0310), 'decoder.blks.block3.ffn.dense1.weight': tensor(0.0319), 'prot_encoder.dense.bias': tensor(0.0320), 'decoder.blks.block4.attention2.W_v.weight': tensor(0.0322), 'decoder.blks.block2.attention1.W_o.weight': tensor(0.0325), 'decoder.blks.block3.attention2.W_k.weight': tensor(0.0332), 'decoder.blks.block4.ffn.dense2.weight': tensor(0.0333), 'decoder.blks.block3.attention2.W_q.weight': tensor(0.0335), 'decoder.blks.block3.attention1.W_q.weight': tensor(0.0339), 'smi_encoder.encoder.layers.2.norm2.weight': tensor(0.0343), 'decoder.blks.block3.attention1.W_k.weight': tensor(0.0343), 'decoder.blks.block2.attention2.W_k.weight': tensor(0.0344), 'decoder.blks.block4.attention2.W_q.weight': tensor(0.0344), 'prot_encoder.encoder.layers.2.norm1.weight': tensor(0.0346), 'decoder.blks.block2.attention1.W_v.weight': tensor(0.0360), 'decoder.blks.block4.ffn.dense1.weight': tensor(0.0363), 'decoder.blks.block1.attention1.W_o.weight': tensor(0.0364), 'decoder.blks.block4.attention1.W_k.weight': tensor(0.0366), 'decoder.blks.block4.attention2.W_k.weight': tensor(0.0370), 'decoder.blks.block1.attention1.W_v.weight': tensor(0.0373), 'decoder.blks.block5.addnorm2.ln.weight': tensor(0.0375), 'decoder.blks.block4.attention1.W_q.weight': tensor(0.0376), 'decoder.blks.block3.attention1.W_v.weight': tensor(0.0377), 'prot_encoder.encoder.layers.1.norm2.weight': tensor(0.0377), 'decoder.blks.block4.attention1.W_v.weight': tensor(0.0380), 'decoder.blks.block5.attention1.W_q.weight': tensor(0.0384), 'decoder.blks.block3.attention1.W_o.weight': tensor(0.0389), 'decoder.blks.block5.attention2.W_q.weight': tensor(0.0393), 'prot_encoder.encoder.layers.1.norm1.weight': tensor(0.0401), 'decoder.blks.block4.attention1.W_o.weight': tensor(0.0401), 'prot_encoder.encoder.layers.0.norm2.weight': tensor(0.0415), 'decoder.blks.block5.attention2.W_o.weight': tensor(0.0416), 'decoder.blks.block5.attention1.W_v.weight': tensor(0.0417), 'prot_encoder.addnorm.ln.weight': tensor(0.0417), 'decoder.blks.block5.attention1.W_k.weight': tensor(0.0423), 'prot_encoder.encoder.layers.0.norm1.weight': tensor(0.0424), 'decoder.blks.block5.attention2.W_v.weight': tensor(0.0441), 'decoder.blks.block5.attention1.W_o.weight': tensor(0.0449), 'decoder.blks.block5.attention2.W_k.weight': tensor(0.0451), 'prot_encoder.encoder.layers.2.norm2.weight': tensor(0.0478), 'decoder.blks.block5.ffn.dense1.weight': tensor(0.0567), 'decoder.blks.block5.ffn.dense2.weight': tensor(0.0593), 'decoder.dense.bias': tensor(0.0847), 'decoder.dense.weight': tensor(0.0963), 'cross_encoder.encoder.layers.1.norm2.weight': tensor(0.1726), 'decoder.blks.block5.addnorm3.ln.bias': tensor(0.1853), 'decoder.blks.block5.addnorm3.ln.weight': tensor(0.3403)}