#!/usr/bin/bsh

import java.io.*;
import java.util.regex.*;

String antlogFile = "ant.log";
if (bsh.args.length > 0 && bsh.args[0] != null) {
    System.out.println("antlogFile: " + bsh.args[0]);
    antlogFile = bsh.args[0];
}

File results = new File(antlogFile);
if (!results.exists()) {
    System.out.println("Syntax: bsh tools/extractTestStats.bsh <ant.log>.");
    System.out.println("Run 'ant -logfile ant.log clean test-all' first.");
    System.exit(1);
}

BufferedReader reader = new BufferedReader(new FileReader(results));
String line = reader.readLine();
String moduleName = "";

Pattern junit = Pattern.compile(".*\\[junit\\].*");
Pattern module = Pattern.compile(".*cdk.modulesuites.M(.*)Tests.*");
Pattern stats = Pattern.compile(".*Tests\\srun:\\s(\\d*),\\sFailures:\\s(\\d*),\\sErrors:\\s(\\d*),\\sSkipped:\\s(\\d*),\\sTime\\selapsed:\\s([\\d|\\.|\\,]*)\\ssec.*");
Pattern statsOld = Pattern.compile(".*Tests\\srun:\\s(\\d*),\\sFailures:\\s(\\d*),\\sErrors:\\s(\\d*),\\sTime\\selapsed:\\s([\\d|\\.|\\,]*)\\ssec.*");
Pattern failed = Pattern.compile(".*FAILED.*");

int testsRun = 0;
int testsFailed = 0;
int testsErrors = 0;
int testsSkipped = 0;
double testsTime = 0.0;

int run = 0;
String failedModules = "";
while (line != null) {
  Matcher junitLine = junit.matcher(line);
  if (junitLine.matches()) {
    // OK, found junit results
    Matcher moduleLine = module.matcher(line);
    Matcher statsLine = stats.matcher(line);
    Matcher statsOldLine = statsOld.matcher(line);
    if (moduleLine.matches()) {
      Matcher failedLine = failed.matcher(line);
      if (failedLine.matches() && run == 0) {
        failedModules = failedModules + moduleName + " ";
      } else {
        moduleName = moduleLine.group(1);
        run = 0;
      }
    } else if (statsLine.matches()) {
      run = Integer.parseInt(statsLine.group(1));
      int failed = Integer.parseInt(statsLine.group(2));
      int error = Integer.parseInt(statsLine.group(3));
      int skipped = Integer.parseInt(statsLine.group(4));
      String rawTime = statsLine.group(5);
      StringBuffer processedTime = new StringBuffer();
      for (int timeChar=0; timeChar<rawTime.length(); timeChar++) {
        if (rawTime.charAt(timeChar) != ',') {
          processedTime.append(rawTime.charAt(timeChar));
        }
      }
      double time = Double.parseDouble(processedTime.toString());
      System.out.println(moduleName + ": run=" + run +
        " failed=" + failed + " error=" + error + " skipped=" + skipped +
        " time=" + time + " secs");
      testsRun += run;
      testsFailed += failed;
      testsErrors += error;
      testsSkipped += skipped;
      testsTime += time;
    } else if (statsOldLine.matches()) {
      run = Integer.parseInt(statsLine.group(1));
      int failed = Integer.parseInt(statsLine.group(2));
      int error = Integer.parseInt(statsLine.group(3));
      String rawTime = statsLine.group(4);
      StringBuffer processedTime = new StringBuffer();
      for (int timeChar=0; timeChar<rawTime.length(); timeChar++) {
        if (rawTime.charAt(timeChar) != ',') {
          processedTime.append(rawTime.charAt(timeChar));
        }
      }
      double time = Double.parseDouble(processedTime.toString());
      System.out.println(moduleName + ": run=" + run +
        " failed=" + failed + " error=" + error +
        " time=" + time + " secs");
      testsRun += run;
      testsFailed += failed;
      testsErrors += error;
      testsTime += time;
    }
  }
  line = reader.readLine();
}

System.out.println("\ntotal: run=" + testsRun +
  " failed=" + testsFailed + " error=" + testsErrors + " skipped=" + testsSkipped +
  " time=" + testsTime + " secs");
System.out.println("failed modules: " + failedModules);
