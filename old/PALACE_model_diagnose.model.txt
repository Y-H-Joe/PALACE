smi_encoder.embedding.weight shape: torch.Size([166, 64])
tensor([[ 1.0131, -0.2699, -1.8087,  ...,  0.9555,  1.4440,  0.4578],
        [-0.8163,  0.5424, -1.4801,  ..., -0.3295, -0.7485, -1.9519],
        [ 0.0252,  0.2658,  0.8077,  ...,  0.3764, -2.3035,  1.3408],
        ...,
        [ 0.4416,  0.4689,  0.8651,  ...,  0.0217,  0.1627,  1.3577],
        [-0.3841, -0.9819, -2.5312,  ...,  1.4526, -0.4719, -0.4409],
        [-0.0962, -0.0663, -0.2366,  ..., -0.4563,  0.6916, -0.1244]])
tensor([[ 1.0131, -0.2699, -1.8087,  ...,  0.9555,  1.4440,  0.4578],
        [-0.8111,  0.5338, -1.4825,  ..., -0.3336, -0.7587, -1.9458],
        [ 0.0252,  0.2658,  0.8077,  ...,  0.3764, -2.3035,  1.3408],
        ...,
        [ 0.4416,  0.4689,  0.8651,  ...,  0.0217,  0.1627,  1.3577],
        [-0.3841, -0.9819, -2.5312,  ...,  1.4526, -0.4719, -0.4409],
        [-0.0962, -0.0663, -0.2366,  ..., -0.4563,  0.6916, -0.1244]])
##########################################################
smi_encoder.encoder.layers.0.self_attn.in_proj_weight shape: torch.Size([192, 64])
tensor([[-0.0358, -0.0733,  0.0426,  ..., -0.0554, -0.1505,  0.0886],
        [-0.1389, -0.0028, -0.0981,  ..., -0.1081, -0.0789,  0.1082],
        [-0.0739,  0.0640,  0.0730,  ...,  0.0664, -0.0450, -0.1453],
        ...,
        [-0.1419,  0.0214, -0.0171,  ..., -0.0403,  0.0725, -0.1000],
        [ 0.0373, -0.0542,  0.0393,  ...,  0.0492,  0.1418, -0.0834],
        [ 0.0776, -0.0937, -0.1047,  ..., -0.0646, -0.0834,  0.0258]])
tensor([[-0.0261, -0.0747,  0.0231,  ..., -0.0532, -0.1399,  0.0809],
        [-0.1352, -0.0074, -0.0959,  ..., -0.1018, -0.0846,  0.1059],
        [-0.0630,  0.0367,  0.0784,  ...,  0.0700, -0.0745, -0.1402],
        ...,
        [-0.1573,  0.0247, -0.0037,  ..., -0.0365,  0.0577, -0.1065],
        [ 0.0522, -0.0466,  0.0214,  ...,  0.0522,  0.1533, -0.0753],
        [ 0.1022, -0.0951, -0.0962,  ..., -0.0785, -0.0673,  0.0384]])
##########################################################
smi_encoder.encoder.layers.0.self_attn.in_proj_bias shape: torch.Size([192])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 1.7749e-02, -8.1172e-03, -3.7842e-02,  3.0688e-03,  2.2734e-03,
        -5.2403e-04, -4.5558e-03, -6.4297e-03,  6.6171e-03,  7.4563e-03,
        -7.3325e-03,  2.2498e-02, -1.9274e-03,  2.0739e-02, -2.1786e-02,
         1.2320e-02,  8.1736e-03, -1.6038e-02, -1.2948e-02, -1.6558e-02,
         8.2198e-03,  2.0240e-02, -1.0906e-02, -1.1995e-02,  6.6874e-03,
        -7.6033e-03, -2.6397e-03, -8.8981e-03, -1.6291e-03, -1.7375e-02,
         3.8197e-03,  1.1900e-02, -1.1059e-02, -6.9098e-03,  1.8905e-02,
        -8.1572e-03,  1.5101e-02, -2.1176e-03, -3.6674e-02,  6.9153e-03,
         4.3647e-03,  1.8258e-02, -1.3455e-02, -2.3101e-04, -7.9427e-03,
        -2.9365e-02, -2.8058e-02, -1.6497e-02,  1.8058e-02, -1.7060e-02,
        -2.3214e-02,  1.5457e-02,  1.3650e-02, -2.1486e-02,  1.4908e-03,
         8.0850e-03, -3.6025e-03,  9.8259e-03, -2.7044e-02, -3.3013e-02,
         2.5762e-03,  1.4022e-02, -1.4200e-02, -6.3657e-03,  1.5516e-04,
         1.7372e-05, -7.1464e-05,  2.3960e-05,  1.9458e-05,  1.9824e-05,
        -3.1196e-05, -2.8930e-05,  2.6159e-05,  2.8545e-06,  6.5722e-05,
         1.6923e-05,  2.4151e-05, -1.7420e-04, -2.7183e-05,  9.3477e-05,
        -1.9536e-05, -4.4005e-05, -1.2648e-04, -8.2473e-05,  6.5211e-05,
        -2.9387e-05, -1.3975e-05, -1.3528e-04, -1.9844e-05, -1.8270e-04,
        -1.4920e-04, -2.2620e-04, -1.1984e-04, -1.0555e-04,  1.9393e-05,
        -4.2977e-05, -2.1782e-04, -9.5652e-05,  6.8020e-05, -8.5688e-05,
         2.6456e-04,  2.2010e-04,  2.2960e-04,  2.7684e-04,  1.1116e-04,
         1.9290e-04,  1.1933e-04,  1.8487e-06,  3.3786e-05, -1.0244e-04,
        -1.9021e-04, -2.1271e-04,  3.6645e-04, -1.5192e-04,  9.2449e-05,
        -1.3346e-04,  2.2685e-04, -1.3105e-04, -5.3098e-05, -2.0320e-04,
         2.1679e-04, -1.9617e-04, -1.2498e-04, -5.4680e-05,  1.5715e-04,
        -6.3170e-05,  2.3302e-04,  2.9600e-04, -2.4022e-02,  3.6391e-03,
        -8.1777e-03, -1.0753e-02,  7.0562e-03,  1.7899e-03,  1.0174e-02,
         6.6475e-03,  1.2842e-02, -3.0846e-03, -4.6366e-03, -8.3614e-03,
         7.7754e-04,  5.2294e-03,  8.4754e-03, -6.5128e-03, -4.5773e-03,
        -1.2484e-02,  2.9173e-03, -3.5306e-03,  1.4315e-03,  3.2207e-03,
         1.8473e-02,  5.7647e-03, -3.2937e-03,  2.6717e-03, -6.5833e-04,
         2.0936e-04,  1.2303e-02, -1.4276e-03,  2.0404e-03,  4.2199e-03,
         3.0949e-03, -7.1638e-03,  6.8412e-03, -9.5068e-03,  3.3854e-03,
        -1.0888e-02,  8.4515e-06, -1.9148e-03, -4.0794e-03,  1.0809e-03,
        -6.4545e-04, -1.5502e-03, -1.1920e-02,  4.7786e-03,  1.0609e-02,
        -1.1930e-02,  4.9728e-03,  5.0574e-03,  8.7233e-03, -2.9888e-03,
         2.5932e-03,  1.7135e-04, -2.9865e-03,  1.2375e-02, -7.1503e-03,
         5.0913e-03,  2.2475e-03,  2.2763e-03, -8.1413e-03, -9.5272e-03,
         8.3116e-04,  7.6951e-03])
##########################################################
smi_encoder.encoder.layers.0.self_attn.out_proj.weight shape: torch.Size([64, 64])
tensor([[ 0.0505,  0.0281, -0.0763,  ..., -0.1009, -0.0134, -0.0966],
        [ 0.0685, -0.1013,  0.0551,  ...,  0.0990,  0.0783,  0.0768],
        [ 0.0946,  0.0698, -0.1162,  ...,  0.0208, -0.0469, -0.1210],
        ...,
        [-0.0241, -0.0221, -0.0948,  ..., -0.0118, -0.0531, -0.0943],
        [-0.0603, -0.0441,  0.0700,  ..., -0.0913, -0.0121, -0.0685],
        [ 0.0983,  0.0556,  0.0573,  ..., -0.1142, -0.0500, -0.0667]])
tensor([[ 0.0753,  0.0412, -0.0677,  ..., -0.0809,  0.0181, -0.0887],
        [ 0.0682, -0.1055,  0.0291,  ...,  0.0947,  0.0927,  0.0854],
        [ 0.0730,  0.0696, -0.1523,  ...,  0.0168, -0.0401, -0.1291],
        ...,
        [-0.0122, -0.0400, -0.0970,  ..., -0.0294, -0.0570, -0.0694],
        [-0.0436, -0.0441,  0.0586,  ..., -0.0937,  0.0197, -0.0536],
        [ 0.0920,  0.0700,  0.0556,  ..., -0.1018, -0.0586, -0.0844]])
##########################################################
smi_encoder.encoder.layers.0.self_attn.out_proj.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-0.0056, -0.0047,  0.0003, -0.0064, -0.0099, -0.0087,  0.0008,  0.0055,
        -0.0010,  0.0011,  0.0145, -0.0101, -0.0002,  0.0107, -0.0015, -0.0066,
         0.0070, -0.0019, -0.0034,  0.0048, -0.0018, -0.0026, -0.0072,  0.0097,
         0.0043, -0.0012,  0.0080,  0.0041,  0.0050, -0.0033, -0.0019, -0.0018,
        -0.0121,  0.0002, -0.0052, -0.0042, -0.0044,  0.0054, -0.0014, -0.0069,
        -0.0016, -0.0136,  0.0010,  0.0110,  0.0071,  0.0080, -0.0080,  0.0079,
         0.0011, -0.0002, -0.0039,  0.0013, -0.0017, -0.0111,  0.0111, -0.0071,
        -0.0130,  0.0033,  0.0111,  0.0001,  0.0046,  0.0111, -0.0049,  0.0072])
##########################################################
smi_encoder.encoder.layers.0.linear1.weight shape: torch.Size([32, 64])
tensor([[-0.0629, -0.1874, -0.0500,  ..., -0.1747,  0.2041,  0.2287],
        [ 0.1014,  0.0558,  0.0449,  ..., -0.0387, -0.0043,  0.2323],
        [-0.2040, -0.1949, -0.0781,  ..., -0.1111, -0.0464, -0.1064],
        ...,
        [-0.0152,  0.1600, -0.0234,  ...,  0.0683,  0.0351, -0.1645],
        [-0.1553, -0.0999, -0.1674,  ..., -0.1333, -0.0115,  0.0219],
        [ 0.2368, -0.1150,  0.0318,  ..., -0.1710, -0.0040, -0.0919]])
tensor([[-0.0473, -0.1884, -0.0384,  ..., -0.1668,  0.2004,  0.2422],
        [ 0.1052,  0.0566,  0.0492,  ..., -0.0212, -0.0235,  0.1764],
        [-0.1847, -0.1960, -0.0699,  ..., -0.1149, -0.0358, -0.0942],
        ...,
        [-0.0275,  0.1709, -0.0238,  ...,  0.0739,  0.0106, -0.1839],
        [-0.1784, -0.1160, -0.1558,  ..., -0.1320,  0.0068,  0.0042],
        [ 0.2375, -0.1200,  0.0260,  ..., -0.1888,  0.0023, -0.0898]])
##########################################################
smi_encoder.encoder.layers.0.linear1.bias shape: torch.Size([32])
tensor([ 0.0265,  0.0136, -0.0210,  0.0027, -0.0674, -0.1189, -0.0668, -0.0568,
         0.0029, -0.0659,  0.0457, -0.0814, -0.0737, -0.0350, -0.0698,  0.1224,
        -0.1128,  0.0504, -0.0740, -0.0980, -0.0536, -0.0131,  0.0313,  0.1215,
         0.0630,  0.0584, -0.0864, -0.0665,  0.0044,  0.0623, -0.0866,  0.1139])
tensor([ 0.0150,  0.0032, -0.0440, -0.0128, -0.0873, -0.1257, -0.0699, -0.0882,
        -0.0137, -0.0786,  0.0452, -0.0785, -0.0916, -0.0415, -0.0757,  0.1050,
        -0.1232,  0.0551, -0.0827, -0.0998, -0.0466, -0.0168,  0.0034,  0.1173,
         0.0559,  0.0441, -0.0762, -0.0864, -0.0124,  0.0727, -0.1036,  0.1120])
##########################################################
smi_encoder.encoder.layers.0.linear2.weight shape: torch.Size([64, 32])
tensor([[-0.0811, -0.0650, -0.0338,  ..., -0.1505, -0.0433,  0.0562],
        [-0.1773,  0.2322,  0.1426,  ...,  0.0845,  0.1685, -0.0353],
        [ 0.0838,  0.2016, -0.1442,  ..., -0.0638,  0.0425,  0.2276],
        ...,
        [ 0.0009, -0.1881, -0.1897,  ...,  0.0075,  0.0792, -0.0749],
        [-0.0251,  0.1708,  0.0208,  ...,  0.1241,  0.0239,  0.2100],
        [ 0.0124, -0.1669, -0.1871,  ...,  0.0439,  0.1504, -0.0431]])
tensor([[-0.0959, -0.0691, -0.0361,  ..., -0.1548, -0.0459,  0.0576],
        [-0.2013,  0.2272,  0.1300,  ...,  0.0865,  0.1611, -0.0373],
        [ 0.0939,  0.1818, -0.1389,  ..., -0.0759,  0.0605,  0.2154],
        ...,
        [ 0.0106, -0.1738, -0.1758,  ...,  0.0189,  0.0904, -0.0728],
        [-0.0236,  0.1598,  0.0102,  ...,  0.1150,  0.0190,  0.2028],
        [ 0.0347, -0.1475, -0.1774,  ...,  0.0511,  0.1683, -0.0399]])
##########################################################
smi_encoder.encoder.layers.0.linear2.bias shape: torch.Size([64])
tensor([ 0.0875, -0.0321,  0.1277,  0.0822, -0.0944, -0.1434, -0.0990, -0.0041,
        -0.1743,  0.1611, -0.1640, -0.1156, -0.0205, -0.1404, -0.0378,  0.1105,
         0.1631,  0.0154, -0.1641, -0.1482,  0.1592, -0.1401, -0.1145,  0.0984,
        -0.1376, -0.1562, -0.1402,  0.0036, -0.0225,  0.1115,  0.0603, -0.1478,
         0.0907,  0.1302, -0.1054, -0.0769, -0.1333,  0.1158,  0.1605, -0.1397,
         0.1643, -0.0051,  0.1235, -0.0827, -0.0647,  0.1514,  0.1478,  0.1083,
         0.0950,  0.1503, -0.0010, -0.1094,  0.0350, -0.1165, -0.0464,  0.0679,
         0.0534, -0.0086, -0.0377, -0.1163,  0.0117, -0.1611, -0.0763,  0.0680])
tensor([ 0.0818, -0.0360,  0.1242,  0.0863, -0.1008, -0.1454, -0.1058, -0.0016,
        -0.1714,  0.1583, -0.1529, -0.1195, -0.0189, -0.1280, -0.0391,  0.0997,
         0.1676,  0.0103, -0.1611, -0.1439,  0.1530, -0.1414, -0.1239,  0.1041,
        -0.1391, -0.1521, -0.1374,  0.0036, -0.0113,  0.1093,  0.0596, -0.1483,
         0.0782,  0.1289, -0.1022, -0.0867, -0.1421,  0.1181,  0.1619, -0.1393,
         0.1596, -0.0067,  0.1232, -0.0741, -0.0557,  0.1529,  0.1508,  0.1103,
         0.0892,  0.1478, -0.0032, -0.1054,  0.0365, -0.1182, -0.0384,  0.0613,
         0.0503, -0.0069, -0.0231, -0.1247,  0.0119, -0.1531, -0.0821,  0.0771])
##########################################################
smi_encoder.encoder.layers.0.norm1.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0075, 0.9990, 1.0009, 1.0174, 0.9867, 0.9957, 0.9953, 0.9993, 1.0031,
        1.0039, 1.0274, 0.9887, 1.0100, 1.0086, 0.9938, 0.9713, 1.0023, 1.0101,
        0.9961, 1.0104, 1.0099, 1.0050, 0.9897, 1.0086, 0.9781, 1.0180, 0.9896,
        1.0098, 0.9882, 0.9938, 0.9869, 0.9921, 1.0005, 0.9928, 1.0176, 0.9984,
        1.0048, 0.9999, 1.0073, 1.0147, 0.9860, 1.0079, 0.9852, 1.0039, 1.0120,
        1.0383, 1.0070, 0.9972, 1.0056, 0.9983, 1.0041, 1.0315, 0.9801, 1.0203,
        0.9816, 1.0135, 1.0004, 0.9932, 1.0105, 1.0140, 0.9882, 0.9886, 0.9892,
        0.9932])
##########################################################
smi_encoder.encoder.layers.0.norm1.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-0.0046, -0.0032,  0.0008, -0.0037, -0.0102, -0.0070,  0.0013,  0.0066,
         0.0008,  0.0032,  0.0166, -0.0075,  0.0002,  0.0158,  0.0008, -0.0036,
         0.0074, -0.0008, -0.0010,  0.0075, -0.0011, -0.0014, -0.0078,  0.0115,
         0.0055,  0.0023,  0.0094,  0.0060,  0.0066, -0.0029,  0.0002, -0.0003,
        -0.0124,  0.0022, -0.0042, -0.0018, -0.0044,  0.0070, -0.0013, -0.0047,
        -0.0009, -0.0101,  0.0007,  0.0128,  0.0084,  0.0078, -0.0078,  0.0094,
         0.0034, -0.0005, -0.0035,  0.0029, -0.0003, -0.0087,  0.0131, -0.0059,
        -0.0123,  0.0030,  0.0115,  0.0012,  0.0071,  0.0142, -0.0029,  0.0074])
##########################################################
smi_encoder.encoder.layers.0.norm2.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0064, 1.0084, 1.0039, 1.0164, 0.9937, 1.0012, 0.9937, 0.9990, 1.0007,
        0.9941, 1.0065, 1.0028, 1.0261, 1.0055, 1.0003, 0.9866, 1.0159, 1.0208,
        0.9777, 1.0062, 1.0061, 1.0073, 0.9981, 1.0129, 1.0109, 1.0143, 1.0020,
        1.0210, 0.9907, 0.9991, 1.0010, 1.0141, 0.9946, 0.9958, 1.0308, 1.0066,
        1.0063, 1.0029, 1.0143, 1.0332, 1.0037, 1.0158, 1.0010, 0.9972, 1.0190,
        1.0383, 1.0179, 1.0037, 1.0063, 1.0020, 0.9946, 1.0098, 0.9960, 1.0340,
        0.9833, 1.0002, 1.0003, 0.9988, 0.9957, 0.9932, 0.9957, 0.9951, 0.9983,
        0.9915])
##########################################################
smi_encoder.encoder.layers.0.norm2.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-0.0037, -0.0019, -0.0024, -0.0008, -0.0043, -0.0018, -0.0044,  0.0021,
         0.0006, -0.0047,  0.0091, -0.0048,  0.0021,  0.0093, -0.0032, -0.0078,
         0.0067, -0.0037,  0.0031,  0.0023, -0.0051, -0.0014, -0.0049,  0.0049,
        -0.0032,  0.0039,  0.0049, -0.0011,  0.0109, -0.0023,  0.0021,  0.0004,
        -0.0107,  0.0002,  0.0029, -0.0097, -0.0066,  0.0029,  0.0020, -0.0019,
        -0.0029,  0.0014,  0.0003,  0.0096,  0.0064,  0.0014,  0.0022,  0.0010,
        -0.0075, -0.0012,  0.0012,  0.0037, -0.0029, -0.0029,  0.0069, -0.0051,
        -0.0052,  0.0012,  0.0131, -0.0086, -0.0004,  0.0064, -0.0036,  0.0076])
##########################################################
smi_encoder.encoder.layers.1.self_attn.in_proj_weight shape: torch.Size([192, 64])
tensor([[-0.0358, -0.0733,  0.0426,  ..., -0.0554, -0.1505,  0.0886],
        [-0.1389, -0.0028, -0.0981,  ..., -0.1081, -0.0789,  0.1082],
        [-0.0739,  0.0640,  0.0730,  ...,  0.0664, -0.0450, -0.1453],
        ...,
        [-0.1419,  0.0214, -0.0171,  ..., -0.0403,  0.0725, -0.1000],
        [ 0.0373, -0.0542,  0.0393,  ...,  0.0492,  0.1418, -0.0834],
        [ 0.0776, -0.0937, -0.1047,  ..., -0.0646, -0.0834,  0.0258]])
tensor([[-0.0427, -0.0533,  0.0023,  ..., -0.0869, -0.1366,  0.0657],
        [-0.1250, -0.0230, -0.1020,  ..., -0.0959, -0.0908,  0.1078],
        [-0.0795,  0.0585,  0.0730,  ...,  0.0800, -0.0394, -0.1450],
        ...,
        [-0.1492,  0.0201, -0.0106,  ..., -0.0321,  0.0693, -0.0880],
        [ 0.0351, -0.0610,  0.0425,  ...,  0.0549,  0.1436, -0.0888],
        [ 0.0617, -0.0887, -0.1033,  ..., -0.0571, -0.0837,  0.0292]])
##########################################################
smi_encoder.encoder.layers.1.self_attn.in_proj_bias shape: torch.Size([192])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 3.8368e-02, -9.0834e-03, -1.2102e-02,  3.5379e-02, -2.9138e-02,
        -4.1557e-02,  5.8440e-03,  1.9494e-02, -4.0769e-02,  1.2017e-03,
        -1.1536e-02, -4.7916e-03, -4.3680e-02,  3.7503e-02,  3.8704e-02,
         1.1440e-02, -2.9067e-02, -3.5033e-03, -1.0417e-02,  3.1438e-02,
        -3.0498e-04,  1.1867e-02,  4.0264e-02,  3.2302e-02,  1.1083e-03,
        -4.2873e-02,  2.6562e-02, -3.7595e-02,  7.5341e-03,  9.7655e-03,
         2.2915e-02,  3.0619e-02, -2.4869e-02,  2.0124e-02,  1.9995e-02,
        -3.3473e-02, -2.1325e-02,  2.2113e-02,  1.5888e-02,  2.1403e-02,
        -1.8995e-02, -2.1394e-02,  3.2105e-02,  3.7465e-02,  4.0506e-03,
         2.4583e-02, -1.0614e-02,  2.4525e-02,  1.5052e-02,  2.4115e-03,
         2.8020e-02,  1.0976e-03, -6.9257e-03,  3.1049e-02, -1.7391e-02,
         3.5858e-03, -2.1141e-02, -7.3735e-03,  1.8037e-02,  2.8084e-02,
         1.1759e-03, -2.8491e-02,  3.1861e-02,  3.3996e-03,  2.7690e-05,
        -1.0551e-05, -7.3407e-05, -1.1423e-04, -5.4807e-05,  9.2544e-05,
         2.0633e-06, -7.4957e-05,  3.5757e-05, -2.7588e-05,  2.6308e-05,
         1.3414e-06, -1.2599e-06, -9.5884e-06, -5.5447e-05,  2.5925e-05,
        -3.0918e-05, -5.5865e-05,  1.4457e-05,  2.1161e-05,  5.8246e-07,
         3.4712e-05,  1.1712e-04, -4.7628e-05, -1.7078e-05, -4.0358e-05,
        -1.2425e-04,  5.7712e-05,  4.5013e-06, -2.7056e-05,  1.0862e-05,
         5.0673e-05,  4.6345e-05,  5.3444e-07,  4.2444e-06,  5.3697e-05,
        -1.9706e-05, -1.2546e-05,  3.9375e-05, -1.4656e-05, -1.3694e-05,
        -1.8022e-05,  8.4474e-05,  2.8314e-05, -8.3943e-06,  2.2981e-05,
         2.4091e-05,  5.2363e-05,  3.6642e-05, -1.4130e-05,  3.1648e-05,
        -1.3308e-06, -7.3266e-05,  2.8541e-05, -2.6622e-05, -2.6580e-05,
         1.2713e-05, -2.5241e-05, -9.7913e-06,  2.5689e-05,  3.7895e-05,
         3.2332e-05,  3.5105e-05,  8.7175e-06, -7.2938e-03,  4.3280e-03,
        -6.2721e-03, -4.6105e-03, -7.7032e-03,  1.4925e-03,  1.0365e-02,
         6.1495e-03,  1.3976e-02, -3.3443e-03,  1.5619e-03, -1.3168e-02,
         6.0706e-03, -5.5870e-03,  9.2311e-03, -3.4050e-03,  2.0271e-03,
         3.4962e-03,  2.6416e-03, -8.7746e-03, -7.0302e-03,  2.6280e-03,
         6.1941e-03,  4.5565e-03,  2.6746e-03, -1.7510e-03, -2.8720e-03,
         5.8197e-03,  5.6848e-03,  1.3085e-03,  6.0576e-03, -3.2596e-03,
         7.7472e-03, -7.1423e-03,  6.5833e-03, -8.7313e-04,  2.6013e-04,
        -1.5546e-03, -7.7095e-04,  1.2405e-03, -6.1916e-03,  7.5580e-03,
        -9.0438e-04, -4.8223e-04, -3.3021e-03,  7.0975e-03, -1.0126e-03,
        -4.9622e-03,  1.2322e-03,  1.0502e-02,  7.4432e-03, -1.5108e-03,
         1.8417e-03,  3.7995e-03, -5.5576e-03,  1.3397e-02, -3.5371e-03,
        -8.1201e-04, -1.6537e-03, -2.5039e-03,  4.0978e-05, -6.2445e-03,
        -6.5732e-05, -4.5641e-03])
##########################################################
smi_encoder.encoder.layers.1.self_attn.out_proj.weight shape: torch.Size([64, 64])
tensor([[ 0.0505,  0.0281, -0.0763,  ..., -0.1009, -0.0134, -0.0966],
        [ 0.0685, -0.1013,  0.0551,  ...,  0.0990,  0.0783,  0.0768],
        [ 0.0946,  0.0698, -0.1162,  ...,  0.0208, -0.0469, -0.1210],
        ...,
        [-0.0241, -0.0221, -0.0948,  ..., -0.0118, -0.0531, -0.0943],
        [-0.0603, -0.0441,  0.0700,  ..., -0.0913, -0.0121, -0.0685],
        [ 0.0983,  0.0556,  0.0573,  ..., -0.1142, -0.0500, -0.0667]])
tensor([[ 0.0442,  0.0118, -0.0333,  ..., -0.1054,  0.0046, -0.0872],
        [ 0.0898, -0.0957,  0.0176,  ...,  0.0821,  0.0507,  0.0717],
        [ 0.0695,  0.0859, -0.1112,  ...,  0.0248, -0.0465, -0.1323],
        ...,
        [-0.0037, -0.0194, -0.0824,  ..., -0.0061, -0.0594, -0.0892],
        [-0.0776, -0.0353,  0.0672,  ..., -0.0966, -0.0204, -0.0742],
        [ 0.0793,  0.0537,  0.0638,  ..., -0.1043, -0.0308, -0.0615]])
##########################################################
smi_encoder.encoder.layers.1.self_attn.out_proj.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-9.0572e-04, -8.1227e-03, -1.8768e-03,  1.8665e-03, -2.7624e-03,
        -3.5316e-04, -2.5711e-04,  5.3811e-03,  9.5504e-04, -5.8722e-03,
         8.5999e-03, -7.0707e-03,  1.3985e-03,  6.9159e-03, -4.0409e-03,
        -7.1582e-03,  6.2419e-03, -3.2055e-03,  1.8515e-03,  9.6552e-03,
        -5.8826e-03, -4.9199e-04,  7.7111e-04,  4.4197e-03, -2.3856e-03,
         6.5934e-04,  4.1718e-03,  3.0698e-04,  7.4522e-03, -7.1746e-03,
         1.5644e-03, -1.0549e-03, -1.0192e-02,  7.7955e-04,  2.4870e-03,
        -9.8113e-03, -8.8737e-03,  1.6352e-03,  4.4182e-03, -5.5515e-03,
        -5.1654e-03, -6.5506e-04, -1.8953e-03, -4.3433e-04,  2.6623e-03,
         3.9254e-03,  6.5122e-04,  5.6603e-04, -5.3714e-03, -4.5925e-03,
        -9.6993e-05,  3.7529e-03, -2.4664e-03, -4.4536e-03,  6.1829e-03,
        -4.2895e-03, -9.9379e-04,  2.5734e-03,  1.1479e-02, -5.6359e-03,
         5.8606e-03,  6.4813e-03, -6.2326e-03,  6.6918e-03])
##########################################################
smi_encoder.encoder.layers.1.linear1.weight shape: torch.Size([32, 64])
tensor([[ 0.0585, -0.2243,  0.1562,  ...,  0.2398,  0.2475,  0.1085],
        [ 0.1208,  0.0746, -0.2384,  ...,  0.2495, -0.0146, -0.2008],
        [-0.1316, -0.0968, -0.1711,  ...,  0.1306, -0.1049, -0.1052],
        ...,
        [ 0.0308, -0.1636, -0.1909,  ...,  0.1323,  0.2367, -0.1243],
        [-0.0452,  0.1050, -0.2390,  ..., -0.0709, -0.0879,  0.1829],
        [ 0.0323,  0.0990, -0.2124,  ...,  0.2455, -0.1173, -0.1523]])
tensor([[ 0.0391, -0.2396,  0.1526,  ...,  0.2557,  0.2385,  0.1066],
        [ 0.0698,  0.0525, -0.2039,  ...,  0.2960, -0.0208, -0.1919],
        [-0.1976, -0.0917, -0.1838,  ...,  0.1752, -0.1166, -0.1009],
        ...,
        [ 0.0415, -0.1634, -0.1859,  ...,  0.1169,  0.2506, -0.1208],
        [-0.0314,  0.1032, -0.2450,  ..., -0.0790, -0.0943,  0.1877],
        [ 0.0122,  0.1029, -0.2326,  ...,  0.2284, -0.1147, -0.1541]])
##########################################################
smi_encoder.encoder.layers.1.linear1.bias shape: torch.Size([32])
tensor([ 0.0265,  0.0136, -0.0210,  0.0027, -0.0674, -0.1189, -0.0668, -0.0568,
         0.0029, -0.0659,  0.0457, -0.0814, -0.0737, -0.0350, -0.0698,  0.1224,
        -0.1128,  0.0504, -0.0740, -0.0980, -0.0536, -0.0131,  0.0313,  0.1215,
         0.0630,  0.0584, -0.0864, -0.0665,  0.0044,  0.0623, -0.0866,  0.1139])
tensor([ 0.0226, -0.0053, -0.0192, -0.0093, -0.0856, -0.1221, -0.0822, -0.0603,
        -0.0040, -0.0797,  0.0400, -0.0803, -0.0615, -0.0347, -0.0759,  0.1126,
        -0.1129,  0.0411, -0.0860, -0.0970, -0.0671, -0.0013,  0.0341,  0.1224,
         0.0610,  0.0432, -0.0905, -0.0765, -0.0048,  0.0605, -0.0852,  0.1115])
##########################################################
smi_encoder.encoder.layers.1.linear2.weight shape: torch.Size([64, 32])
tensor([[ 0.1376, -0.0985, -0.0170,  ...,  0.0971, -0.1493,  0.1500],
        [ 0.2238,  0.2483,  0.0581,  ..., -0.0127,  0.2287,  0.1502],
        [-0.0643, -0.2293, -0.0167,  ..., -0.0528, -0.2242, -0.2023],
        ...,
        [-0.1802, -0.0286, -0.1583,  ...,  0.1061, -0.1642,  0.2317],
        [-0.1587, -0.1862,  0.1481,  ..., -0.0105, -0.0729, -0.0471],
        [ 0.1902,  0.2258, -0.0356,  ..., -0.0505, -0.2215, -0.0887]])
tensor([[ 1.2745e-01, -1.2976e-01, -3.5457e-02,  ...,  9.8258e-02,
         -1.4381e-01,  1.5404e-01],
        [ 2.3056e-01,  2.6038e-01,  5.8789e-02,  ..., -1.9530e-02,
          2.2685e-01,  1.3424e-01],
        [-7.8007e-02, -2.6256e-01, -7.2891e-03,  ..., -5.7768e-02,
         -2.4824e-01, -1.7854e-01],
        ...,
        [-1.7906e-01, -4.1696e-02, -1.5588e-01,  ...,  1.1180e-01,
         -1.6878e-01,  2.4184e-01],
        [-1.4616e-01, -1.8775e-01,  1.5326e-01,  ..., -1.1733e-04,
         -8.8144e-02, -5.4837e-02],
        [ 1.8730e-01,  2.2817e-01, -1.0371e-03,  ..., -4.7047e-02,
         -2.1267e-01, -7.7132e-02]])
##########################################################
smi_encoder.encoder.layers.1.linear2.bias shape: torch.Size([64])
tensor([ 0.0875, -0.0321,  0.1277,  0.0822, -0.0944, -0.1434, -0.0990, -0.0041,
        -0.1743,  0.1611, -0.1640, -0.1156, -0.0205, -0.1404, -0.0378,  0.1105,
         0.1631,  0.0154, -0.1641, -0.1482,  0.1592, -0.1401, -0.1145,  0.0984,
        -0.1376, -0.1562, -0.1402,  0.0036, -0.0225,  0.1115,  0.0603, -0.1478,
         0.0907,  0.1302, -0.1054, -0.0769, -0.1333,  0.1158,  0.1605, -0.1397,
         0.1643, -0.0051,  0.1235, -0.0827, -0.0647,  0.1514,  0.1478,  0.1083,
         0.0950,  0.1503, -0.0010, -0.1094,  0.0350, -0.1165, -0.0464,  0.0679,
         0.0534, -0.0086, -0.0377, -0.1163,  0.0117, -0.1611, -0.0763,  0.0680])
tensor([ 0.0869, -0.0343,  0.1191,  0.0773, -0.1003, -0.1450, -0.1014,  0.0007,
        -0.1684,  0.1481, -0.1537, -0.1155, -0.0202, -0.1370, -0.0428,  0.0992,
         0.1645,  0.0101, -0.1601, -0.1410,  0.1559, -0.1395, -0.1142,  0.1057,
        -0.1388, -0.1525, -0.1398,  0.0077, -0.0124,  0.1000,  0.0603, -0.1458,
         0.0846,  0.1247, -0.0998, -0.0820, -0.1451,  0.1195,  0.1668, -0.1459,
         0.1528, -0.0122,  0.1200, -0.0768, -0.0541,  0.1607,  0.1509,  0.1074,
         0.0883,  0.1426, -0.0017, -0.1019,  0.0315, -0.1238, -0.0438,  0.0697,
         0.0554, -0.0032, -0.0304, -0.1184,  0.0163, -0.1554, -0.0788,  0.0776])
##########################################################
smi_encoder.encoder.layers.1.norm1.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0028, 1.0048, 0.9989, 1.0152, 0.9838, 0.9988, 0.9898, 0.9923, 0.9990,
        0.9818, 1.0045, 1.0072, 1.0189, 1.0145, 1.0089, 0.9861, 1.0009, 1.0113,
        0.9632, 0.9994, 1.0164, 1.0026, 0.9985, 1.0103, 1.0108, 1.0102, 0.9973,
        1.0178, 0.9855, 0.9841, 0.9954, 1.0131, 0.9925, 0.9918, 1.0258, 1.0137,
        1.0112, 0.9981, 1.0119, 1.0195, 0.9988, 1.0220, 0.9982, 0.9842, 1.0240,
        1.0424, 1.0032, 1.0011, 0.9859, 1.0060, 0.9980, 1.0134, 0.9899, 1.0153,
        0.9760, 0.9963, 0.9951, 0.9918, 0.9885, 0.9728, 0.9866, 0.9885, 0.9995,
        0.9913])
##########################################################
smi_encoder.encoder.layers.1.norm1.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-1.0528e-03, -8.3974e-03, -3.0381e-03,  2.4093e-03, -2.8268e-03,
         9.7762e-04, -5.1728e-04,  5.4836e-03,  1.5208e-03, -7.1523e-03,
         9.7803e-03, -6.4604e-03,  1.0986e-03,  8.9105e-03, -3.9833e-03,
        -7.2924e-03,  5.5263e-03, -3.3057e-03,  2.1255e-03,  8.1813e-03,
        -6.2081e-03,  4.4513e-05,  1.4010e-03,  5.7164e-03, -1.6412e-03,
         2.6158e-03,  4.9260e-03, -1.3984e-04,  7.6979e-03, -8.1956e-03,
         8.7996e-04, -1.1931e-03, -1.0904e-02,  1.9390e-03,  3.7192e-03,
        -1.0125e-02, -9.2811e-03,  2.0535e-03,  5.9038e-03, -5.1244e-03,
        -6.3263e-03, -4.2483e-04, -2.5093e-03,  6.2628e-04,  3.1293e-03,
         4.5996e-03,  1.0081e-03,  1.1885e-03, -5.0430e-03, -6.3952e-03,
        -1.4207e-03,  4.1666e-03, -3.4659e-03, -4.5622e-03,  6.0421e-03,
        -4.2365e-03, -1.6289e-03,  2.3109e-03,  1.1918e-02, -6.2979e-03,
         5.7080e-03,  6.7973e-03, -6.3359e-03,  7.1654e-03])
##########################################################
smi_encoder.encoder.layers.1.norm2.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0180, 0.9993, 0.9957, 1.0140, 0.9973, 0.9937, 0.9937, 0.9951, 0.9997,
        1.0049, 0.9982, 1.0180, 1.0199, 1.0128, 1.0215, 0.9924, 1.0191, 1.0032,
        0.9719, 1.0009, 1.0216, 0.9935, 1.0079, 1.0082, 1.0036, 1.0059, 1.0068,
        1.0322, 1.0005, 0.9777, 0.9944, 1.0213, 1.0160, 0.9828, 1.0251, 1.0149,
        1.0015, 1.0035, 1.0164, 1.0266, 1.0003, 1.0157, 1.0160, 0.9971, 1.0116,
        1.0117, 1.0063, 0.9994, 0.9915, 1.0134, 1.0025, 1.0142, 0.9901, 1.0124,
        0.9706, 0.9954, 0.9974, 0.9790, 1.0057, 0.9941, 1.0085, 0.9935, 1.0152,
        0.9869])
##########################################################
smi_encoder.encoder.layers.1.norm2.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-0.0010,  0.0007, -0.0072, -0.0030, -0.0040, -0.0026, -0.0016,  0.0032,
         0.0063, -0.0119,  0.0078, -0.0006, -0.0005,  0.0055, -0.0064, -0.0099,
         0.0007, -0.0045,  0.0036,  0.0060, -0.0011,  0.0021, -0.0008,  0.0060,
        -0.0018,  0.0038, -0.0009,  0.0033,  0.0069, -0.0113,  0.0031,  0.0013,
        -0.0079, -0.0057,  0.0066, -0.0036, -0.0099,  0.0053,  0.0037, -0.0078,
        -0.0072, -0.0017, -0.0019,  0.0081,  0.0090,  0.0064,  0.0026, -0.0025,
        -0.0049, -0.0030, -0.0025,  0.0084, -0.0033, -0.0058,  0.0027,  0.0011,
         0.0009,  0.0050,  0.0072, -0.0023,  0.0069,  0.0054, -0.0042,  0.0073])
##########################################################
smi_encoder.encoder.layers.2.self_attn.in_proj_weight shape: torch.Size([192, 64])
tensor([[-0.0358, -0.0733,  0.0426,  ..., -0.0554, -0.1505,  0.0886],
        [-0.1389, -0.0028, -0.0981,  ..., -0.1081, -0.0789,  0.1082],
        [-0.0739,  0.0640,  0.0730,  ...,  0.0664, -0.0450, -0.1453],
        ...,
        [-0.1419,  0.0214, -0.0171,  ..., -0.0403,  0.0725, -0.1000],
        [ 0.0373, -0.0542,  0.0393,  ...,  0.0492,  0.1418, -0.0834],
        [ 0.0776, -0.0937, -0.1047,  ..., -0.0646, -0.0834,  0.0258]])
tensor([[-0.0035, -0.0641,  0.0063,  ..., -0.0769, -0.1655,  0.0793],
        [-0.0975, -0.0317, -0.0779,  ..., -0.0930, -0.0576,  0.1204],
        [-0.0986,  0.0495,  0.0915,  ...,  0.0755, -0.0266, -0.1354],
        ...,
        [-0.1565,  0.0184, -0.0073,  ..., -0.0300,  0.0783, -0.0916],
        [ 0.0269, -0.0559,  0.0449,  ...,  0.0521,  0.1389, -0.0819],
        [ 0.0791, -0.0922, -0.1107,  ..., -0.0486, -0.0841,  0.0255]])
##########################################################
smi_encoder.encoder.layers.2.self_attn.in_proj_bias shape: torch.Size([192])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 1.9970e-02, -2.3158e-02, -9.4204e-03,  3.5446e-02, -2.0989e-02,
        -3.7742e-02, -1.3513e-02,  1.7699e-02, -3.9651e-02,  1.8906e-02,
        -2.9822e-02,  2.1719e-03, -3.5815e-02,  3.0106e-02,  5.8238e-03,
        -1.4291e-02, -1.5208e-02,  1.1783e-02, -8.6595e-03,  7.0636e-03,
         1.6336e-03,  2.2212e-02,  4.2612e-02,  2.8447e-02, -1.7278e-02,
        -3.7432e-03, -1.0777e-02, -3.3000e-02,  1.4815e-02, -2.9432e-02,
         1.1725e-02, -8.3694e-03,  2.8689e-02,  2.2572e-02, -9.1414e-03,
        -1.8690e-02, -2.6873e-02,  1.5139e-02,  2.9217e-02,  5.3142e-03,
         9.4004e-03, -2.7711e-02,  3.0352e-02,  3.4994e-02,  3.5091e-04,
         2.7787e-02, -8.9724e-04,  1.5043e-03, -6.8587e-03,  1.5244e-02,
         1.1529e-02,  7.7513e-03, -2.4050e-02,  1.5463e-02,  5.0317e-03,
         2.1584e-02, -7.2937e-03, -1.8244e-02, -1.7727e-02,  1.8465e-02,
         1.9941e-02, -2.3781e-02,  1.1232e-02, -2.0549e-02, -5.2435e-06,
         4.9344e-05, -2.5989e-06,  7.8825e-05, -2.6951e-05,  5.4910e-05,
         7.6819e-06, -2.0078e-06,  4.4826e-06,  8.1081e-06,  3.1974e-05,
         5.2817e-07,  4.9933e-05, -3.0090e-05,  1.3421e-06, -2.3442e-05,
        -1.7054e-05, -1.4661e-05,  5.1121e-06,  2.1645e-05,  4.0427e-06,
        -1.3369e-04, -2.3247e-06,  4.3797e-05,  2.0945e-05, -1.5621e-05,
         8.5348e-08, -1.8434e-05,  3.2226e-05,  7.3548e-07,  4.0035e-06,
         2.2496e-05,  1.3617e-05, -1.8430e-05, -1.3854e-05,  6.1034e-06,
        -2.7475e-05, -1.3549e-05,  6.4238e-06,  6.2650e-05, -3.0243e-06,
        -3.2988e-05, -8.3181e-05, -3.0970e-05, -3.3231e-05, -3.9532e-05,
         1.8452e-05,  2.1368e-07, -1.2859e-05,  8.6394e-06,  2.8898e-05,
        -2.8584e-05,  6.9283e-05,  3.9911e-06, -1.3796e-05, -8.6031e-06,
        -2.3321e-06,  6.2348e-05, -6.4661e-05,  9.0219e-06, -3.0273e-05,
        -2.3952e-06,  2.6902e-05,  1.5946e-04, -2.1976e-03, -1.6254e-03,
        -1.0690e-02, -3.9454e-04, -6.1791e-03, -1.1354e-03,  4.7577e-03,
         4.7673e-03,  5.1113e-03, -3.7542e-03,  1.0132e-03, -8.8311e-03,
        -2.3867e-04,  4.7844e-03,  1.4768e-03,  5.4351e-03,  3.8959e-03,
         3.3505e-03, -6.0587e-03, -3.4208e-03, -6.0086e-03,  5.8889e-03,
         1.3208e-03,  3.8486e-03, -8.4809e-04,  3.9709e-04, -1.1881e-02,
         5.8496e-03,  4.5917e-03,  5.6832e-03,  5.5517e-03,  5.4854e-04,
         2.6964e-03, -2.1326e-03, -1.6793e-03,  1.8712e-03, -4.4424e-03,
        -4.3769e-03,  7.2752e-03,  4.8424e-03, -4.9175e-03,  5.8632e-03,
        -2.7208e-03,  2.9953e-03, -3.2479e-03,  6.2248e-04, -3.6087e-04,
        -6.9365e-04,  7.0012e-03,  7.6070e-03,  3.7346e-03, -3.4918e-03,
        -3.5221e-03,  1.1904e-03, -5.6243e-03,  7.9914e-03,  1.4226e-03,
        -6.6944e-03, -5.5178e-03, -4.4662e-03,  2.0064e-03, -7.5105e-03,
         1.6382e-04,  1.8424e-03])
##########################################################
smi_encoder.encoder.layers.2.self_attn.out_proj.weight shape: torch.Size([64, 64])
tensor([[ 0.0505,  0.0281, -0.0763,  ..., -0.1009, -0.0134, -0.0966],
        [ 0.0685, -0.1013,  0.0551,  ...,  0.0990,  0.0783,  0.0768],
        [ 0.0946,  0.0698, -0.1162,  ...,  0.0208, -0.0469, -0.1210],
        ...,
        [-0.0241, -0.0221, -0.0948,  ..., -0.0118, -0.0531, -0.0943],
        [-0.0603, -0.0441,  0.0700,  ..., -0.0913, -0.0121, -0.0685],
        [ 0.0983,  0.0556,  0.0573,  ..., -0.1142, -0.0500, -0.0667]])
tensor([[ 0.0584,  0.0273, -0.0686,  ..., -0.1078, -0.0223, -0.0795],
        [ 0.0803, -0.1068,  0.0376,  ...,  0.0949,  0.0546,  0.0773],
        [ 0.0941,  0.0798, -0.1100,  ...,  0.0213, -0.0253, -0.1367],
        ...,
        [-0.0222, -0.0222, -0.0872,  ..., -0.0052, -0.0494, -0.1033],
        [-0.0442, -0.0441,  0.0544,  ..., -0.1054, -0.0231, -0.0580],
        [ 0.0767,  0.0632,  0.0674,  ..., -0.0983, -0.0391, -0.0828]])
##########################################################
smi_encoder.encoder.layers.2.self_attn.out_proj.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 1.0485e-03, -2.2211e-03, -7.7586e-03, -1.0582e-03, -4.0424e-03,
        -2.7922e-03, -3.2730e-03,  6.4108e-03,  6.1720e-03, -8.3746e-03,
         6.1462e-03,  2.8429e-03,  4.0062e-06,  1.7513e-03, -7.1203e-03,
        -1.1162e-02, -4.6699e-04, -4.6498e-03,  3.5218e-03,  7.5051e-03,
         1.0908e-03, -2.0685e-03,  7.0672e-04,  6.3211e-03,  2.4507e-04,
         3.6331e-03, -4.6893e-03, -3.8988e-04,  2.0826e-03, -1.3205e-02,
         8.5747e-04,  1.1820e-03, -7.3656e-03, -5.5259e-03,  7.7604e-03,
        -5.2921e-04, -9.7130e-03,  4.2747e-03,  6.2059e-03, -1.2994e-02,
        -2.2814e-03, -2.0506e-04, -4.6100e-03,  3.2019e-03,  3.6410e-03,
         4.7964e-03,  1.6012e-03, -7.1512e-03, -8.8443e-04, -3.1931e-03,
         1.9694e-03,  2.4048e-03, -5.0289e-03, -1.8572e-03, -1.3513e-03,
         4.2293e-03,  4.4994e-03,  4.4341e-03,  4.8736e-03, -3.1559e-03,
         1.5419e-02,  4.4659e-03, -9.3858e-03,  5.9376e-03])
##########################################################
smi_encoder.encoder.layers.2.linear1.weight shape: torch.Size([32, 64])
tensor([[-0.0917,  0.1786,  0.1488,  ..., -0.1822, -0.2023,  0.1424],
        [ 0.2117,  0.0578, -0.1329,  ...,  0.2452,  0.1023,  0.1713],
        [ 0.2236, -0.1299,  0.1969,  ..., -0.0936, -0.1537, -0.1491],
        ...,
        [ 0.1789,  0.0421, -0.1572,  ..., -0.0209,  0.1040, -0.1289],
        [-0.0367, -0.0098, -0.1794,  ...,  0.1616,  0.0448,  0.0845],
        [ 0.0516,  0.1475, -0.2289,  ..., -0.0570, -0.1611, -0.2117]])
tensor([[-7.9941e-02,  1.9699e-01,  1.1194e-01,  ..., -1.7995e-01,
         -2.2254e-01,  1.1779e-01],
        [ 2.5260e-01,  6.9841e-02, -8.2256e-02,  ...,  2.6130e-01,
          1.1698e-01,  1.8820e-01],
        [ 1.9843e-01, -1.4915e-01,  2.1163e-01,  ..., -6.7467e-02,
         -1.3415e-01, -1.4243e-01],
        ...,
        [ 1.9107e-01,  3.4842e-02, -1.3970e-01,  ...,  1.2161e-04,
          1.2146e-01, -1.0886e-01],
        [-5.3794e-02,  4.5102e-02, -1.5834e-01,  ...,  1.8743e-01,
          5.0173e-02,  7.6308e-02],
        [ 6.3380e-02,  1.4781e-01, -2.0694e-01,  ..., -6.1336e-02,
         -1.5700e-01, -2.0007e-01]])
##########################################################
smi_encoder.encoder.layers.2.linear1.bias shape: torch.Size([32])
tensor([ 0.0265,  0.0136, -0.0210,  0.0027, -0.0674, -0.1189, -0.0668, -0.0568,
         0.0029, -0.0659,  0.0457, -0.0814, -0.0737, -0.0350, -0.0698,  0.1224,
        -0.1128,  0.0504, -0.0740, -0.0980, -0.0536, -0.0131,  0.0313,  0.1215,
         0.0630,  0.0584, -0.0864, -0.0665,  0.0044,  0.0623, -0.0866,  0.1139])
tensor([ 0.0293, -0.0077, -0.0420, -0.0035, -0.0751, -0.1183, -0.0753, -0.0584,
         0.0073, -0.0805,  0.0375, -0.0962, -0.0891, -0.0389, -0.0726,  0.1105,
        -0.1284,  0.0368, -0.0749, -0.1093, -0.0600, -0.0124,  0.0340,  0.1046,
         0.0522,  0.0521, -0.0787, -0.0792,  0.0164,  0.0471, -0.0943,  0.1010])
##########################################################
smi_encoder.encoder.layers.2.linear2.weight shape: torch.Size([64, 32])
tensor([[ 0.0410,  0.2472,  0.2103,  ..., -0.0078,  0.0164, -0.1022],
        [-0.2384, -0.0099, -0.1419,  ..., -0.0011,  0.0280, -0.0318],
        [ 0.2215, -0.0899,  0.0076,  ..., -0.0364,  0.1213,  0.2131],
        ...,
        [ 0.1376,  0.0674,  0.0880,  ..., -0.0924, -0.0733, -0.1851],
        [-0.2384,  0.0703, -0.0787,  ..., -0.2042, -0.1702,  0.1703],
        [ 0.1602,  0.1914,  0.1005,  ...,  0.1032,  0.1519, -0.2475]])
tensor([[ 0.0504,  0.2742,  0.1879,  ..., -0.0084, -0.0134, -0.0908],
        [-0.2531, -0.0409, -0.1315,  ..., -0.0050,  0.0194, -0.0402],
        [ 0.2200, -0.0853,  0.0121,  ..., -0.0423,  0.1053,  0.2129],
        ...,
        [ 0.1446,  0.0750,  0.0968,  ..., -0.1019, -0.0582, -0.1802],
        [-0.2599,  0.0686, -0.0827,  ..., -0.2017, -0.1961,  0.1540],
        [ 0.1512,  0.1701,  0.1086,  ...,  0.1138,  0.1806, -0.2526]])
##########################################################
smi_encoder.encoder.layers.2.linear2.bias shape: torch.Size([64])
tensor([ 0.0875, -0.0321,  0.1277,  0.0822, -0.0944, -0.1434, -0.0990, -0.0041,
        -0.1743,  0.1611, -0.1640, -0.1156, -0.0205, -0.1404, -0.0378,  0.1105,
         0.1631,  0.0154, -0.1641, -0.1482,  0.1592, -0.1401, -0.1145,  0.0984,
        -0.1376, -0.1562, -0.1402,  0.0036, -0.0225,  0.1115,  0.0603, -0.1478,
         0.0907,  0.1302, -0.1054, -0.0769, -0.1333,  0.1158,  0.1605, -0.1397,
         0.1643, -0.0051,  0.1235, -0.0827, -0.0647,  0.1514,  0.1478,  0.1083,
         0.0950,  0.1503, -0.0010, -0.1094,  0.0350, -0.1165, -0.0464,  0.0679,
         0.0534, -0.0086, -0.0377, -0.1163,  0.0117, -0.1611, -0.0763,  0.0680])
tensor([ 0.0889, -0.0338,  0.1181,  0.0876, -0.0862, -0.1481, -0.1010,  0.0028,
        -0.1647,  0.1483, -0.1555, -0.1128, -0.0175, -0.1379, -0.0399,  0.1030,
         0.1576,  0.0107, -0.1592, -0.1455,  0.1578, -0.1448, -0.1193,  0.1020,
        -0.1395, -0.1509, -0.1348,  0.0030, -0.0232,  0.0965,  0.0553, -0.1399,
         0.0830,  0.1280, -0.1027, -0.0780, -0.1427,  0.1155,  0.1701, -0.1480,
         0.1718, -0.0050,  0.1281, -0.0802, -0.0647,  0.1459,  0.1492,  0.1058,
         0.0921,  0.1432, -0.0048, -0.1149,  0.0313, -0.1125, -0.0471,  0.0644,
         0.0528, -0.0043, -0.0319, -0.1188,  0.0181, -0.1546, -0.0842,  0.0704])
##########################################################
smi_encoder.encoder.layers.2.norm1.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0125, 0.9865, 1.0027, 1.0096, 0.9896, 0.9818, 0.9795, 0.9994, 1.0024,
        0.9996, 0.9978, 1.0124, 1.0164, 1.0047, 1.0135, 0.9963, 1.0251, 0.9880,
        0.9744, 1.0005, 1.0165, 0.9945, 1.0083, 1.0092, 1.0055, 1.0066, 0.9915,
        1.0318, 0.9970, 0.9594, 0.9882, 1.0173, 1.0100, 0.9765, 1.0090, 1.0149,
        1.0081, 0.9987, 1.0070, 1.0244, 0.9971, 1.0128, 0.9983, 0.9921, 1.0037,
        1.0197, 0.9917, 0.9940, 0.9898, 1.0188, 1.0019, 1.0126, 0.9921, 0.9956,
        0.9717, 0.9948, 0.9915, 0.9719, 1.0043, 0.9887, 1.0115, 0.9912, 1.0161,
        0.9885])
##########################################################
smi_encoder.encoder.layers.2.norm1.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 0.0013, -0.0021, -0.0086, -0.0010, -0.0038, -0.0037, -0.0038,  0.0063,
         0.0060, -0.0095,  0.0057,  0.0030, -0.0003,  0.0021, -0.0084, -0.0133,
        -0.0007, -0.0054,  0.0032,  0.0065,  0.0012, -0.0025,  0.0013,  0.0071,
         0.0009,  0.0032, -0.0048, -0.0008,  0.0016, -0.0135,  0.0002,  0.0008,
        -0.0074, -0.0067,  0.0086, -0.0005, -0.0102,  0.0045,  0.0071, -0.0140,
        -0.0024, -0.0004, -0.0048,  0.0037,  0.0025,  0.0047,  0.0010, -0.0063,
        -0.0004, -0.0043,  0.0009,  0.0022, -0.0059, -0.0022, -0.0027,  0.0037,
         0.0045,  0.0033,  0.0044, -0.0041,  0.0143,  0.0047, -0.0100,  0.0063])
##########################################################
smi_encoder.encoder.layers.2.norm2.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0054, 1.0074, 1.0101, 1.0302, 0.9981, 1.0033, 1.0009, 1.0127, 1.0029,
        0.9939, 1.0142, 1.0223, 1.0264, 1.0039, 1.0298, 1.0108, 1.0233, 0.9944,
        0.9925, 1.0147, 1.0188, 1.0094, 0.9989, 1.0215, 1.0059, 1.0221, 0.9911,
        1.0396, 1.0080, 0.9633, 0.9963, 1.0084, 1.0040, 1.0111, 1.0075, 1.0057,
        1.0083, 1.0112, 1.0244, 1.0321, 1.0093, 1.0292, 0.9980, 1.0059, 1.0084,
        1.0421, 1.0036, 1.0058, 0.9954, 1.0144, 0.9927, 1.0201, 1.0132, 1.0214,
        1.0112, 0.9984, 0.9977, 0.9709, 1.0053, 1.0010, 1.0290, 1.0003, 1.0371,
        1.0075])
##########################################################
smi_encoder.encoder.layers.2.norm2.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 1.9471e-03, -6.5645e-03, -7.7542e-03,  3.3608e-03,  6.9985e-03,
        -6.3391e-03, -4.0718e-03,  7.2682e-03,  5.6762e-03, -7.7617e-03,
         8.6333e-03, -4.1865e-03,  2.3137e-03,  5.5861e-03, -6.6350e-03,
        -2.5098e-03, -3.1268e-05, -3.9242e-03,  8.9969e-04, -1.9801e-03,
         4.9900e-03, -5.3925e-03, -3.3626e-03,  7.0982e-03, -1.8562e-03,
        -2.5502e-04,  2.1628e-03,  1.5915e-03, -5.5077e-03, -1.3693e-02,
        -5.0772e-03,  8.3170e-04, -7.3869e-04, -2.3708e-03,  2.0736e-03,
        -9.1776e-03, -8.4970e-03,  6.4777e-03,  8.0811e-03, -1.0568e-02,
         3.6541e-03, -1.2152e-03,  4.7977e-03,  4.2292e-03,  1.3816e-04,
        -4.0335e-04, -2.1660e-03, -5.5863e-03, -2.8409e-03, -3.6852e-04,
        -2.9160e-03, -6.8521e-03, -6.3508e-03,  1.6044e-03, -3.4629e-03,
        -1.5578e-04,  2.3576e-03,  4.7677e-03,  3.6133e-03,  5.0599e-04,
         6.4632e-03,  9.3984e-04, -9.5651e-03,  3.1523e-03])
##########################################################
prot_encoder.embedding.weight shape: torch.Size([166, 64])
tensor([[-0.2079,  1.0140, -1.1043,  ...,  0.4444, -0.8896, -0.6878],
        [ 0.5944, -0.8499, -1.1996,  ..., -0.7780,  0.6863,  0.0978],
        [-0.8942, -0.6882, -1.0023,  ..., -0.7508,  0.6727,  0.3388],
        ...,
        [ 0.1225,  0.1419, -0.5128,  ..., -0.0438, -0.7894,  0.9765],
        [-1.5060,  1.1782, -0.5882,  ...,  1.2845, -1.4379, -0.1962],
        [ 0.1942,  2.2988, -1.5137,  ..., -0.1487,  0.5204,  0.7415]])
tensor([[-0.2079,  1.0140, -1.1043,  ...,  0.4444, -0.8896, -0.6878],
        [ 0.6068, -0.8301, -1.1831,  ..., -0.7526,  0.6676,  0.0878],
        [-0.8833, -0.7129, -1.0509,  ..., -0.6780,  0.7246,  0.3057],
        ...,
        [ 0.1225,  0.1419, -0.5128,  ..., -0.0438, -0.7894,  0.9765],
        [-1.5060,  1.1782, -0.5882,  ...,  1.2845, -1.4379, -0.1962],
        [ 0.1942,  2.2988, -1.5137,  ..., -0.1487,  0.5204,  0.7415]])
##########################################################
prot_encoder.dense.weight shape: torch.Size([300, 2500])
tensor([[ 0.0086,  0.0340,  0.0115,  ...,  0.0334,  0.0332, -0.0138],
        [ 0.0342, -0.0131, -0.0034,  ...,  0.0215, -0.0345,  0.0456],
        [ 0.0226,  0.0424, -0.0209,  ...,  0.0313, -0.0074, -0.0089],
        ...,
        [ 0.0461,  0.0045,  0.0408,  ...,  0.0184,  0.0373, -0.0073],
        [-0.0396, -0.0445, -0.0455,  ..., -0.0150,  0.0246,  0.0387],
        [ 0.0405,  0.0076, -0.0347,  ..., -0.0278,  0.0109,  0.0235]])
tensor([[ 0.0663,  0.0520,  0.0558,  ...,  0.0348,  0.0347, -0.0123],
        [ 0.0065,  0.0889, -0.0361,  ...,  0.0228, -0.0332,  0.0469],
        [ 0.0331,  0.0365, -0.0649,  ...,  0.0309, -0.0078, -0.0093],
        ...,
        [ 0.0378,  0.0315,  0.0131,  ...,  0.0120,  0.0309, -0.0137],
        [-0.0535, -0.0579, -0.0547,  ..., -0.0104,  0.0292,  0.0433],
        [ 0.0324,  0.0430, -0.0334,  ..., -0.0203,  0.0184,  0.0310]])
##########################################################
prot_encoder.dense.bias shape: torch.Size([300])
tensor([ 1.0961e-02, -7.5747e-03,  7.3613e-03, -2.2572e-03, -8.4273e-03,
         4.4395e-03, -2.8804e-03,  1.6813e-02,  1.1970e-02, -1.6178e-03,
        -2.0583e-03,  6.2757e-03, -1.7893e-04,  8.4382e-04, -1.0739e-02,
        -1.9431e-03,  5.9090e-03, -1.2069e-02, -2.8860e-05, -1.3425e-02,
         7.1548e-03, -8.3632e-03, -7.4330e-03, -1.3029e-02,  5.0159e-03,
        -1.8247e-02, -1.4689e-02,  7.9698e-03,  6.6907e-03, -1.2383e-02,
         3.4365e-03,  1.0109e-02,  4.4672e-04, -1.3195e-02,  1.1583e-02,
        -1.5830e-02,  1.6885e-02, -5.1676e-03, -1.6724e-02, -1.8946e-02,
         5.2629e-03, -1.2744e-02, -1.8056e-02, -1.6513e-02, -1.1116e-02,
         1.7251e-02,  1.8417e-02, -1.7480e-02, -6.8700e-03, -1.3795e-03,
        -2.5110e-03, -5.7480e-03, -4.6329e-03, -1.1653e-02, -1.3035e-02,
         1.7637e-02,  9.8439e-03,  3.1917e-03, -1.9543e-02,  1.8379e-03,
         1.7382e-02, -1.4812e-02, -3.9300e-03, -1.8352e-03, -1.0687e-02,
        -1.8960e-02,  1.2747e-02,  1.5117e-02,  1.6851e-02,  1.0688e-02,
        -9.5431e-03, -1.9151e-02,  2.9464e-03, -1.8798e-02, -1.9325e-02,
        -1.5714e-02,  1.3938e-02, -1.1052e-02,  1.6370e-02,  1.5875e-02,
        -1.5697e-02, -4.4388e-04,  1.2565e-02,  1.1108e-03,  2.9912e-03,
         1.8536e-02,  6.8040e-03, -4.1048e-03, -1.4411e-02, -1.6853e-02,
         8.9830e-03,  3.6016e-04,  5.9036e-03, -7.1900e-03,  1.2840e-02,
         8.7241e-03,  1.2855e-02,  1.9170e-02,  8.3106e-03,  8.5479e-03,
        -6.8038e-03,  1.8935e-02,  6.7809e-03,  4.9791e-03,  1.8474e-02,
         7.4845e-03,  1.9502e-02, -1.2514e-02,  1.4216e-02,  1.9550e-02,
         1.9992e-02,  1.2611e-02,  1.6451e-02,  2.5133e-03, -1.7608e-02,
        -3.4263e-05,  1.2212e-02, -9.0141e-03,  1.5364e-02,  8.8909e-03,
        -4.6087e-03,  5.5145e-03, -1.6808e-02, -3.5716e-03,  1.6538e-03,
         1.2274e-03, -3.2945e-03, -1.5686e-02,  7.5597e-03,  1.0298e-02,
        -1.9714e-02, -1.1587e-02,  4.2300e-03,  1.4370e-03,  7.3165e-03,
         9.9657e-03, -1.4422e-02, -5.4513e-04,  1.7000e-02, -5.0991e-03,
        -1.6097e-02,  1.3398e-02, -1.0319e-02, -1.8265e-02, -1.1097e-02,
        -9.0814e-03,  5.9715e-03,  7.4692e-03, -1.0800e-02, -4.9538e-04,
         7.3065e-03, -5.2214e-03, -1.5973e-02, -1.4612e-02, -3.3473e-03,
         1.3796e-02, -1.6023e-02,  1.2934e-02,  1.9798e-03,  1.9799e-02,
         9.1178e-03,  4.1071e-03,  1.7145e-02, -8.3218e-03,  1.4828e-02,
        -2.3501e-05, -1.0953e-04, -5.1037e-03, -8.8331e-03,  5.7234e-03,
         2.5301e-03, -1.2660e-02,  5.5907e-03, -7.6805e-03,  5.8608e-03,
         1.0602e-02,  1.4493e-02, -1.7100e-02,  8.2846e-03, -1.5922e-02,
        -4.0986e-03,  1.5250e-02, -3.0811e-03,  3.3764e-03, -8.6462e-03,
        -1.8025e-02,  5.5926e-03,  3.7609e-03,  1.6353e-02, -1.8737e-02,
         1.2600e-02,  7.9202e-03,  1.3382e-02, -9.3638e-03, -5.3135e-03,
         1.0967e-02,  1.8299e-02, -7.1927e-04,  1.9987e-03, -1.4725e-02,
         8.3378e-03,  6.7156e-03, -1.4205e-03,  1.2489e-02, -1.7889e-02,
        -7.2779e-03, -1.7488e-02, -1.9053e-02,  8.3948e-03, -1.9040e-02,
        -1.0584e-02, -1.4330e-02,  3.8289e-03,  1.9865e-02,  7.3359e-03,
        -7.3287e-03, -1.7226e-02, -1.3944e-02, -1.3557e-02,  2.2558e-03,
        -1.1533e-02,  1.6425e-02, -1.0494e-02, -1.6108e-02,  1.3135e-02,
        -5.1134e-03, -1.6952e-02,  1.7608e-02,  4.3901e-03,  1.6680e-02,
        -1.5012e-02, -9.4916e-03, -1.4688e-02,  1.8819e-02, -1.3662e-02,
        -6.9317e-03,  1.8186e-02,  1.1664e-02,  1.7445e-02, -1.3138e-03,
        -8.8247e-03, -1.8541e-02, -1.4953e-02, -1.9941e-02,  9.1550e-03,
        -1.7667e-02,  5.2482e-03,  1.9039e-02, -1.2785e-02,  1.8086e-03,
        -1.4849e-02,  9.3145e-03, -1.8662e-02, -8.1419e-03,  5.5324e-03,
        -1.4803e-02,  7.6802e-03, -1.9973e-03, -1.8181e-02, -1.6648e-02,
        -2.6304e-03,  1.9132e-02, -1.3153e-02, -1.8206e-02, -6.5931e-03,
         2.7980e-03, -1.6211e-02, -7.1995e-03, -1.1003e-02,  1.3669e-02,
         7.8916e-03, -4.5760e-03,  3.0578e-03, -1.8622e-02, -7.5748e-03,
         1.9561e-02,  1.2425e-02,  1.2728e-02,  3.1006e-03, -8.3535e-03,
         1.0689e-03,  2.3089e-03, -5.2326e-03,  1.3291e-02, -3.7479e-03,
        -1.3178e-02, -9.3191e-04,  1.5382e-02, -1.5782e-02, -2.7707e-03,
         1.8506e-02,  1.4497e-02,  1.5027e-02, -1.7805e-02, -2.6043e-03,
         1.7593e-02, -1.4326e-02, -1.4960e-02,  1.8117e-02,  4.0035e-03])
tensor([ 4.8752e-02, -3.3965e-03,  2.5414e-02,  5.9851e-02, -2.5830e-02,
         4.6095e-02,  1.4233e-02, -5.9447e-03,  4.4105e-02,  2.0559e-02,
        -1.8704e-02,  6.4419e-02,  2.8298e-02, -1.9474e-02, -7.8642e-02,
        -7.8541e-03,  4.3738e-02,  1.0469e-01,  5.9833e-02, -1.3741e-02,
         6.5442e-02, -8.2470e-03,  2.3725e-02,  1.4447e-03,  6.2837e-03,
         1.7115e-02,  3.9074e-02,  5.9157e-03, -2.2666e-03,  1.9673e-02,
        -2.5798e-02,  1.5685e-02,  1.8400e-02,  5.0172e-02, -2.9785e-02,
         5.7388e-02,  5.9842e-02, -5.4368e-03,  3.3778e-02,  1.5533e-02,
        -5.1005e-02, -2.5066e-02,  6.5780e-02, -5.8039e-02,  2.6525e-02,
        -1.8118e-02, -1.7365e-02, -5.4926e-02, -5.4320e-02, -3.4020e-02,
         1.0574e-02,  2.2022e-02, -9.4207e-03,  2.5370e-02,  2.2012e-02,
         4.4094e-03,  7.8221e-02, -2.6373e-02,  4.3971e-02,  3.1008e-02,
         3.3359e-02, -1.4209e-02, -1.3647e-02,  4.4485e-02, -6.9971e-02,
         6.3317e-03,  1.0170e-02,  2.6794e-02,  7.0544e-02, -4.3513e-03,
        -2.5853e-03,  4.3714e-02,  1.1930e-02,  5.8227e-02, -1.1559e-02,
         4.1508e-03, -3.3816e-02,  7.2674e-03, -4.6701e-02,  3.4584e-02,
        -5.5249e-02,  6.1972e-02,  5.2551e-02,  3.0224e-02, -1.8842e-02,
         5.6826e-02,  2.0482e-02, -5.4899e-02, -3.6763e-02, -1.6885e-02,
        -1.2544e-02,  8.8497e-05,  7.8147e-02,  5.7080e-02,  5.0027e-03,
         1.4054e-02,  4.4144e-02,  2.7581e-03,  1.9535e-03,  2.9800e-02,
         4.0147e-02,  7.2877e-02, -3.0031e-03,  2.3434e-02,  4.7495e-02,
         3.7830e-02, -7.4451e-03,  7.0413e-03,  1.7799e-02,  5.8753e-02,
         7.5254e-02,  6.2008e-02,  2.9843e-02,  5.5969e-02, -9.4205e-03,
         8.2403e-02,  2.6287e-02, -8.0740e-03,  2.5714e-02, -2.6492e-02,
        -4.3442e-02, -6.3967e-03, -7.8970e-03, -8.8751e-04, -4.6170e-02,
         1.0177e-02, -2.3182e-02,  3.3434e-02,  1.6709e-02,  1.2954e-02,
        -3.8071e-02, -2.1538e-02,  2.0866e-02, -4.6855e-02,  6.3141e-02,
        -3.2742e-02, -2.1832e-02,  2.9935e-02,  3.5134e-02,  1.2662e-02,
         3.3269e-02,  3.1276e-02, -1.5933e-02, -6.6263e-02, -2.0412e-02,
         1.0795e-02,  5.2855e-02,  1.1001e-02, -4.0405e-03,  1.9725e-02,
         1.5676e-02,  2.2878e-02,  1.6579e-02,  4.5132e-03, -1.2456e-02,
         3.0242e-02,  2.7411e-02,  1.6695e-02,  3.1493e-02,  3.9187e-02,
         4.7862e-02,  1.5433e-02,  2.9516e-02, -3.6057e-02,  2.8324e-02,
         2.8046e-02, -2.1474e-02,  1.2841e-02, -9.2369e-02,  3.3804e-02,
         4.0593e-03, -3.6778e-02, -6.6292e-03, -3.4897e-02,  4.1121e-02,
         4.0582e-02,  4.1444e-02, -1.6394e-02,  2.1077e-02,  5.1061e-04,
        -3.0258e-02, -1.7490e-02, -5.6622e-04,  1.5058e-02,  7.8480e-03,
        -2.1138e-02,  3.1184e-02,  5.9887e-03,  1.5409e-02, -5.5338e-02,
         9.4515e-04,  4.9604e-02,  4.0966e-02, -2.4229e-02, -4.4582e-02,
         2.4697e-02,  1.5591e-02, -2.1086e-02,  1.4155e-03,  8.7736e-03,
         3.0706e-03,  1.1016e-02, -2.0722e-02,  4.2632e-02,  1.2314e-02,
         6.0266e-03, -4.0472e-02, -2.4409e-02,  2.5003e-02, -2.1941e-02,
        -2.4037e-02, -7.0334e-03,  1.3611e-02,  3.9497e-02,  3.1727e-02,
         3.4515e-02, -6.1540e-03,  1.4828e-02,  7.5921e-03,  1.5143e-02,
        -2.2682e-02,  4.2092e-02,  2.0715e-02, -4.6498e-03,  1.7980e-02,
         1.7131e-03,  5.3104e-03,  3.8825e-02,  2.9410e-03,  5.6988e-03,
        -7.7983e-03,  9.9718e-04, -1.8786e-03,  3.6164e-02, -1.6703e-02,
         3.1052e-02,  3.3438e-02, -5.8449e-03,  1.5022e-02,  1.1691e-02,
         2.6922e-02, -3.9940e-03,  1.4932e-02, -5.1318e-02,  2.8523e-02,
        -3.2194e-02,  2.4791e-03,  3.4974e-02, -5.9075e-03,  1.8830e-02,
         4.5463e-03, -3.1143e-04, -1.3520e-02, -1.2352e-02,  1.0410e-02,
        -3.9341e-02, -4.7900e-03, -1.2120e-02, -2.5248e-03,  7.9502e-04,
        -2.0623e-02,  2.5392e-02, -4.7700e-03,  1.9646e-02, -2.1632e-02,
         1.1355e-03,  1.4902e-02,  1.0375e-03, -2.0934e-02,  1.1037e-02,
         1.3382e-02,  1.6173e-02,  3.6905e-02,  1.7468e-03, -8.5320e-03,
         3.7934e-02, -3.3311e-03, -6.6125e-03,  1.8389e-03,  9.5081e-04,
        -1.1411e-02,  1.4245e-02, -1.3562e-02,  3.8607e-02, -3.9625e-04,
        -1.2149e-04,  1.2849e-02,  1.0373e-02, -6.5107e-06, -9.2567e-03,
         4.4174e-02,  1.9648e-02,  1.8800e-02, -1.2521e-03, -1.1599e-02,
         1.7871e-02, -8.2061e-03, -8.7221e-03,  1.2290e-02,  5.9804e-03])
##########################################################
prot_encoder.ffn.dense1.weight shape: torch.Size([32, 64])
tensor([[-0.0082, -0.1589,  0.0898,  ..., -0.0118, -0.0476,  0.0534],
        [-0.0218,  0.0587, -0.0383,  ..., -0.0920,  0.1979, -0.2091],
        [ 0.2366,  0.1684, -0.1410,  ...,  0.1877,  0.0178,  0.2211],
        ...,
        [ 0.1244, -0.2095,  0.0197,  ..., -0.0245,  0.0329, -0.2068],
        [-0.1904, -0.0416,  0.0049,  ...,  0.0284, -0.1082,  0.1056],
        [ 0.2181,  0.1860, -0.0933,  ..., -0.0749, -0.0801,  0.1285]])
tensor([[-0.0235, -0.1561,  0.0752,  ..., -0.0171, -0.0583,  0.0469],
        [-0.0289,  0.0520, -0.0499,  ..., -0.0973,  0.1929, -0.2166],
        [ 0.2510,  0.1242, -0.1943,  ...,  0.1514,  0.0237,  0.2024],
        ...,
        [ 0.0961, -0.1897,  0.0324,  ...,  0.0025,  0.0046, -0.2738],
        [-0.1876, -0.0100,  0.0403,  ...,  0.0584, -0.0639,  0.0922],
        [ 0.2615,  0.1983, -0.0969,  ..., -0.0623, -0.0599,  0.1488]])
##########################################################
prot_encoder.ffn.dense1.bias shape: torch.Size([32])
tensor([-0.0720, -0.0761, -0.0194,  0.1054,  0.1043, -0.0617, -0.0915, -0.0043,
        -0.1016, -0.0790, -0.0857, -0.1166, -0.1205, -0.0660, -0.0371, -0.1021,
         0.0226,  0.1134, -0.0109,  0.0079, -0.0358, -0.0397, -0.0815,  0.0767,
         0.0904, -0.0875, -0.0589,  0.0462, -0.0307, -0.1185, -0.0040, -0.0035])
tensor([-0.0764, -0.0726, -0.0395,  0.0937,  0.0802, -0.0917, -0.0863, -0.0010,
        -0.0895, -0.0896, -0.0913, -0.0966, -0.1301, -0.0707, -0.0364, -0.1349,
         0.0147,  0.1231, -0.0011, -0.0035, -0.0236, -0.0385, -0.0882,  0.0612,
         0.1096, -0.1011, -0.0713,  0.0148, -0.0503, -0.1414, -0.0062,  0.0177])
##########################################################
prot_encoder.ffn.dense2.weight shape: torch.Size([64, 32])
tensor([[ 0.1650,  0.0431,  0.0692,  ..., -0.1356, -0.1580,  0.2383],
        [ 0.1140,  0.1741,  0.0318,  ..., -0.1568, -0.0983, -0.1576],
        [-0.1518,  0.0755,  0.1450,  ...,  0.0832,  0.1794, -0.1664],
        ...,
        [-0.1168,  0.0854, -0.0921,  ..., -0.1370, -0.1388,  0.2431],
        [ 0.1762, -0.0808,  0.0426,  ..., -0.0672, -0.0725, -0.0661],
        [ 0.1928, -0.1449, -0.1342,  ...,  0.0579,  0.1629,  0.2136]])
tensor([[ 0.1734,  0.0509,  0.0695,  ..., -0.1277, -0.1702,  0.2409],
        [ 0.1209,  0.1826,  0.0378,  ..., -0.1542, -0.0644, -0.1473],
        [-0.1666,  0.0581,  0.1358,  ...,  0.0770,  0.0994, -0.1925],
        ...,
        [-0.1036,  0.0844, -0.1019,  ..., -0.1309, -0.1282,  0.2590],
        [ 0.1735, -0.0874,  0.0436,  ..., -0.0693, -0.0928, -0.0345],
        [ 0.2068, -0.1369, -0.1172,  ...,  0.0546,  0.1778,  0.2369]])
##########################################################
prot_encoder.ffn.dense2.bias shape: torch.Size([64])
tensor([-1.7128e-01,  7.4145e-02, -3.5501e-02, -1.3960e-01,  1.2546e-01,
        -1.3029e-01,  1.1498e-01,  4.9122e-02, -1.6888e-01,  8.7467e-02,
        -1.4658e-01,  1.6644e-01,  2.4369e-02, -1.4319e-01, -1.2218e-01,
         1.1668e-01,  5.1674e-02, -1.1507e-01,  1.6386e-01, -1.1915e-02,
        -8.9868e-02, -1.7023e-01, -2.9152e-02,  1.5756e-03,  1.5269e-01,
         7.2274e-02,  9.5117e-02,  1.7376e-01, -1.5762e-01,  5.6502e-02,
         9.9489e-02,  1.3894e-01, -1.5407e-01,  6.6434e-02,  1.6568e-01,
        -2.1361e-02, -1.5368e-01, -5.1499e-02,  2.2042e-02, -1.8562e-02,
        -9.6989e-02,  8.0711e-02, -1.4160e-01, -1.1035e-01, -1.5237e-02,
        -1.2563e-01, -1.5507e-01, -1.1002e-02, -1.0765e-04,  1.7369e-01,
         4.5221e-02, -1.2867e-01, -1.1128e-02, -3.3520e-02,  1.2738e-01,
        -3.8562e-02,  3.2357e-02,  1.1178e-01, -2.8583e-02, -1.0507e-01,
         1.1730e-01,  9.4292e-04, -1.2584e-01, -8.0008e-02])
tensor([-0.1688,  0.0747, -0.0559, -0.1285,  0.1185, -0.1230,  0.1265,  0.0560,
        -0.1634,  0.0730, -0.1393,  0.1568,  0.0158, -0.1233, -0.1327,  0.1170,
         0.0381, -0.1057,  0.1751, -0.0096, -0.1157, -0.1638, -0.0219,  0.0016,
         0.1552,  0.0726,  0.0906,  0.1686, -0.1653,  0.0402,  0.1040,  0.1284,
        -0.1546,  0.0703,  0.1669, -0.0187, -0.1551, -0.0436,  0.0310, -0.0153,
        -0.1018,  0.0815, -0.1588, -0.1134, -0.0361, -0.1289, -0.1373, -0.0196,
         0.0018,  0.1801,  0.0548, -0.1340, -0.0315, -0.0283,  0.1238, -0.0226,
         0.0328,  0.1155, -0.0372, -0.1021,  0.1203, -0.0024, -0.1259, -0.0619])
##########################################################
prot_encoder.addnorm.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0149, 0.9966, 0.9838, 1.0803, 1.0539, 0.9873, 1.0490, 1.0117, 1.0263,
        1.0421, 1.0356, 1.0166, 1.0002, 0.9952, 0.9732, 1.0059, 1.0118, 1.0224,
        1.0081, 0.9818, 0.9670, 0.9650, 0.9639, 1.0234, 1.0128, 1.0119, 0.9920,
        1.0288, 0.9950, 0.9913, 1.0244, 0.9717, 1.0098, 1.0324, 1.0721, 0.9773,
        1.0220, 1.0669, 1.0109, 1.0197, 1.0234, 0.9953, 1.0330, 1.0028, 0.9623,
        1.1346, 0.9798, 1.0462, 1.0044, 1.0070, 1.0128, 0.9915, 0.9835, 1.0286,
        1.0481, 1.0336, 1.0351, 0.9976, 0.9707, 0.9837, 1.0144, 1.0214, 0.9956,
        1.0048])
##########################################################
prot_encoder.addnorm.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 6.8006e-03,  2.6024e-03, -1.2376e-02,  7.9255e-05, -2.5885e-03,
         5.7264e-03,  1.6705e-03,  1.1028e-02,  1.1325e-02, -1.0484e-02,
         8.2035e-03, -9.8312e-03, -1.1141e-02,  1.4724e-02, -1.5404e-02,
         4.9106e-03, -6.8893e-03,  4.1446e-03,  1.0231e-02, -9.7882e-03,
        -2.2481e-02, -6.0710e-03, -6.5651e-03,  8.8850e-03,  5.7187e-03,
        -3.5534e-03, -6.0430e-03, -2.8151e-03,  2.5185e-03, -3.0793e-03,
         1.4746e-04, -2.0079e-02,  6.1783e-03,  1.5091e-03,  2.6454e-03,
         5.1496e-03,  5.6529e-03,  9.4378e-03,  5.6052e-03,  2.9489e-03,
        -2.6664e-03, -4.0876e-03, -5.7026e-03,  1.3299e-02, -2.1576e-02,
         2.9528e-03, -1.0073e-02,  1.9661e-03,  2.1006e-03,  6.9321e-03,
         2.2765e-03,  1.5517e-03, -2.0212e-02,  8.7979e-03, -4.1800e-03,
         5.0226e-03, -4.9569e-03,  1.2337e-02, -1.0921e-02, -8.9175e-04,
         1.1304e-02, -1.4139e-03,  6.4979e-05,  9.4130e-03])
##########################################################
prot_encoder.encoder.layers.0.self_attn.in_proj_weight shape: torch.Size([192, 64])
tensor([[-0.1389,  0.0864,  0.0177,  ..., -0.0343, -0.0347, -0.0606],
        [ 0.0853, -0.0975, -0.0916,  ...,  0.0327, -0.1052, -0.0648],
        [-0.0511,  0.1404,  0.0097,  ..., -0.0347,  0.0460,  0.1434],
        ...,
        [-0.0066,  0.1418,  0.0997,  ..., -0.1376, -0.0229, -0.0357],
        [-0.0050,  0.0051, -0.0048,  ..., -0.0775, -0.0128,  0.1432],
        [ 0.1376,  0.0801,  0.1365,  ...,  0.0095,  0.0951,  0.0239]])
tensor([[-0.1152,  0.0889,  0.0182,  ..., -0.0127, -0.0324, -0.0522],
        [ 0.0935, -0.0965, -0.0846,  ...,  0.0303, -0.1110, -0.0588],
        [-0.0360,  0.1189,  0.0160,  ..., -0.0250,  0.0542,  0.1451],
        ...,
        [-0.0117,  0.1430,  0.0980,  ..., -0.1404, -0.0297, -0.0398],
        [-0.0118, -0.0040,  0.0071,  ..., -0.0820,  0.0014,  0.1368],
        [ 0.1334,  0.0689,  0.1476,  ...,  0.0266,  0.1041,  0.0155]])
##########################################################
prot_encoder.encoder.layers.0.self_attn.in_proj_bias shape: torch.Size([192])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-5.0256e-03,  1.2732e-03,  9.9819e-03,  7.1791e-03, -1.0706e-02,
         6.4454e-04, -1.4443e-02, -2.3546e-02,  1.1050e-03,  1.2836e-03,
         5.3231e-04,  7.3981e-03,  1.3557e-03, -1.0506e-02,  6.4126e-04,
         5.1835e-03, -2.7358e-03, -1.1590e-02,  3.4584e-03, -9.7304e-03,
         3.4331e-03, -7.0868e-03,  2.3285e-02, -1.7190e-02,  5.8680e-03,
         3.5837e-03, -1.0335e-02, -5.9217e-03,  9.2091e-04, -2.9528e-03,
         5.5942e-03, -2.8090e-02, -4.4936e-03, -5.4694e-03, -1.9358e-03,
        -1.1384e-02,  1.2002e-02, -9.3657e-03,  1.6456e-03,  7.6158e-03,
        -5.0752e-03, -4.8235e-04,  1.0983e-02,  2.0772e-03, -1.4644e-03,
         4.3590e-03,  5.8227e-03,  3.3030e-02, -1.1096e-02, -1.5955e-02,
        -1.0704e-03,  1.3441e-02, -8.6066e-03,  5.7246e-03, -7.7339e-03,
        -1.8602e-02, -1.8402e-03, -1.4876e-02,  3.5797e-03, -3.9260e-03,
        -2.9961e-02, -6.6297e-03,  1.6036e-02,  2.7444e-02, -2.1485e-05,
         1.9851e-05, -9.6189e-06, -1.2441e-06, -3.1789e-05, -2.1740e-05,
         2.9218e-07, -4.0296e-05, -1.8270e-06, -2.3258e-05, -1.5074e-05,
        -5.3602e-06, -2.1959e-06,  5.4825e-06,  1.1086e-05,  2.0876e-05,
        -1.3962e-05, -2.5653e-05,  4.6444e-05,  1.6706e-06, -1.1158e-05,
        -3.3637e-06, -6.1870e-06,  7.5523e-06,  2.7382e-05,  1.7083e-05,
         2.3974e-06, -9.9645e-06,  1.9590e-05, -6.1583e-07,  1.5630e-06,
         2.9836e-06,  4.5092e-07, -4.2843e-07, -3.3815e-06, -1.1948e-05,
         5.9147e-06, -1.6747e-05,  6.9997e-06,  1.3796e-05,  1.5151e-05,
         6.0677e-06,  2.1337e-05,  1.5705e-05, -5.0047e-05, -4.5158e-06,
        -9.5981e-06, -1.3929e-05, -9.0606e-07, -7.9859e-07,  3.5405e-07,
        -4.4041e-06, -1.5874e-05,  1.0375e-05,  5.2911e-06, -6.5447e-06,
         4.9002e-06,  1.1125e-06,  1.7445e-05,  1.2024e-05,  4.4726e-07,
        -5.1581e-06,  1.1307e-05,  2.2517e-06, -4.4612e-03, -1.4884e-02,
        -4.1874e-03, -1.3599e-02,  1.3870e-02,  6.2123e-03, -2.8135e-03,
        -9.2735e-03,  5.1777e-03, -1.1519e-02,  1.5910e-03, -3.9274e-03,
         1.0839e-03,  1.1960e-03, -3.0422e-03,  2.2570e-03, -3.5621e-03,
        -6.1768e-03,  1.5262e-02,  1.0548e-02,  7.3840e-04,  6.1086e-03,
         6.1937e-03,  6.1818e-03,  5.4641e-03,  1.7759e-02,  5.0197e-03,
        -7.1978e-03,  3.6540e-04, -2.0784e-03, -5.6421e-03, -2.9346e-03,
        -4.2399e-03, -9.1161e-03,  9.7771e-03,  1.3387e-02,  6.3814e-03,
        -8.5579e-03,  2.9475e-03,  2.2434e-03,  6.4822e-03, -1.3683e-02,
         4.6013e-03,  4.2040e-03,  4.0683e-04,  9.4664e-03,  2.6625e-03,
        -2.8760e-04, -5.1984e-04, -4.5321e-03,  1.1303e-03, -1.4063e-03,
         1.1012e-02,  1.2985e-02, -5.9003e-03, -6.3168e-03,  7.3831e-03,
         1.1598e-03, -6.9006e-03,  4.0757e-03, -2.2124e-03,  4.3176e-04,
         1.1393e-02,  1.0707e-02])
##########################################################
prot_encoder.encoder.layers.0.self_attn.out_proj.weight shape: torch.Size([64, 64])
tensor([[-0.0919, -0.0690, -0.0837,  ...,  0.0922, -0.0186, -0.0546],
        [ 0.0607,  0.1172,  0.0153,  ...,  0.0571, -0.0497,  0.0013],
        [-0.0438,  0.0766, -0.1010,  ..., -0.0142, -0.0172,  0.0573],
        ...,
        [ 0.0030,  0.0623,  0.0659,  ..., -0.0108, -0.0355,  0.0810],
        [-0.0243, -0.0474,  0.0117,  ...,  0.0163,  0.0175, -0.0264],
        [ 0.0260,  0.0725,  0.0015,  ...,  0.0999,  0.0904, -0.1014]])
tensor([[-0.0881, -0.0614, -0.0997,  ...,  0.1103, -0.0194, -0.0630],
        [ 0.0605,  0.1140,  0.0241,  ...,  0.0579, -0.0459,  0.0005],
        [-0.0524,  0.0741, -0.0921,  ..., -0.0130, -0.0118,  0.0690],
        ...,
        [ 0.0042,  0.0624,  0.0875,  ..., -0.0129, -0.0392,  0.0764],
        [-0.0264, -0.0485,  0.0070,  ...,  0.0134,  0.0182, -0.0291],
        [ 0.0286,  0.0695, -0.0099,  ...,  0.0880,  0.0852, -0.1018]])
##########################################################
prot_encoder.encoder.layers.0.self_attn.out_proj.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 6.7423e-03,  1.0788e-03, -1.0940e-02, -2.7390e-03, -5.3106e-04,
         4.8825e-03,  6.9154e-05,  9.2952e-03,  1.0442e-02,  1.6072e-03,
         3.0650e-03, -1.1649e-02, -7.7941e-03,  9.7816e-03, -9.6141e-03,
         3.7074e-03, -5.3250e-03,  5.2338e-03,  2.3975e-03, -5.5822e-03,
        -1.3225e-02, -4.8542e-03, -5.2431e-03,  8.4704e-03,  1.2102e-03,
        -3.0138e-03, -3.4185e-04,  3.7919e-04,  4.1462e-04, -5.3815e-03,
        -2.5986e-03, -1.0606e-02,  2.6689e-03, -2.7385e-03,  1.6802e-03,
         4.4410e-03, -1.6154e-03,  9.7516e-03,  3.9799e-03,  6.8311e-03,
         2.4165e-03, -3.4421e-03, -8.3638e-03,  6.1397e-03, -1.5205e-02,
         7.0656e-03, -6.1067e-03, -1.5563e-04,  1.4802e-03,  4.9335e-03,
         3.5631e-03, -4.4371e-03, -1.4551e-02,  3.9602e-03, -2.0850e-03,
         2.2661e-03, -1.6601e-03,  1.0195e-02, -7.6750e-03, -4.3284e-03,
         7.1573e-03,  1.2613e-03, -1.6732e-04,  5.2127e-03])
##########################################################
prot_encoder.encoder.layers.0.linear1.weight shape: torch.Size([32, 64])
tensor([[-0.0678, -0.2337,  0.2171,  ..., -0.2188, -0.0136,  0.2359],
        [ 0.2058, -0.0004,  0.0116,  ..., -0.0927,  0.1997, -0.2277],
        [-0.0247, -0.0600, -0.0055,  ...,  0.2405, -0.0982,  0.2276],
        ...,
        [-0.1015,  0.1806,  0.1072,  ...,  0.1474, -0.1965, -0.0909],
        [ 0.2491,  0.1632,  0.1784,  ...,  0.2300, -0.1583, -0.0943],
        [ 0.0628, -0.1603, -0.1022,  ..., -0.0533, -0.1528,  0.2037]])
tensor([[-0.0704, -0.2421,  0.2017,  ..., -0.2247, -0.0099,  0.2379],
        [ 0.1811, -0.0199,  0.0422,  ..., -0.1174,  0.1466, -0.2491],
        [-0.0174, -0.0631, -0.0144,  ...,  0.2199, -0.0816,  0.2320],
        ...,
        [-0.0992,  0.1654,  0.1007,  ...,  0.1424, -0.1800, -0.0901],
        [ 0.2542,  0.1691,  0.1604,  ...,  0.2388, -0.1533, -0.0920],
        [ 0.0503, -0.2025, -0.1365,  ..., -0.1118, -0.1162,  0.2143]])
##########################################################
prot_encoder.encoder.layers.0.linear1.bias shape: torch.Size([32])
tensor([ 0.1188,  0.0340, -0.0768,  0.0837,  0.1016,  0.0921,  0.1195, -0.0963,
         0.0369, -0.1228, -0.0421, -0.1209, -0.1041,  0.0079, -0.1006,  0.0360,
         0.0548, -0.1111, -0.1246,  0.1117,  0.1204,  0.0602, -0.0010,  0.0803,
         0.1133,  0.0833, -0.0356, -0.0206,  0.0494,  0.0563, -0.0238, -0.1003])
tensor([ 0.1122,  0.0569, -0.0750,  0.0842,  0.0977,  0.0317,  0.1138, -0.1003,
         0.0354, -0.1233, -0.0599, -0.1316, -0.1075, -0.0536, -0.1068,  0.0394,
         0.0469, -0.1103, -0.1388,  0.1307,  0.1100,  0.0449,  0.0036,  0.0992,
         0.1111,  0.0892, -0.0095, -0.0330,  0.0387,  0.0477, -0.0293, -0.1103])
##########################################################
prot_encoder.encoder.layers.0.linear2.weight shape: torch.Size([64, 32])
tensor([[ 0.1131,  0.0105, -0.1796,  ...,  0.0139,  0.1910, -0.0891],
        [ 0.0489, -0.0874,  0.0807,  ..., -0.2097,  0.2121,  0.1391],
        [ 0.1806, -0.1776, -0.2453,  ...,  0.1186,  0.0975, -0.0711],
        ...,
        [-0.0617, -0.2260, -0.1390,  ..., -0.2182, -0.1682, -0.2296],
        [-0.2017, -0.0048,  0.0651,  ...,  0.0837,  0.1802,  0.1873],
        [-0.1737, -0.0012, -0.2394,  ...,  0.2209,  0.0455, -0.0173]])
tensor([[ 0.1506, -0.0385, -0.1678,  ..., -0.0176,  0.1853, -0.0824],
        [ 0.0338, -0.0872,  0.0916,  ..., -0.2093,  0.2110,  0.1374],
        [ 0.1273, -0.2209, -0.2528,  ...,  0.1046,  0.0806, -0.0887],
        ...,
        [-0.0615, -0.1350, -0.1441,  ..., -0.2193, -0.1594, -0.2675],
        [-0.1959, -0.0071,  0.0571,  ...,  0.0716,  0.1660,  0.1835],
        [-0.1827,  0.0324, -0.2349,  ...,  0.2334,  0.0618, -0.0351]])
##########################################################
prot_encoder.encoder.layers.0.linear2.bias shape: torch.Size([64])
tensor([-0.0917, -0.0673,  0.1518, -0.1720,  0.1531, -0.1141, -0.0946, -0.1630,
        -0.1564, -0.1414, -0.1468, -0.0911,  0.1517, -0.1334, -0.1229, -0.0349,
        -0.0884, -0.0705, -0.0524,  0.1001,  0.1085,  0.0980,  0.0773, -0.1498,
         0.0269,  0.0769, -0.1553,  0.1541, -0.0463,  0.1560, -0.0225, -0.0873,
        -0.0834,  0.1002, -0.1303,  0.1270,  0.0584, -0.1420,  0.0716, -0.0333,
         0.1244,  0.0261,  0.0679, -0.1691,  0.0713,  0.1654,  0.1096,  0.1680,
        -0.0182,  0.1345, -0.1446,  0.1100,  0.1421, -0.1611, -0.0088,  0.1346,
         0.0036, -0.1599,  0.1090,  0.1392,  0.0080, -0.0335, -0.0846, -0.0673])
tensor([-0.0900, -0.0648,  0.1379, -0.1726,  0.1534, -0.1117, -0.0913, -0.1504,
        -0.1450, -0.1487, -0.1404, -0.1007,  0.1466, -0.1260, -0.1324, -0.0269,
        -0.0915, -0.0633, -0.0452,  0.0943,  0.0969,  0.0847,  0.0696, -0.1410,
         0.0260,  0.0708, -0.1539,  0.1568, -0.0494,  0.1543, -0.0273, -0.0857,
        -0.0786,  0.0948, -0.1306,  0.1331,  0.0596, -0.1327,  0.0779, -0.0316,
         0.1242,  0.0250,  0.0601, -0.1614,  0.0578,  0.1741,  0.1067,  0.1682,
        -0.0239,  0.1371, -0.1432,  0.1029,  0.1179, -0.1561, -0.0132,  0.1366,
         0.0008, -0.1506,  0.1027,  0.1392,  0.0141, -0.0270, -0.0902, -0.0583])
##########################################################
prot_encoder.encoder.layers.0.norm1.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([0.9972, 0.9926, 0.9758, 1.1137, 1.0301, 0.9907, 1.0252, 1.0130, 1.0226,
        1.0338, 1.0395, 1.0107, 1.0023, 1.0036, 0.9765, 1.0029, 1.0149, 1.0126,
        1.0191, 0.9794, 0.9720, 0.9608, 0.9604, 1.0010, 1.0199, 1.0112, 0.9823,
        1.0195, 0.9909, 0.9848, 1.0336, 0.9746, 1.0069, 1.0338, 1.0859, 0.9801,
        1.0473, 1.0669, 1.0084, 1.0078, 1.0202, 0.9923, 1.0225, 1.0117, 0.9609,
        1.0731, 0.9801, 1.0568, 1.0012, 1.0100, 1.0137, 0.9997, 0.9885, 1.0352,
        1.0148, 1.0259, 1.0504, 1.0050, 0.9752, 0.9840, 1.0096, 1.0070, 0.9887,
        1.0053])
##########################################################
prot_encoder.encoder.layers.0.norm1.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 4.4024e-03, -1.6590e-04, -1.1636e-02, -2.2389e-03, -1.6838e-03,
         1.9772e-03,  1.3677e-03,  9.7482e-03,  1.1209e-02,  2.3735e-03,
         4.0739e-03, -1.1514e-02, -7.9622e-03,  9.7932e-03, -9.2734e-03,
         5.2014e-03, -5.7772e-03,  5.2183e-03,  2.1124e-03, -5.9686e-03,
        -1.3231e-02, -5.9864e-03, -5.3110e-03,  7.3838e-03,  6.7686e-04,
        -4.2679e-03, -7.5666e-04, -2.9461e-04, -7.8738e-04, -6.8146e-03,
        -2.6567e-03, -1.1235e-02,  1.7009e-03, -3.7182e-03,  1.1862e-03,
         4.2180e-03,  2.6287e-04,  1.1452e-02,  2.0838e-03,  6.8753e-03,
         1.3526e-03, -3.9051e-03, -9.8826e-03,  6.6276e-03, -1.5010e-02,
         6.3214e-03, -4.2990e-03, -1.2221e-03,  4.7572e-05,  3.5313e-03,
         2.9279e-03, -4.2200e-03, -1.2983e-02,  3.1493e-03, -2.3227e-03,
         1.4670e-03, -2.3655e-03,  1.0188e-02, -6.8439e-03, -4.6864e-03,
         6.1359e-03,  1.0760e-03, -1.6980e-03,  5.3267e-03])
##########################################################
prot_encoder.encoder.layers.0.norm2.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0438, 0.9997, 0.9807, 1.0516, 1.0575, 0.9853, 1.0187, 1.0089, 1.0032,
        1.0232, 1.0096, 1.0023, 1.0281, 1.0028, 0.9805, 0.9999, 1.0104, 0.9883,
        1.0085, 0.9824, 0.9730, 0.9670, 0.9820, 1.0079, 1.0046, 1.0004, 0.9917,
        1.0048, 0.9853, 0.9971, 1.0505, 0.9788, 1.0069, 0.9935, 1.0729, 0.9648,
        1.0043, 1.0043, 1.0027, 0.9855, 1.0048, 0.9996, 1.0095, 1.0089, 0.9617,
        1.0103, 0.9930, 1.0433, 1.0060, 1.0082, 1.0221, 1.0011, 0.9822, 1.0575,
        1.0239, 1.0439, 1.0357, 1.0181, 0.9894, 0.9852, 1.0214, 1.0045, 0.9806,
        1.0089])
##########################################################
prot_encoder.encoder.layers.0.norm2.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 0.0015,  0.0021, -0.0130, -0.0021,  0.0005,  0.0024,  0.0031,  0.0119,
         0.0095, -0.0051,  0.0052, -0.0063, -0.0055,  0.0054, -0.0114,  0.0065,
        -0.0030,  0.0067,  0.0071, -0.0069, -0.0131, -0.0097, -0.0048,  0.0093,
        -0.0019, -0.0038,  0.0004,  0.0012, -0.0036, -0.0023, -0.0042,  0.0003,
         0.0048, -0.0040,  0.0008,  0.0051,  0.0020,  0.0069,  0.0045,  0.0015,
        -0.0011, -0.0003, -0.0067,  0.0063, -0.0129,  0.0066, -0.0027, -0.0002,
        -0.0055,  0.0005,  0.0021, -0.0070, -0.0231,  0.0053, -0.0048,  0.0028,
        -0.0032,  0.0090, -0.0064, -0.0004,  0.0063,  0.0071, -0.0060,  0.0081])
##########################################################
prot_encoder.encoder.layers.1.self_attn.in_proj_weight shape: torch.Size([192, 64])
tensor([[-0.1389,  0.0864,  0.0177,  ..., -0.0343, -0.0347, -0.0606],
        [ 0.0853, -0.0975, -0.0916,  ...,  0.0327, -0.1052, -0.0648],
        [-0.0511,  0.1404,  0.0097,  ..., -0.0347,  0.0460,  0.1434],
        ...,
        [-0.0066,  0.1418,  0.0997,  ..., -0.1376, -0.0229, -0.0357],
        [-0.0050,  0.0051, -0.0048,  ..., -0.0775, -0.0128,  0.1432],
        [ 0.1376,  0.0801,  0.1365,  ...,  0.0095,  0.0951,  0.0239]])
tensor([[-0.1261,  0.0772,  0.0240,  ..., -0.0226, -0.0220, -0.0545],
        [ 0.1226, -0.1109, -0.0621,  ...,  0.0630, -0.1033, -0.0875],
        [-0.0479,  0.1101,  0.0136,  ..., -0.0575,  0.0705,  0.1602],
        ...,
        [-0.0258,  0.1437,  0.0953,  ..., -0.1268, -0.0267, -0.0269],
        [-0.0204,  0.0040, -0.0064,  ..., -0.0863, -0.0029,  0.1557],
        [ 0.1514,  0.0663,  0.1428,  ...,  0.0034,  0.1031,  0.0267]])
##########################################################
prot_encoder.encoder.layers.1.self_attn.in_proj_bias shape: torch.Size([192])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 1.7553e-03,  2.1912e-02,  1.1996e-02,  1.1474e-03,  2.9142e-03,
        -2.2194e-03, -1.8171e-02,  3.9042e-03, -8.5606e-04, -2.8792e-03,
        -1.0553e-02, -4.6621e-03,  5.8053e-03, -8.2576e-03, -7.4939e-03,
        -3.2353e-03, -9.2156e-03,  8.1334e-03, -8.2389e-03, -4.0647e-03,
         1.5860e-03, -1.3432e-02,  2.7308e-02, -2.7208e-02, -1.9188e-03,
         7.4744e-04, -4.0728e-02,  1.3156e-02,  9.7015e-03, -1.2397e-02,
         1.8427e-02, -5.2316e-03,  3.6386e-03, -4.9590e-03,  6.2558e-03,
        -1.1524e-02, -7.9756e-03, -9.7241e-03, -5.7366e-03,  1.6611e-02,
        -1.0077e-02,  2.0023e-02,  1.9980e-02,  9.2401e-03, -8.2722e-04,
         4.6299e-03,  1.2512e-02,  1.1117e-02, -2.4377e-03, -1.7210e-02,
        -1.1793e-02, -7.7549e-03, -7.8065e-03,  7.2520e-04,  6.6997e-03,
        -2.1133e-02, -6.1516e-03, -1.1328e-02,  8.5936e-03, -1.9685e-03,
        -4.2574e-03,  1.1909e-03, -6.0274e-03,  5.9337e-03, -1.5081e-05,
        -1.0363e-06, -2.0352e-05,  8.3015e-06,  3.0003e-06,  9.2678e-06,
         3.3123e-06, -2.9848e-06, -1.7816e-05, -9.9980e-06,  3.9422e-06,
         4.2133e-07,  3.0881e-06,  8.0118e-06, -1.8050e-06, -2.1270e-06,
        -2.2777e-05, -2.1125e-05,  3.9322e-06,  1.9705e-05, -1.2229e-05,
        -8.9991e-07,  1.0241e-05,  2.9907e-05, -1.2175e-05,  1.8357e-06,
         4.8612e-07, -2.6824e-07,  8.0065e-06,  1.2862e-05, -8.8484e-06,
        -1.8315e-05,  5.9741e-06, -2.3128e-06,  9.6556e-07,  2.9807e-06,
         9.5564e-07,  1.1802e-06,  1.3826e-07,  7.3667e-06,  5.3709e-08,
        -6.7418e-06, -2.1452e-06,  1.2586e-05, -1.3481e-05,  5.8376e-06,
         1.1314e-05,  2.6355e-07,  2.2207e-06, -1.2548e-05,  6.7076e-07,
        -1.9137e-05, -1.4861e-05,  1.4355e-05,  7.2237e-06, -9.2090e-06,
         2.8566e-06,  7.0066e-06,  6.5644e-06,  1.2713e-05, -5.5751e-06,
         2.8324e-08,  6.1098e-06,  2.7530e-09, -2.2891e-03, -1.0754e-02,
         3.7468e-04, -3.6079e-03,  8.1262e-03,  8.7497e-03,  2.8178e-03,
        -4.4880e-03,  2.6322e-03, -9.3356e-03,  8.9805e-04, -6.0065e-03,
         5.3992e-03, -3.5025e-04,  8.1172e-04, -1.3386e-03,  4.1022e-04,
        -1.7377e-04,  8.4733e-03,  7.9759e-03,  2.5985e-03,  4.0732e-04,
         9.4903e-03,  8.2529e-03,  1.4701e-03,  1.2876e-02,  2.2480e-03,
        -4.1326e-03, -6.4996e-03, -2.3669e-03, -1.0441e-03, -6.9082e-04,
        -5.0369e-03, -4.4049e-03,  5.5431e-03,  7.7164e-03,  4.9543e-03,
        -3.4160e-03,  6.6683e-03,  1.6339e-03,  4.4266e-03, -7.4152e-03,
         1.1700e-03,  4.6116e-03,  2.1054e-03, -1.2177e-02, -6.6707e-04,
         3.1675e-03, -6.7764e-03, -5.9704e-04, -6.7100e-03, -1.3225e-03,
         7.8072e-03,  3.6209e-03, -6.4418e-03, -7.8214e-03,  1.2090e-03,
         3.1352e-03, -1.7614e-03,  6.1176e-03, -3.1250e-03, -4.6450e-03,
        -1.2460e-03,  8.3862e-03])
##########################################################
prot_encoder.encoder.layers.1.self_attn.out_proj.weight shape: torch.Size([64, 64])
tensor([[-0.0919, -0.0690, -0.0837,  ...,  0.0922, -0.0186, -0.0546],
        [ 0.0607,  0.1172,  0.0153,  ...,  0.0571, -0.0497,  0.0013],
        [-0.0438,  0.0766, -0.1010,  ..., -0.0142, -0.0172,  0.0573],
        ...,
        [ 0.0030,  0.0623,  0.0659,  ..., -0.0108, -0.0355,  0.0810],
        [-0.0243, -0.0474,  0.0117,  ...,  0.0163,  0.0175, -0.0264],
        [ 0.0260,  0.0725,  0.0015,  ...,  0.0999,  0.0904, -0.1014]])
tensor([[-0.0906, -0.0630, -0.0779,  ...,  0.1136, -0.0457, -0.0344],
        [ 0.0631,  0.1136,  0.0113,  ...,  0.0454, -0.0539, -0.0084],
        [-0.0517,  0.0751, -0.1190,  ..., -0.0401,  0.0055,  0.0757],
        ...,
        [ 0.0143,  0.0782,  0.0858,  ...,  0.0128, -0.0488,  0.0497],
        [-0.0272, -0.0528,  0.0097,  ...,  0.0090,  0.0144, -0.0217],
        [ 0.0297,  0.0669,  0.0012,  ...,  0.0980,  0.0653, -0.0937]])
##########################################################
prot_encoder.encoder.layers.1.self_attn.out_proj.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 1.5573e-03, -1.4324e-03, -1.1832e-02, -1.6551e-03, -1.1273e-03,
        -1.3059e-04,  3.5673e-03,  1.0334e-02,  4.0674e-03,  5.3320e-03,
         3.5582e-03, -5.7043e-03, -2.6263e-03,  4.1102e-03, -6.4574e-03,
         4.4688e-03, -9.0381e-04,  5.0244e-03,  2.5420e-03, -4.9070e-03,
        -1.0656e-02, -7.5608e-03, -6.0745e-04,  1.0054e-02, -3.4939e-03,
        -2.5937e-05,  2.3443e-04, -3.3899e-04, -3.7994e-03, -7.4076e-03,
        -6.1047e-03,  4.2249e-03,  2.3620e-03, -6.3262e-03,  3.1581e-03,
         4.0847e-03,  1.0170e-03,  1.2249e-02,  1.4569e-03,  5.4438e-03,
         7.7123e-04,  1.5913e-03, -7.3317e-03,  1.6830e-04, -9.0066e-03,
         6.9753e-03, -3.0442e-03, -1.8709e-03, -4.7663e-03, -3.6703e-03,
         4.0562e-03, -6.1951e-03, -1.2961e-02,  1.5124e-03, -2.3123e-03,
         5.5879e-03, -3.7471e-03,  7.6975e-03, -2.5620e-03, -2.1930e-03,
         2.1125e-03,  9.6675e-03, -5.3098e-03,  5.2108e-03])
##########################################################
prot_encoder.encoder.layers.1.linear1.weight shape: torch.Size([32, 64])
tensor([[-0.0291, -0.0993, -0.0075,  ..., -0.2280,  0.1421,  0.0570],
        [-0.2254, -0.0441,  0.1274,  ..., -0.1232,  0.1677, -0.0821],
        [ 0.1022,  0.1327,  0.0039,  ..., -0.1963, -0.2222, -0.1489],
        ...,
        [ 0.1492, -0.0180,  0.2363,  ...,  0.1982, -0.0034,  0.2135],
        [-0.0640, -0.1610, -0.0842,  ...,  0.2179,  0.1270, -0.1972],
        [ 0.0739,  0.1357, -0.1649,  ...,  0.0272, -0.1650, -0.0181]])
tensor([[ 0.0092, -0.0878, -0.0026,  ..., -0.2205,  0.1614,  0.0568],
        [-0.2226, -0.0179,  0.1254,  ..., -0.1115,  0.1654, -0.0965],
        [ 0.1047,  0.1669,  0.0225,  ..., -0.1666, -0.2267, -0.1545],
        ...,
        [ 0.1416, -0.0215,  0.2410,  ...,  0.2180,  0.0214,  0.2289],
        [-0.0714, -0.1830, -0.1192,  ...,  0.1989,  0.1360, -0.1761],
        [ 0.1168,  0.1254, -0.1862,  ...,  0.0423, -0.1392,  0.0039]])
##########################################################
prot_encoder.encoder.layers.1.linear1.bias shape: torch.Size([32])
tensor([ 0.1188,  0.0340, -0.0768,  0.0837,  0.1016,  0.0921,  0.1195, -0.0963,
         0.0369, -0.1228, -0.0421, -0.1209, -0.1041,  0.0079, -0.1006,  0.0360,
         0.0548, -0.1111, -0.1246,  0.1117,  0.1204,  0.0602, -0.0010,  0.0803,
         0.1133,  0.0833, -0.0356, -0.0206,  0.0494,  0.0563, -0.0238, -0.1003])
tensor([ 0.1038,  0.0294, -0.1025,  0.0772,  0.0947,  0.1036,  0.1066, -0.0903,
         0.0270, -0.1249, -0.0555, -0.1323, -0.0819,  0.0078, -0.1029,  0.0201,
         0.0591, -0.1075, -0.1124,  0.0800,  0.1190,  0.0579, -0.0058,  0.0892,
         0.1102,  0.0843, -0.0544, -0.0433,  0.0426,  0.0529, -0.0285, -0.1131])
##########################################################
prot_encoder.encoder.layers.1.linear2.weight shape: torch.Size([64, 32])
tensor([[ 2.3042e-01, -4.3780e-02, -2.1996e-01,  ..., -7.2955e-02,
         -1.3096e-01,  1.9445e-01],
        [ 1.3182e-01,  1.2537e-01,  7.4616e-02,  ...,  1.4275e-01,
         -2.0955e-01,  2.3973e-01],
        [-2.1132e-01, -1.2640e-01, -1.7529e-01,  ..., -1.2335e-01,
          1.7389e-01, -2.3743e-01],
        ...,
        [-4.6439e-02,  1.8173e-01, -2.3976e-01,  ...,  9.8373e-02,
         -9.3544e-02, -1.6879e-01],
        [ 1.5246e-01,  2.2316e-01,  5.9942e-02,  ...,  1.6274e-01,
         -5.5760e-05, -5.9709e-02],
        [-2.2634e-01,  8.8011e-02,  5.0172e-03,  ...,  1.3247e-01,
         -1.9026e-01,  1.2350e-01]])
tensor([[ 0.2532, -0.0449, -0.1871,  ..., -0.0718, -0.0945,  0.1598],
        [ 0.1533,  0.1210,  0.1035,  ...,  0.1400, -0.1939,  0.2344],
        [-0.1746, -0.1349, -0.1776,  ..., -0.1419,  0.2125, -0.1658],
        ...,
        [-0.0450,  0.1860, -0.2573,  ...,  0.1153, -0.1247, -0.2560],
        [ 0.1418,  0.2195,  0.0536,  ...,  0.1570, -0.0246, -0.1068],
        [-0.2141,  0.0948, -0.0279,  ...,  0.1414, -0.2130,  0.1311]])
##########################################################
prot_encoder.encoder.layers.1.linear2.bias shape: torch.Size([64])
tensor([-0.0917, -0.0673,  0.1518, -0.1720,  0.1531, -0.1141, -0.0946, -0.1630,
        -0.1564, -0.1414, -0.1468, -0.0911,  0.1517, -0.1334, -0.1229, -0.0349,
        -0.0884, -0.0705, -0.0524,  0.1001,  0.1085,  0.0980,  0.0773, -0.1498,
         0.0269,  0.0769, -0.1553,  0.1541, -0.0463,  0.1560, -0.0225, -0.0873,
        -0.0834,  0.1002, -0.1303,  0.1270,  0.0584, -0.1420,  0.0716, -0.0333,
         0.1244,  0.0261,  0.0679, -0.1691,  0.0713,  0.1654,  0.1096,  0.1680,
        -0.0182,  0.1345, -0.1446,  0.1100,  0.1421, -0.1611, -0.0088,  0.1346,
         0.0036, -0.1599,  0.1090,  0.1392,  0.0080, -0.0335, -0.0846, -0.0673])
tensor([-0.0955, -0.0715,  0.1497, -0.1711,  0.1545, -0.1145, -0.0913, -0.1475,
        -0.1447, -0.1436, -0.1443, -0.0994,  0.1515, -0.1242, -0.1173, -0.0318,
        -0.0883, -0.0700, -0.0522,  0.0970,  0.0997,  0.0902,  0.0762, -0.1402,
         0.0252,  0.0818, -0.1576,  0.1513, -0.0488,  0.1447, -0.0342, -0.0812,
        -0.0856,  0.0943, -0.1262,  0.1264,  0.0591, -0.1249,  0.0764, -0.0308,
         0.1210,  0.0306,  0.0596, -0.1673,  0.0659,  0.1664,  0.1041,  0.1714,
        -0.0299,  0.1305, -0.1428,  0.1100,  0.1287, -0.1569, -0.0106,  0.1385,
         0.0038, -0.1519,  0.1119,  0.1372,  0.0053, -0.0295, -0.0875, -0.0612])
##########################################################
prot_encoder.encoder.layers.1.norm1.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0105, 1.0053, 0.9737, 1.0531, 1.0187, 0.9909, 1.0137, 1.0053, 1.0050,
        1.0209, 1.0083, 1.0009, 1.0254, 0.9993, 0.9803, 0.9889, 1.0155, 0.9912,
        1.0127, 0.9815, 0.9761, 0.9567, 0.9882, 1.0012, 1.0030, 0.9992, 0.9912,
        1.0010, 0.9862, 0.9994, 1.0439, 0.9773, 1.0079, 0.9842, 1.0519, 0.9588,
        0.9987, 0.9964, 1.0080, 0.9947, 1.0024, 1.0007, 1.0004, 1.0050, 0.9566,
        1.0085, 0.9979, 1.0352, 1.0032, 1.0130, 1.0188, 1.0022, 0.9894, 1.0766,
        1.0151, 1.0198, 1.0220, 1.0181, 0.9879, 0.9864, 1.0155, 0.9998, 0.9775,
        1.0056])
##########################################################
prot_encoder.encoder.layers.1.norm1.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-0.0002, -0.0017, -0.0124, -0.0011, -0.0017, -0.0015,  0.0055,  0.0114,
         0.0031,  0.0058,  0.0045, -0.0048, -0.0019,  0.0036, -0.0068,  0.0048,
        -0.0013,  0.0047,  0.0040, -0.0054, -0.0113, -0.0081, -0.0004,  0.0096,
        -0.0034, -0.0004, -0.0002, -0.0016, -0.0057, -0.0077, -0.0057,  0.0033,
         0.0017, -0.0064,  0.0027,  0.0048,  0.0018,  0.0120,  0.0003,  0.0054,
         0.0004,  0.0025, -0.0083,  0.0001, -0.0089,  0.0061, -0.0034, -0.0036,
        -0.0063, -0.0060,  0.0041, -0.0061, -0.0115,  0.0013, -0.0019,  0.0056,
        -0.0039,  0.0083, -0.0020, -0.0022,  0.0010,  0.0095, -0.0063,  0.0060])
##########################################################
prot_encoder.encoder.layers.1.norm2.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0321, 0.9772, 0.9881, 1.0077, 0.9972, 1.0010, 1.0082, 1.0048, 0.9876,
        1.0175, 0.9992, 0.9958, 1.0089, 0.9889, 0.9873, 0.9891, 1.0183, 1.0016,
        0.9949, 0.9760, 0.9875, 0.9545, 0.9968, 1.0341, 1.0016, 1.0027, 0.9836,
        0.9900, 0.9697, 1.0046, 1.0326, 0.9913, 1.0101, 0.9853, 1.0381, 0.9891,
        0.9941, 0.9867, 1.0066, 1.0036, 1.0010, 0.9993, 1.0109, 1.0165, 0.9757,
        1.0070, 0.9984, 1.0338, 1.0096, 1.0117, 1.0107, 1.0058, 0.9922, 1.0981,
        1.0066, 1.0284, 1.0045, 1.0076, 0.9948, 0.9910, 1.0033, 1.0020, 0.9872,
        1.0064])
##########################################################
prot_encoder.encoder.layers.1.norm2.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-1.4629e-03, -2.7263e-03, -2.5635e-03, -1.0559e-03,  1.1142e-03,
        -3.0155e-04,  2.2489e-03,  1.4006e-02,  1.1174e-02, -2.1309e-03,
         2.6344e-03, -8.5054e-03, -1.2126e-04,  1.0159e-02,  1.7259e-03,
         1.7886e-03,  3.6593e-04,  2.0387e-03,  2.2033e-03, -3.6130e-03,
        -1.1051e-02, -6.5458e-03,  6.8399e-05,  7.0779e-03, -1.7095e-03,
         5.9615e-03, -9.8272e-04, -1.2563e-03, -1.8327e-03, -1.2516e-02,
        -1.1626e-02,  5.6088e-03, -1.5406e-03, -6.5401e-03,  3.3862e-03,
        -1.0799e-03,  9.1234e-04,  1.4579e-02,  2.6206e-03,  1.5503e-03,
        -2.7002e-03,  2.5817e-03, -1.0039e-02,  2.4891e-03, -5.7440e-03,
        -1.6165e-03, -4.3624e-03,  3.4276e-03, -1.1355e-02, -2.8796e-03,
         1.0818e-03,  1.6666e-03, -1.0353e-02,  4.7388e-03, -8.0348e-04,
         4.2979e-03, -1.6223e-03,  9.5030e-03,  2.7616e-03, -1.9696e-03,
         3.5493e-04,  3.2034e-03, -2.4775e-03,  4.5556e-03])
##########################################################
prot_encoder.encoder.layers.2.self_attn.in_proj_weight shape: torch.Size([192, 64])
tensor([[-0.1389,  0.0864,  0.0177,  ..., -0.0343, -0.0347, -0.0606],
        [ 0.0853, -0.0975, -0.0916,  ...,  0.0327, -0.1052, -0.0648],
        [-0.0511,  0.1404,  0.0097,  ..., -0.0347,  0.0460,  0.1434],
        ...,
        [-0.0066,  0.1418,  0.0997,  ..., -0.1376, -0.0229, -0.0357],
        [-0.0050,  0.0051, -0.0048,  ..., -0.0775, -0.0128,  0.1432],
        [ 0.1376,  0.0801,  0.1365,  ...,  0.0095,  0.0951,  0.0239]])
tensor([[-0.1397,  0.0880,  0.0196,  ..., -0.0270, -0.0212, -0.0534],
        [ 0.0733, -0.1194, -0.0767,  ...,  0.0469, -0.1188, -0.0563],
        [-0.0567,  0.1347,  0.0073,  ..., -0.0408,  0.0381,  0.1468],
        ...,
        [-0.0167,  0.1475,  0.0974,  ..., -0.1348, -0.0402, -0.0323],
        [ 0.0162,  0.0083, -0.0018,  ..., -0.0830, -0.0116,  0.1378],
        [ 0.1688,  0.0599,  0.1379,  ...,  0.0019,  0.0998,  0.0197]])
##########################################################
prot_encoder.encoder.layers.2.self_attn.in_proj_bias shape: torch.Size([192])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-3.3131e-03,  5.4679e-03,  5.5483e-04, -8.8266e-03, -1.3533e-02,
        -1.0150e-02, -2.1202e-02, -4.0369e-03, -1.3397e-02, -4.8812e-03,
        -8.8042e-03, -4.5764e-03,  1.0858e-02, -1.5658e-05, -1.0910e-02,
        -2.0443e-04, -2.6946e-03,  7.2151e-03, -7.7016e-03, -4.6738e-03,
        -3.0789e-03, -1.4616e-02,  2.0942e-02, -2.9654e-02,  5.3630e-04,
        -1.1692e-02,  3.9789e-03,  8.5985e-03,  9.8612e-03, -1.1442e-02,
         2.3121e-02, -1.3315e-02,  9.4120e-03,  1.9532e-03, -7.1756e-03,
         5.7706e-03,  4.1952e-04, -7.9596e-03,  4.0706e-04,  1.0665e-02,
        -3.2154e-04,  4.1412e-03,  1.8877e-02,  1.3237e-03, -8.7391e-04,
         3.5352e-04,  4.0719e-03,  5.3642e-03,  4.9051e-03, -2.5439e-03,
        -5.2985e-03,  6.4317e-03, -6.5212e-03, -1.0624e-02,  3.6250e-04,
        -3.3415e-03, -8.5099e-04, -1.8236e-03,  3.5515e-03, -5.6060e-03,
        -2.0590e-03,  3.1433e-03, -2.7795e-03, -1.3532e-03,  7.3456e-06,
         1.7822e-06,  2.0730e-06, -2.5084e-05, -7.9166e-06, -1.1547e-05,
        -1.0047e-05,  2.3913e-05,  1.3993e-05, -5.8319e-06, -7.9769e-06,
        -2.4216e-06,  2.3352e-06, -3.9628e-06, -1.0912e-06,  4.1773e-06,
         7.3731e-06, -8.0401e-06, -2.8607e-06, -7.4494e-06,  8.0484e-06,
         7.8113e-06,  2.6230e-06,  2.6445e-05,  1.5419e-06, -3.7896e-06,
        -7.9296e-06, -2.1408e-07, -5.5740e-06,  1.8076e-05,  3.0091e-06,
         9.6658e-06, -5.7190e-06,  1.5791e-06, -1.6349e-05,  3.9653e-06,
         5.4238e-06,  1.7504e-06, -2.4121e-06, -7.5055e-06, -1.5159e-05,
         9.9569e-06, -4.3338e-07,  2.8227e-05, -1.9414e-06, -1.1445e-05,
        -6.0161e-06, -3.2112e-08, -1.8514e-06,  3.7234e-06, -1.2420e-06,
         4.1207e-06, -4.4060e-07, -7.4265e-06, -3.4114e-06, -1.4447e-06,
        -9.5855e-06,  1.7401e-06,  9.2685e-06,  3.3123e-06, -7.1646e-06,
         3.6878e-06, -9.5502e-06,  1.2877e-05, -4.6262e-03,  5.0589e-03,
         1.6405e-03,  1.9246e-03,  3.0460e-03, -1.8916e-03,  5.9739e-03,
        -6.2408e-04,  2.8176e-03, -1.1800e-02, -1.9498e-03,  1.1721e-03,
         7.5019e-03,  1.8274e-03, -5.6300e-04, -1.4170e-03,  1.0297e-02,
         9.9859e-06,  2.9910e-03,  1.3709e-03,  1.8075e-03, -7.3889e-03,
         3.8088e-03,  7.1953e-03, -1.2458e-03,  4.6417e-03,  7.3498e-03,
         2.9865e-03, -4.2666e-03, -5.7400e-03,  2.9121e-04, -2.7571e-03,
        -5.1677e-03, -1.6207e-03, -5.3033e-03, -2.2118e-03,  4.0093e-03,
         8.8571e-03,  8.4421e-04, -1.8549e-03,  5.1297e-03,  1.8371e-03,
         8.4579e-04, -9.9757e-04,  1.9688e-03, -9.1470e-03,  3.9000e-03,
        -2.7854e-05,  2.6297e-03,  7.2115e-03, -1.3163e-02, -3.9647e-03,
         6.0896e-03, -2.1017e-03, -7.3748e-03, -8.3497e-03,  5.1958e-03,
        -7.7326e-03,  2.4070e-03, -3.4455e-03,  2.2799e-03,  1.2104e-04,
         2.6618e-03,  3.4483e-03])
##########################################################
prot_encoder.encoder.layers.2.self_attn.out_proj.weight shape: torch.Size([64, 64])
tensor([[-0.0919, -0.0690, -0.0837,  ...,  0.0922, -0.0186, -0.0546],
        [ 0.0607,  0.1172,  0.0153,  ...,  0.0571, -0.0497,  0.0013],
        [-0.0438,  0.0766, -0.1010,  ..., -0.0142, -0.0172,  0.0573],
        ...,
        [ 0.0030,  0.0623,  0.0659,  ..., -0.0108, -0.0355,  0.0810],
        [-0.0243, -0.0474,  0.0117,  ...,  0.0163,  0.0175, -0.0264],
        [ 0.0260,  0.0725,  0.0015,  ...,  0.0999,  0.0904, -0.1014]])
tensor([[-0.0947, -0.0684, -0.0796,  ...,  0.0956, -0.0197, -0.0377],
        [ 0.0566,  0.1242,  0.0027,  ...,  0.0375, -0.0430,  0.0098],
        [-0.0442,  0.0851, -0.0945,  ..., -0.0274, -0.0101,  0.0737],
        ...,
        [ 0.0045,  0.0713,  0.0654,  ..., -0.0023, -0.0375,  0.0645],
        [-0.0253, -0.0442,  0.0074,  ...,  0.0088,  0.0222, -0.0094],
        [ 0.0284,  0.0710,  0.0155,  ...,  0.1077,  0.0745, -0.1162]])
##########################################################
prot_encoder.encoder.layers.2.self_attn.out_proj.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-2.4944e-03, -6.6081e-03, -1.4242e-05, -8.8527e-04,  1.9634e-03,
        -2.4470e-03,  7.9636e-03,  1.3007e-02,  4.9202e-03, -1.0522e-03,
         5.6649e-03,  1.8189e-03,  7.5583e-04,  7.7807e-03,  3.0670e-03,
        -2.6260e-04,  1.7637e-03,  2.8915e-03,  1.3398e-03, -4.0073e-03,
        -6.5386e-03, -5.0365e-03,  2.9728e-03,  5.5922e-03, -3.8725e-03,
         6.7580e-03,  1.4518e-03,  3.6451e-04, -3.4268e-03, -1.6136e-02,
        -8.5014e-03,  4.4917e-03, -2.3845e-03, -5.7876e-03,  2.2204e-03,
        -6.4981e-04, -5.3720e-04,  1.0067e-02,  2.4550e-03, -6.3297e-04,
        -3.7071e-03,  2.8502e-03, -1.0826e-02,  1.9468e-03, -6.4265e-03,
        -5.1234e-03, -3.0152e-03, -6.9839e-04, -1.8000e-02, -4.5791e-03,
         1.2808e-03,  5.2640e-03, -4.2598e-03,  4.9510e-03,  1.9547e-03,
         5.0440e-03, -5.4944e-03,  1.3083e-02,  3.2366e-03, -1.7532e-03,
        -1.5431e-03, -5.0881e-05, -2.6750e-03,  2.4598e-03])
##########################################################
prot_encoder.encoder.layers.2.linear1.weight shape: torch.Size([32, 64])
tensor([[-0.1004, -0.2193, -0.1602,  ...,  0.0205, -0.1130,  0.0143],
        [ 0.0242,  0.1250,  0.1207,  ...,  0.0157,  0.1756, -0.2392],
        [ 0.0674, -0.1989,  0.0366,  ..., -0.0122, -0.0161,  0.0125],
        ...,
        [ 0.1491, -0.2222, -0.1375,  ..., -0.2403, -0.0509,  0.1612],
        [ 0.1434, -0.2093,  0.1723,  ..., -0.2073, -0.0123,  0.1026],
        [ 0.1470,  0.0748, -0.2314,  ..., -0.1421,  0.1112, -0.0400]])
tensor([[-0.1029, -0.1850, -0.1544,  ...,  0.0266, -0.0953,  0.0152],
        [ 0.0562,  0.1042,  0.0964,  ...,  0.0162,  0.2027, -0.2047],
        [ 0.0788, -0.1876,  0.0258,  ...,  0.0027,  0.0017,  0.0303],
        ...,
        [ 0.1182, -0.2922, -0.1330,  ..., -0.1835, -0.0457,  0.1819],
        [ 0.1543, -0.1769,  0.1785,  ..., -0.1995,  0.0010,  0.1084],
        [ 0.1261,  0.0843, -0.2737,  ..., -0.1228,  0.0997, -0.0319]])
##########################################################
prot_encoder.encoder.layers.2.linear1.bias shape: torch.Size([32])
tensor([ 0.1188,  0.0340, -0.0768,  0.0837,  0.1016,  0.0921,  0.1195, -0.0963,
         0.0369, -0.1228, -0.0421, -0.1209, -0.1041,  0.0079, -0.1006,  0.0360,
         0.0548, -0.1111, -0.1246,  0.1117,  0.1204,  0.0602, -0.0010,  0.0803,
         0.1133,  0.0833, -0.0356, -0.0206,  0.0494,  0.0563, -0.0238, -0.1003])
tensor([ 0.1239,  0.0077, -0.0875,  0.0662,  0.1290,  0.0987,  0.1175, -0.1091,
         0.0372, -0.1276, -0.0425, -0.1207, -0.1197,  0.0057, -0.1068,  0.0211,
         0.0578, -0.1046, -0.1295,  0.1037,  0.1167,  0.0344, -0.0348,  0.0818,
         0.1199,  0.0816, -0.0398, -0.0183,  0.0526,  0.0590, -0.0377, -0.1108])
##########################################################
prot_encoder.encoder.layers.2.linear2.weight shape: torch.Size([64, 32])
tensor([[-0.1926, -0.0813,  0.0577,  ..., -0.0575, -0.2358,  0.1643],
        [ 0.0938, -0.1875, -0.1975,  ..., -0.0705, -0.2198, -0.0328],
        [-0.1294, -0.1350, -0.0437,  ...,  0.0385,  0.1048,  0.1136],
        ...,
        [-0.1721,  0.0061,  0.1800,  ...,  0.1827,  0.0786,  0.1055],
        [-0.1891,  0.0282,  0.2309,  ..., -0.1079,  0.1880, -0.0194],
        [-0.1690, -0.1920, -0.2316,  ...,  0.1416,  0.0443, -0.0230]])
tensor([[-0.1877, -0.0454,  0.0153,  ..., -0.0390, -0.1930,  0.1710],
        [ 0.0849, -0.1565, -0.2318,  ..., -0.0454, -0.1587, -0.0401],
        [-0.1261, -0.1134, -0.0465,  ...,  0.0645,  0.1800,  0.1486],
        ...,
        [-0.1655, -0.0160,  0.1576,  ...,  0.1733,  0.0996,  0.1485],
        [-0.1905, -0.0065,  0.2044,  ..., -0.1584,  0.2010,  0.0150],
        [-0.1713, -0.1960, -0.1666,  ...,  0.1099,  0.0649, -0.0099]])
##########################################################
prot_encoder.encoder.layers.2.linear2.bias shape: torch.Size([64])
tensor([-0.0917, -0.0673,  0.1518, -0.1720,  0.1531, -0.1141, -0.0946, -0.1630,
        -0.1564, -0.1414, -0.1468, -0.0911,  0.1517, -0.1334, -0.1229, -0.0349,
        -0.0884, -0.0705, -0.0524,  0.1001,  0.1085,  0.0980,  0.0773, -0.1498,
         0.0269,  0.0769, -0.1553,  0.1541, -0.0463,  0.1560, -0.0225, -0.0873,
        -0.0834,  0.1002, -0.1303,  0.1270,  0.0584, -0.1420,  0.0716, -0.0333,
         0.1244,  0.0261,  0.0679, -0.1691,  0.0713,  0.1654,  0.1096,  0.1680,
        -0.0182,  0.1345, -0.1446,  0.1100,  0.1421, -0.1611, -0.0088,  0.1346,
         0.0036, -0.1599,  0.1090,  0.1392,  0.0080, -0.0335, -0.0846, -0.0673])
tensor([-0.0926, -0.0732,  0.1520, -0.1750,  0.1556, -0.1205, -0.0851, -0.1537,
        -0.1520, -0.1443, -0.1334, -0.0913,  0.1514, -0.1268, -0.1223, -0.0373,
        -0.0869, -0.0683, -0.0500,  0.1007,  0.1098,  0.0903,  0.0826, -0.1417,
         0.0247,  0.0821, -0.1531,  0.1517, -0.0560,  0.1398, -0.0273, -0.0868,
        -0.0897,  0.0975, -0.1299,  0.1254,  0.0529, -0.1369,  0.0768, -0.0388,
         0.1248,  0.0312,  0.0621, -0.1641,  0.0684,  0.1582,  0.1069,  0.1609,
        -0.0323,  0.1271, -0.1457,  0.1183,  0.1410, -0.1594, -0.0083,  0.1382,
        -0.0005, -0.1492,  0.1159,  0.1362,  0.0136, -0.0333, -0.0912, -0.0685])
##########################################################
prot_encoder.encoder.layers.2.norm1.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0099, 0.9871, 0.9888, 1.0075, 0.9932, 1.0037, 1.0125, 1.0065, 0.9949,
        1.0180, 1.0016, 0.9980, 1.0010, 0.9720, 0.9887, 0.9881, 1.0237, 0.9986,
        0.9836, 0.9548, 0.9971, 0.9829, 1.0009, 1.0038, 0.9978, 0.9935, 0.9770,
        0.9899, 0.9795, 0.9973, 1.0276, 0.9941, 1.0096, 0.9784, 1.0115, 0.9981,
        0.9871, 0.9874, 1.0085, 1.0016, 0.9992, 0.9993, 1.0097, 1.0100, 0.9738,
        1.0088, 0.9954, 1.0219, 1.0149, 1.0137, 1.0009, 1.0085, 0.9960, 1.0638,
        1.0061, 1.0170, 1.0078, 1.0152, 0.9890, 0.9948, 0.9998, 0.9979, 0.9863,
        1.0059])
##########################################################
prot_encoder.encoder.layers.2.norm1.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-4.7585e-03, -6.7821e-03, -1.0261e-03, -1.9126e-03,  2.0102e-03,
        -3.0382e-03,  9.5858e-03,  1.2624e-02,  3.9794e-03, -4.1404e-04,
         6.1421e-03,  3.6521e-04,  5.9501e-04,  6.6942e-03,  2.8092e-03,
        -2.9233e-05,  1.5553e-03,  2.6641e-03,  1.7724e-03, -5.2291e-03,
        -7.7943e-03, -6.8532e-03,  3.9292e-03,  5.8168e-03, -3.5173e-03,
         6.4772e-03,  1.1189e-03, -3.3257e-04, -4.4040e-03, -1.6039e-02,
        -9.5846e-03,  3.1225e-03, -4.1312e-03, -6.6144e-03,  1.3135e-03,
        -8.1083e-04, -1.6077e-03,  9.0699e-03,  1.6905e-03, -7.5716e-04,
        -4.0752e-03,  3.9933e-03, -1.2558e-02,  2.5140e-03, -6.9034e-03,
        -6.4294e-03, -4.3139e-03, -1.9276e-03, -1.8986e-02, -7.3377e-03,
         7.5988e-04,  6.2864e-03, -5.1812e-03,  3.5558e-03,  2.5145e-03,
         5.1552e-03, -7.0457e-03,  1.4588e-02,  4.0059e-03, -2.6023e-03,
        -1.5905e-03,  2.5129e-05, -3.6939e-03,  2.6166e-03])
##########################################################
prot_encoder.encoder.layers.2.norm2.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0011, 0.9737, 0.9862, 0.9946, 0.9910, 1.0040, 1.0026, 0.9901, 0.9892,
        0.9965, 0.9956, 0.9928, 1.0051, 0.9836, 0.9763, 0.9942, 1.0075, 0.9902,
        0.9911, 0.9530, 0.9801, 0.9841, 0.9952, 0.9725, 0.9962, 0.9921, 0.9723,
        0.9877, 0.9789, 0.9937, 1.0234, 0.9863, 1.0011, 0.9940, 1.0070, 0.9904,
        0.9749, 0.9947, 1.0013, 0.9803, 0.9822, 0.9986, 0.9938, 0.9920, 0.9925,
        1.0180, 0.9968, 1.0316, 0.9994, 0.9962, 0.9920, 0.9929, 0.9902, 1.0450,
        0.9947, 1.0047, 0.9955, 0.9952, 0.9960, 0.9879, 0.9867, 1.0009, 0.9771,
        1.0006])
##########################################################
prot_encoder.encoder.layers.2.norm2.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 1.9471e-03, -6.5645e-03, -7.7542e-03,  3.3608e-03,  6.9985e-03,
        -6.3391e-03, -4.0718e-03,  7.2682e-03,  5.6762e-03, -7.7617e-03,
         8.6333e-03, -4.1865e-03,  2.3137e-03,  5.5861e-03, -6.6350e-03,
        -2.5098e-03, -3.1268e-05, -3.9242e-03,  8.9969e-04, -1.9801e-03,
         4.9900e-03, -5.3925e-03, -3.3626e-03,  7.0982e-03, -1.8562e-03,
        -2.5502e-04,  2.1628e-03,  1.5915e-03, -5.5077e-03, -1.3693e-02,
        -5.0772e-03,  8.3170e-04, -7.3869e-04, -2.3708e-03,  2.0736e-03,
        -9.1776e-03, -8.4970e-03,  6.4777e-03,  8.0811e-03, -1.0568e-02,
         3.6541e-03, -1.2152e-03,  4.7977e-03,  4.2292e-03,  1.3816e-04,
        -4.0335e-04, -2.1660e-03, -5.5863e-03, -2.8409e-03, -3.6852e-04,
        -2.9160e-03, -6.8521e-03, -6.3508e-03,  1.6044e-03, -3.4629e-03,
        -1.5578e-04,  2.3576e-03,  4.7677e-03,  3.6133e-03,  5.0599e-04,
         6.4632e-03,  9.3984e-04, -9.5651e-03,  3.1523e-03])
##########################################################
cross_encoder.encoder.layers.0.self_attn.in_proj_weight shape: torch.Size([192, 64])
tensor([[ 9.5480e-02, -5.3976e-02, -4.4230e-02,  ...,  4.1604e-02,
         -6.7139e-02,  1.1841e-01],
        [ 8.9119e-02,  1.0533e-01,  9.5049e-02,  ..., -8.5616e-02,
         -8.9867e-03, -8.2777e-02],
        [-1.0176e-01, -1.2663e-01, -1.2876e-01,  ..., -1.6781e-03,
         -3.7060e-02,  1.1631e-01],
        ...,
        [-9.0969e-02, -1.4966e-01,  1.5163e-01,  ...,  4.3455e-04,
         -1.2484e-01, -1.0261e-04],
        [-7.9562e-02, -6.6711e-02,  7.4263e-04,  ...,  1.0160e-01,
         -1.4774e-01,  2.3741e-02],
        [-5.7534e-02, -2.9012e-03,  7.3844e-02,  ..., -7.0345e-02,
         -5.6719e-02,  2.9196e-02]])
tensor([[ 0.0786, -0.0883, -0.0222,  ...,  0.0689, -0.0021,  0.1445],
        [ 0.0862,  0.1158,  0.0916,  ..., -0.0974, -0.0352, -0.0731],
        [-0.0837, -0.1384, -0.1485,  ..., -0.0466, -0.0485,  0.1156],
        ...,
        [-0.0871, -0.1489,  0.1506,  ..., -0.0040, -0.1104, -0.0156],
        [-0.0996, -0.0658, -0.0043,  ...,  0.0843, -0.1507,  0.0405],
        [-0.0710, -0.0158,  0.0834,  ..., -0.1312, -0.0694,  0.0302]])
##########################################################
cross_encoder.encoder.layers.0.self_attn.in_proj_bias shape: torch.Size([192])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 2.0300e-02, -1.1644e-02,  2.8503e-03, -4.5960e-03,  5.2142e-03,
         5.1687e-03, -3.1682e-02,  5.7233e-03, -3.5604e-03,  1.8398e-03,
        -1.4480e-02, -1.6620e-02,  4.0185e-03, -9.9864e-03,  1.7813e-02,
         2.1695e-04,  1.9600e-02,  1.0319e-02, -1.3517e-02,  8.7674e-03,
         1.2813e-02,  9.0036e-04,  1.2667e-02, -1.4232e-02, -1.2733e-02,
        -9.3019e-03,  5.8967e-03,  9.2255e-03, -1.0646e-02,  7.4661e-03,
         8.2773e-03,  8.0321e-03, -3.8347e-04,  1.3647e-02,  2.2400e-02,
         2.0909e-02,  2.9347e-02,  8.9848e-03,  4.5991e-03,  3.9308e-02,
         1.1523e-02,  2.5689e-02, -2.0041e-02, -2.2187e-02, -2.7433e-02,
         2.2401e-02,  1.0168e-03,  1.4354e-02, -3.7464e-03, -2.6507e-02,
         2.8158e-02,  9.9198e-03,  2.6964e-02, -4.2072e-02, -1.3446e-02,
         6.1523e-02, -4.2726e-03, -1.3646e-02,  3.0642e-02, -2.9549e-02,
        -2.9461e-02, -2.9265e-02, -3.3016e-02, -4.2069e-03,  4.3197e-05,
         2.7866e-05,  5.0542e-05, -3.1874e-06,  1.3058e-05, -3.9123e-05,
         1.9959e-05,  2.1543e-05, -3.6199e-05, -5.5718e-05, -9.6966e-05,
         9.5871e-05,  1.3921e-05, -1.5157e-07, -4.4942e-05,  7.0919e-06,
         1.8178e-05, -2.1371e-05, -1.2513e-05, -1.1862e-04, -3.2058e-06,
         3.3299e-06, -3.2370e-05, -4.4508e-05,  7.5708e-05,  6.5271e-05,
         2.0480e-06,  3.1873e-05,  1.3444e-04,  3.2771e-05, -7.9384e-05,
        -2.6886e-05,  6.5583e-06,  2.6559e-05, -9.4157e-05, -9.2121e-05,
        -2.1390e-05, -3.6048e-05,  2.3633e-05,  9.3890e-06,  5.7509e-05,
         4.2610e-05,  5.4936e-05,  5.9101e-05,  2.5541e-05, -7.0695e-05,
        -4.1266e-06, -3.7351e-05,  1.4243e-05, -5.3496e-06, -1.1584e-05,
         1.1629e-05, -1.0294e-06,  2.2521e-05,  7.0371e-06, -4.1152e-05,
         2.0964e-05,  1.3557e-05, -1.1732e-04, -3.9549e-05,  3.1084e-05,
         2.7138e-06,  3.6056e-05, -1.4045e-05, -1.5107e-03, -2.7607e-04,
        -9.6595e-03, -5.3785e-03, -2.5120e-03, -3.4018e-04, -1.9314e-03,
        -1.1452e-02, -7.3709e-04, -3.4446e-03, -5.9926e-03, -2.6155e-03,
        -2.1354e-03,  2.9838e-04,  9.5890e-04,  1.7029e-03,  5.5710e-03,
        -8.5346e-04, -1.7429e-03,  8.1930e-03, -3.5553e-05, -3.7755e-03,
         5.3351e-04, -2.1824e-03,  4.5131e-03, -1.2989e-03, -8.1487e-03,
        -1.0147e-02, -3.9748e-03,  4.2284e-03,  4.8347e-03, -7.8252e-03,
         3.0381e-03, -1.2631e-02, -4.2542e-03,  9.2240e-05, -2.1560e-03,
        -8.7172e-05, -4.9691e-03, -2.7261e-03, -5.5253e-03,  6.9956e-03,
        -1.3696e-03, -3.0334e-04,  1.0600e-03,  2.3678e-03,  2.9258e-04,
         7.1391e-05,  1.1145e-02, -5.1227e-03,  9.8606e-03,  1.0718e-02,
        -1.4119e-03, -4.3446e-03, -4.4169e-03, -1.2657e-03,  1.6055e-03,
         1.8936e-03,  5.5389e-03,  4.2478e-04, -4.7269e-03, -1.2044e-03,
        -9.8198e-04,  1.4075e-02])
##########################################################
cross_encoder.encoder.layers.0.self_attn.out_proj.weight shape: torch.Size([64, 64])
tensor([[-0.0136,  0.0440, -0.0669,  ...,  0.0623,  0.0337, -0.0594],
        [ 0.0483, -0.0645, -0.0241,  ..., -0.0390,  0.0064,  0.0038],
        [ 0.0827, -0.1105,  0.0702,  ..., -0.0449, -0.0282, -0.0116],
        ...,
        [ 0.1207, -0.0228, -0.0196,  ...,  0.0753, -0.0396,  0.0814],
        [ 0.0839,  0.0745,  0.1061,  ...,  0.0389, -0.0010, -0.1144],
        [-0.0288, -0.0658,  0.0845,  ...,  0.0897,  0.1207, -0.0189]])
tensor([[-0.0115,  0.0269, -0.0698,  ...,  0.0633,  0.0358, -0.0609],
        [ 0.0483, -0.0578, -0.0397,  ..., -0.0401,  0.0028,  0.0123],
        [ 0.0960, -0.1126,  0.0713,  ..., -0.0500, -0.0335, -0.0058],
        ...,
        [ 0.1187, -0.0248, -0.0269,  ...,  0.0781, -0.0425,  0.0804],
        [ 0.0945,  0.0679,  0.1135,  ...,  0.0338,  0.0031, -0.1075],
        [-0.0206, -0.0850,  0.0841,  ...,  0.0798,  0.1247, -0.0182]])
##########################################################
cross_encoder.encoder.layers.0.self_attn.out_proj.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-3.8079e-04, -8.5724e-03, -9.8805e-03,  2.4516e-03,  3.2947e-03,
        -7.8228e-03,  2.5462e-03,  5.2065e-03,  1.3086e-03,  3.6106e-03,
         9.7958e-03, -6.4380e-03,  3.8078e-03,  1.4022e-03, -7.0628e-03,
         3.6145e-03,  3.5364e-03, -6.2182e-04, -7.1340e-04,  5.8047e-04,
         4.9197e-03, -4.6925e-03, -2.0154e-03,  2.6310e-03, -2.9489e-03,
         2.7099e-03,  3.8063e-03, -7.8270e-04, -3.4116e-03, -1.4459e-02,
        -6.8890e-03,  5.0605e-03,  1.1832e-03, -1.9385e-03,  5.5079e-03,
        -7.8370e-04, -3.1311e-03, -1.9298e-03,  3.9020e-03, -8.8970e-03,
         4.6269e-03,  3.3934e-03,  2.8593e-03,  3.5245e-03,  3.9281e-03,
         6.2717e-04, -2.3522e-03,  4.3560e-03, -5.0733e-03,  3.3590e-03,
        -2.9373e-03, -4.1419e-03, -8.7220e-04, -1.3432e-03, -1.2075e-04,
        -1.4020e-03,  9.6036e-05,  2.7784e-03, -5.7085e-03,  5.5145e-03,
         4.1909e-03,  1.3055e-03, -7.7436e-03, -4.1137e-03])
##########################################################
cross_encoder.encoder.layers.0.linear1.weight shape: torch.Size([32, 64])
tensor([[ 0.0312, -0.0543,  0.0774,  ...,  0.1538, -0.1405,  0.1285],
        [-0.0346, -0.1553, -0.2274,  ...,  0.0019,  0.0929,  0.0808],
        [-0.2418, -0.1910, -0.0324,  ..., -0.2476,  0.2384, -0.2451],
        ...,
        [ 0.1277,  0.1309, -0.1297,  ...,  0.0492,  0.2451,  0.2396],
        [ 0.1917,  0.1197,  0.2010,  ...,  0.2238,  0.0679,  0.2169],
        [ 0.0853, -0.1356, -0.1154,  ...,  0.2128, -0.2479, -0.0919]])
tensor([[ 0.0274, -0.0632,  0.0626,  ...,  0.1167, -0.1685,  0.1392],
        [-0.0288, -0.1530, -0.2253,  ...,  0.0133,  0.1031,  0.0707],
        [-0.2468, -0.1857, -0.0273,  ..., -0.2157,  0.2507, -0.2096],
        ...,
        [ 0.1363,  0.1420, -0.1254,  ...,  0.0499,  0.2586,  0.2239],
        [ 0.2123,  0.1428,  0.1833,  ...,  0.2200,  0.0547,  0.1879],
        [ 0.0818, -0.1291, -0.1258,  ...,  0.2109, -0.2580, -0.1089]])
##########################################################
cross_encoder.encoder.layers.0.linear1.bias shape: torch.Size([32])
tensor([ 0.1036,  0.0769, -0.1048,  0.0900,  0.0911, -0.0530, -0.0834,  0.0725,
         0.0109,  0.0349,  0.0341,  0.0811, -0.1108,  0.0776, -0.1215, -0.0175,
        -0.0606, -0.0375, -0.0124, -0.0543, -0.0829,  0.1174, -0.0470, -0.0915,
        -0.0648, -0.0569,  0.1149, -0.0131, -0.0112,  0.0136, -0.0736, -0.0552])
tensor([ 0.1042,  0.0749, -0.1085,  0.0759,  0.0852, -0.0836, -0.1139,  0.0738,
         0.0129,  0.0291,  0.0410,  0.0734, -0.1160,  0.0723, -0.1254, -0.0219,
        -0.0632, -0.0373, -0.0113, -0.0478, -0.0846,  0.1186, -0.0693, -0.0872,
        -0.0546, -0.0719,  0.1239, -0.0157, -0.0123,  0.0058, -0.0889, -0.0587])
##########################################################
cross_encoder.encoder.layers.0.linear2.weight shape: torch.Size([64, 32])
tensor([[ 0.1688, -0.1542, -0.1836,  ..., -0.1569, -0.1052, -0.1351],
        [ 0.1183, -0.1983, -0.0376,  ...,  0.0764,  0.1467,  0.0952],
        [ 0.0315, -0.0978, -0.0437,  ...,  0.0689, -0.1499, -0.0627],
        ...,
        [ 0.0148, -0.0771, -0.2494,  ...,  0.2335,  0.2461,  0.0376],
        [-0.0803, -0.1413, -0.0741,  ..., -0.1616,  0.2414,  0.2070],
        [-0.1234, -0.1504, -0.1641,  ..., -0.0912, -0.1543, -0.0964]])
tensor([[ 0.1634, -0.1460, -0.1814,  ..., -0.1573, -0.1176, -0.1255],
        [ 0.0988, -0.2031, -0.0644,  ...,  0.0546,  0.0448,  0.0954],
        [-0.0230, -0.0992, -0.0354,  ...,  0.0649, -0.1636, -0.0670],
        ...,
        [ 0.0402, -0.0721, -0.2503,  ...,  0.2292,  0.2068,  0.0467],
        [-0.1005, -0.1529, -0.0859,  ..., -0.1756,  0.2522,  0.2046],
        [-0.0906, -0.1561, -0.1884,  ..., -0.1078, -0.1221, -0.1183]])
##########################################################
cross_encoder.encoder.layers.0.linear2.bias shape: torch.Size([64])
tensor([ 0.0415,  0.1007, -0.0502,  0.0428, -0.0063,  0.0823,  0.0751, -0.0905,
         0.0573,  0.1262, -0.1460, -0.1314,  0.0484, -0.0539, -0.0791, -0.1170,
        -0.1549, -0.1228,  0.0167, -0.1681, -0.1179, -0.0561,  0.1268,  0.0229,
         0.1692,  0.0667, -0.1008,  0.0821,  0.1373,  0.1047, -0.0153, -0.1048,
        -0.0590,  0.1463, -0.1064, -0.0830,  0.0252,  0.0086, -0.0226,  0.0290,
        -0.0292, -0.0920, -0.0040, -0.1454,  0.0341,  0.0092,  0.0552, -0.1274,
        -0.0646, -0.0860, -0.1609, -0.1009,  0.0606, -0.0366,  0.0860, -0.0581,
         0.0370, -0.0633, -0.0787, -0.1207,  0.0144, -0.1087, -0.0672,  0.1562])
tensor([ 0.0415,  0.0929, -0.0527,  0.0454, -0.0022,  0.0754,  0.0759, -0.0866,
         0.0559,  0.1358, -0.1394, -0.1413,  0.0571, -0.0531, -0.0819, -0.1125,
        -0.1476, -0.1214,  0.0198, -0.1673, -0.1104, -0.0642,  0.1235,  0.0236,
         0.1614,  0.0722, -0.0949,  0.0804,  0.1374,  0.0861, -0.0161, -0.1025,
        -0.0615,  0.1474, -0.1059, -0.0814,  0.0211,  0.0038, -0.0193,  0.0161,
        -0.0303, -0.0857, -0.0034, -0.1412,  0.0419,  0.0151,  0.0487, -0.1188,
        -0.0764, -0.0763, -0.1574, -0.0971,  0.0634, -0.0415,  0.0834, -0.0611,
         0.0336, -0.0607, -0.0769, -0.1186,  0.0189, -0.1027, -0.0775,  0.1498])
##########################################################
cross_encoder.encoder.layers.0.norm1.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0062, 1.0051, 1.0013, 1.0318, 0.9843, 1.0128, 1.0064, 1.0109, 0.9990,
        0.9996, 0.9928, 1.0146, 1.0002, 0.9962, 0.9821, 1.0163, 1.0019, 0.9946,
        0.9891, 0.9920, 1.0017, 1.0018, 0.9985, 0.9840, 1.0044, 1.0039, 0.9914,
        1.0072, 1.0068, 0.9857, 0.9962, 0.9933, 0.9949, 1.0024, 1.0320, 0.9996,
        1.0032, 1.0081, 1.0055, 0.9942, 0.9976, 1.0099, 1.0036, 1.0181, 0.9877,
        1.0235, 1.0013, 1.0160, 0.9850, 1.0187, 1.0180, 0.9904, 1.0105, 1.0026,
        1.0028, 1.0002, 0.9818, 0.9924, 1.0017, 1.0162, 1.0019, 0.9971, 1.0120,
        1.0044])
##########################################################
cross_encoder.encoder.layers.0.norm1.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-0.0011, -0.0106, -0.0100,  0.0025,  0.0027, -0.0097,  0.0019,  0.0052,
         0.0020,  0.0049,  0.0105, -0.0062,  0.0032,  0.0019, -0.0079,  0.0037,
         0.0030,  0.0003,  0.0002,  0.0013,  0.0062, -0.0054, -0.0014,  0.0035,
        -0.0029,  0.0019,  0.0034, -0.0015, -0.0040, -0.0142, -0.0059,  0.0053,
         0.0015, -0.0015,  0.0057, -0.0005, -0.0032, -0.0010,  0.0046, -0.0086,
         0.0035,  0.0049,  0.0035,  0.0036,  0.0035, -0.0003, -0.0020,  0.0040,
        -0.0059,  0.0036, -0.0013, -0.0032, -0.0009, -0.0024, -0.0017, -0.0015,
        -0.0003,  0.0032, -0.0046,  0.0064,  0.0052,  0.0015, -0.0083, -0.0051])
##########################################################
cross_encoder.encoder.layers.0.norm2.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([0.9991, 1.0047, 1.0127, 1.0412, 0.9868, 1.0102, 1.0183, 1.0087, 0.9690,
        0.9840, 0.9960, 1.0168, 0.9954, 1.0091, 0.9682, 1.0092, 0.9909, 1.0040,
        1.0127, 0.9968, 1.0079, 1.0055, 0.9919, 0.9880, 0.9996, 1.0043, 0.9983,
        1.0055, 1.0050, 0.9886, 1.0096, 0.9941, 1.0111, 1.0055, 1.0186, 1.0102,
        1.0011, 1.0037, 1.0157, 0.9935, 1.0006, 1.0137, 1.0063, 1.0184, 0.9911,
        0.9947, 0.9997, 1.0202, 0.9906, 1.0205, 1.0230, 0.9823, 0.9954, 1.0134,
        1.0004, 0.9986, 0.9923, 1.0033, 1.0049, 1.0136, 1.0051, 0.9906, 0.9977,
        1.0195])
##########################################################
cross_encoder.encoder.layers.0.norm2.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-0.0012, -0.0087, -0.0022,  0.0046,  0.0059, -0.0083,  0.0026,  0.0036,
        -0.0018,  0.0112,  0.0044, -0.0083,  0.0058,  0.0018, -0.0053,  0.0015,
         0.0062,  0.0023,  0.0037,  0.0013,  0.0068, -0.0063, -0.0024,  0.0022,
        -0.0071,  0.0028,  0.0055, -0.0028, -0.0005, -0.0159, -0.0030,  0.0011,
        -0.0023,  0.0025,  0.0002, -0.0011, -0.0055, -0.0058,  0.0036, -0.0102,
         0.0006,  0.0052,  0.0019,  0.0032,  0.0042,  0.0066, -0.0067,  0.0077,
        -0.0106,  0.0076, -0.0001,  0.0040, -0.0006, -0.0044, -0.0003, -0.0036,
        -0.0025,  0.0052,  0.0036,  0.0040,  0.0029,  0.0049, -0.0086, -0.0088])
##########################################################
cross_encoder.encoder.layers.1.self_attn.in_proj_weight shape: torch.Size([192, 64])
tensor([[ 9.5480e-02, -5.3976e-02, -4.4230e-02,  ...,  4.1604e-02,
         -6.7139e-02,  1.1841e-01],
        [ 8.9119e-02,  1.0533e-01,  9.5049e-02,  ..., -8.5616e-02,
         -8.9867e-03, -8.2777e-02],
        [-1.0176e-01, -1.2663e-01, -1.2876e-01,  ..., -1.6781e-03,
         -3.7060e-02,  1.1631e-01],
        ...,
        [-9.0969e-02, -1.4966e-01,  1.5163e-01,  ...,  4.3455e-04,
         -1.2484e-01, -1.0261e-04],
        [-7.9562e-02, -6.6711e-02,  7.4263e-04,  ...,  1.0160e-01,
         -1.4774e-01,  2.3741e-02],
        [-5.7534e-02, -2.9012e-03,  7.3844e-02,  ..., -7.0345e-02,
         -5.6719e-02,  2.9196e-02]])
tensor([[ 0.0943, -0.0518, -0.0191,  ...,  0.0548, -0.0723,  0.1437],
        [ 0.0956,  0.1124,  0.0826,  ..., -0.0744, -0.0273, -0.0707],
        [-0.0994, -0.1547, -0.0739,  ..., -0.0656, -0.0593,  0.1103],
        ...,
        [-0.0839, -0.1450,  0.1571,  ...,  0.0066, -0.1233, -0.0036],
        [-0.0905, -0.0693, -0.0015,  ...,  0.1150, -0.1455,  0.0252],
        [-0.0611, -0.0119,  0.0798,  ..., -0.0926, -0.0544,  0.0240]])
##########################################################
cross_encoder.encoder.layers.1.self_attn.in_proj_bias shape: torch.Size([192])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-2.4269e-03, -9.8768e-03,  1.6958e-02,  4.6494e-03, -2.1050e-02,
        -7.2592e-03, -2.3362e-02,  3.3380e-03, -8.0878e-04,  2.1476e-02,
        -1.6948e-02,  1.9670e-02, -5.9705e-04, -1.1087e-03,  1.2472e-02,
        -1.0759e-02,  6.7290e-03, -5.6371e-03, -7.0505e-03, -6.9679e-03,
         3.1936e-03,  1.8749e-02,  1.0147e-02, -3.3136e-02, -3.7519e-03,
        -2.5154e-03,  1.5416e-02,  1.2343e-02,  7.1107e-03,  7.2852e-03,
         1.4533e-02,  5.7987e-03,  2.2585e-02,  4.8426e-03, -2.9435e-02,
         2.3213e-03,  2.0468e-02,  8.1849e-03,  5.6530e-03,  3.0834e-02,
         2.3878e-02,  1.6049e-02, -8.0805e-03,  1.1261e-02, -1.4280e-02,
        -2.2860e-04, -2.1234e-02,  3.6307e-02,  1.9189e-02, -4.3618e-02,
        -8.0255e-03,  3.4551e-02, -2.7289e-03,  1.1574e-02, -1.8829e-02,
         5.3171e-03, -5.1524e-05,  1.7949e-02,  3.0727e-02, -5.6325e-03,
        -2.1082e-02, -2.9849e-02, -1.9160e-02,  2.4271e-02,  1.5868e-05,
        -7.0246e-06, -1.7721e-05, -7.2489e-06,  7.8864e-07,  2.8863e-05,
         2.7745e-05, -9.8588e-05, -2.2828e-05, -5.0988e-05,  4.2171e-06,
        -1.6537e-05,  2.0633e-05, -2.4045e-05,  1.3973e-06,  1.8529e-05,
         5.4202e-06, -1.0112e-05, -4.9303e-05, -4.7994e-05, -2.5170e-05,
        -2.8298e-05, -1.3888e-05, -3.2570e-05, -6.1744e-06,  1.7508e-05,
         1.0160e-05, -1.0054e-06, -9.6282e-06, -2.8786e-05,  9.7361e-07,
         8.2605e-06,  4.8366e-05, -2.1107e-05, -2.3296e-06,  1.4973e-06,
         1.4433e-05,  1.2885e-05,  3.6155e-06, -7.4352e-05,  6.3351e-06,
         1.0055e-05, -3.3305e-05,  3.3623e-07, -1.1888e-05, -3.4561e-05,
        -3.3786e-05, -9.6174e-06, -4.1972e-05, -1.3053e-05, -8.4173e-06,
         3.8784e-05, -3.2136e-05, -7.1154e-06,  1.9398e-05, -1.9839e-05,
         1.0246e-05,  1.6092e-05,  1.1618e-06, -2.0665e-05, -2.3305e-05,
        -5.0981e-06, -2.1528e-05, -2.9446e-05,  3.1192e-04,  3.3344e-03,
        -1.5882e-02,  2.4019e-03,  1.0718e-04,  3.9786e-03, -1.4406e-03,
        -2.6471e-03, -5.5037e-04, -3.8671e-03, -2.3099e-03,  6.1831e-04,
        -1.6845e-03,  6.5609e-03,  7.8987e-03, -4.9165e-03,  3.3481e-03,
         1.7390e-03, -5.1411e-04,  6.8572e-03, -6.0589e-04, -9.6493e-04,
        -1.0360e-03,  2.3569e-03,  4.3056e-03, -5.1305e-03, -5.5246e-03,
        -1.1154e-02,  1.5975e-03,  4.0066e-03,  1.1025e-04, -3.9270e-03,
         3.8923e-04, -8.9578e-03, -5.8058e-03, -1.3218e-03, -4.7777e-03,
        -5.9163e-03, -2.5181e-03, -3.3035e-03, -5.5265e-03,  6.7067e-03,
         3.2704e-03,  1.9346e-03,  4.5710e-03, -1.7566e-03,  1.1186e-03,
         1.2118e-03,  4.0647e-03,  3.1686e-03,  6.9180e-03,  1.0723e-02,
        -4.3191e-03,  2.9588e-03,  3.9759e-03,  5.5121e-04,  1.3783e-03,
        -2.2120e-03,  4.9317e-03,  5.8121e-04, -4.7755e-03, -1.1372e-03,
         1.4383e-03,  1.0801e-02])
##########################################################
cross_encoder.encoder.layers.1.self_attn.out_proj.weight shape: torch.Size([64, 64])
tensor([[-0.0136,  0.0440, -0.0669,  ...,  0.0623,  0.0337, -0.0594],
        [ 0.0483, -0.0645, -0.0241,  ..., -0.0390,  0.0064,  0.0038],
        [ 0.0827, -0.1105,  0.0702,  ..., -0.0449, -0.0282, -0.0116],
        ...,
        [ 0.1207, -0.0228, -0.0196,  ...,  0.0753, -0.0396,  0.0814],
        [ 0.0839,  0.0745,  0.1061,  ...,  0.0389, -0.0010, -0.1144],
        [-0.0288, -0.0658,  0.0845,  ...,  0.0897,  0.1207, -0.0189]])
tensor([[-0.0086,  0.0331, -0.0784,  ...,  0.0697,  0.0495, -0.0522],
        [ 0.0506, -0.0193, -0.0230,  ..., -0.0403,  0.0127,  0.0153],
        [ 0.0895, -0.0817,  0.0824,  ..., -0.0416, -0.0279, -0.0117],
        ...,
        [ 0.1185, -0.0024, -0.0035,  ...,  0.0818, -0.0418,  0.0785],
        [ 0.0907,  0.0382,  0.0819,  ...,  0.0486,  0.0215, -0.1040],
        [-0.0227, -0.1269,  0.0565,  ...,  0.0882,  0.1249, -0.0089]])
##########################################################
cross_encoder.encoder.layers.1.self_attn.out_proj.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-0.0036, -0.0120, -0.0029,  0.0066, -0.0003, -0.0085,  0.0036,  0.0029,
        -0.0030,  0.0085,  0.0063, -0.0073,  0.0056,  0.0027, -0.0075,  0.0036,
         0.0045,  0.0013,  0.0004, -0.0006,  0.0071, -0.0074,  0.0013,  0.0056,
        -0.0080,  0.0084,  0.0016, -0.0076, -0.0007, -0.0122, -0.0065,  0.0008,
         0.0027,  0.0013,  0.0011, -0.0002, -0.0009, -0.0069,  0.0036, -0.0071,
         0.0017,  0.0070,  0.0023,  0.0051,  0.0020,  0.0017, -0.0073,  0.0088,
        -0.0083,  0.0065,  0.0021,  0.0038, -0.0025, -0.0059, -0.0016,  0.0014,
        -0.0031,  0.0033,  0.0028,  0.0040,  0.0051,  0.0053, -0.0106, -0.0089])
##########################################################
cross_encoder.encoder.layers.1.linear1.weight shape: torch.Size([32, 64])
tensor([[ 0.1984, -0.1046,  0.1340,  ..., -0.2303, -0.1938, -0.1033],
        [ 0.1992, -0.1440,  0.0539,  ..., -0.1136,  0.1659, -0.0980],
        [-0.2078,  0.2244,  0.0905,  ...,  0.2282, -0.0719,  0.0789],
        ...,
        [ 0.1620,  0.1840,  0.0831,  ...,  0.0808, -0.2393,  0.1165],
        [-0.2184, -0.1615, -0.1507,  ..., -0.0383,  0.1625, -0.1484],
        [-0.1397, -0.0492,  0.0498,  ..., -0.1284,  0.2137,  0.0194]])
tensor([[ 0.2131, -0.0920,  0.1196,  ..., -0.2349, -0.2112, -0.0827],
        [ 0.2020, -0.1363,  0.0407,  ..., -0.1302,  0.1539, -0.0995],
        [-0.2177,  0.2145,  0.1033,  ...,  0.2411, -0.0496,  0.0655],
        ...,
        [ 0.2111,  0.1869,  0.0388,  ...,  0.1284, -0.2607,  0.1476],
        [-0.2216, -0.1656, -0.1316,  ..., -0.0420,  0.1628, -0.1467],
        [-0.1408, -0.0480,  0.0520,  ..., -0.1296,  0.2131,  0.0216]])
##########################################################
cross_encoder.encoder.layers.1.linear1.bias shape: torch.Size([32])
tensor([ 0.1036,  0.0769, -0.1048,  0.0900,  0.0911, -0.0530, -0.0834,  0.0725,
         0.0109,  0.0349,  0.0341,  0.0811, -0.1108,  0.0776, -0.1215, -0.0175,
        -0.0606, -0.0375, -0.0124, -0.0543, -0.0829,  0.1174, -0.0470, -0.0915,
        -0.0648, -0.0569,  0.1149, -0.0131, -0.0112,  0.0136, -0.0736, -0.0552])
tensor([ 0.0901,  0.0714, -0.0979,  0.0885,  0.0878, -0.0922, -0.0845,  0.0739,
         0.0085,  0.0224, -0.0104,  0.0700, -0.1268,  0.0733, -0.1281, -0.0212,
        -0.0869, -0.0559, -0.0241, -0.0493, -0.0965,  0.0981, -0.0482, -0.0916,
        -0.0647, -0.0545,  0.0975, -0.0173, -0.0499, -0.0299, -0.0679, -0.0580])
##########################################################
cross_encoder.encoder.layers.1.linear2.weight shape: torch.Size([64, 32])
tensor([[ 0.1127,  0.0416,  0.2036,  ..., -0.0596,  0.1711, -0.0518],
        [ 0.1143, -0.1153, -0.0201,  ...,  0.2324, -0.1195,  0.1967],
        [ 0.0100, -0.0326,  0.1852,  ...,  0.1096, -0.1981, -0.2383],
        ...,
        [-0.2468, -0.0970,  0.1100,  ...,  0.1625, -0.1431, -0.0716],
        [-0.0730,  0.0285, -0.1108,  ..., -0.0633, -0.1588, -0.1245],
        [-0.1547,  0.1759,  0.0977,  ..., -0.2195,  0.0486, -0.0525]])
tensor([[ 0.1045,  0.0332,  0.1960,  ..., -0.0265,  0.1693, -0.0583],
        [ 0.1065, -0.1228,  0.0023,  ...,  0.2168, -0.1255,  0.1823],
        [ 0.0209, -0.0273,  0.2143,  ...,  0.1120, -0.1913, -0.2446],
        ...,
        [-0.2525, -0.0911,  0.1322,  ...,  0.1387, -0.1406, -0.0708],
        [-0.0867,  0.0270, -0.1330,  ..., -0.0471, -0.1608, -0.1177],
        [-0.1563,  0.1669,  0.1156,  ..., -0.2062,  0.0341, -0.0650]])
##########################################################
cross_encoder.encoder.layers.1.linear2.bias shape: torch.Size([64])
tensor([ 0.0415,  0.1007, -0.0502,  0.0428, -0.0063,  0.0823,  0.0751, -0.0905,
         0.0573,  0.1262, -0.1460, -0.1314,  0.0484, -0.0539, -0.0791, -0.1170,
        -0.1549, -0.1228,  0.0167, -0.1681, -0.1179, -0.0561,  0.1268,  0.0229,
         0.1692,  0.0667, -0.1008,  0.0821,  0.1373,  0.1047, -0.0153, -0.1048,
        -0.0590,  0.1463, -0.1064, -0.0830,  0.0252,  0.0086, -0.0226,  0.0290,
        -0.0292, -0.0920, -0.0040, -0.1454,  0.0341,  0.0092,  0.0552, -0.1274,
        -0.0646, -0.0860, -0.1609, -0.1009,  0.0606, -0.0366,  0.0860, -0.0581,
         0.0370, -0.0633, -0.0787, -0.1207,  0.0144, -0.1087, -0.0672,  0.1562])
tensor([ 0.0363,  0.0931, -0.0445,  0.0473,  0.0029,  0.0707,  0.0742, -0.0835,
         0.0596,  0.1353, -0.1397, -0.1365,  0.0620, -0.0515, -0.0936, -0.1126,
        -0.1479, -0.1196,  0.0137, -0.1697, -0.1049, -0.0609,  0.1292,  0.0358,
         0.1586,  0.0721, -0.1015,  0.0614,  0.1332,  0.0935, -0.0219, -0.1127,
        -0.0531,  0.1559, -0.1101, -0.0874,  0.0180,  0.0081, -0.0234,  0.0242,
        -0.0205, -0.0804, -0.0024, -0.1378,  0.0340,  0.0188,  0.0495, -0.1126,
        -0.0723, -0.0823, -0.1561, -0.0998,  0.0581, -0.0409,  0.0766, -0.0585,
         0.0298, -0.0577, -0.0805, -0.1209,  0.0195, -0.1066, -0.0745,  0.1465])
##########################################################
cross_encoder.encoder.layers.1.norm1.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([0.9998, 1.0075, 1.0043, 1.0328, 0.9862, 1.0106, 1.0104, 1.0043, 1.0000,
        0.9986, 0.9923, 1.0151, 0.9967, 0.9947, 0.9671, 0.9936, 0.9910, 1.0064,
        1.0137, 0.9893, 0.9950, 1.0064, 0.9963, 0.9816, 0.9964, 1.0125, 1.0025,
        1.0084, 1.0030, 0.9910, 1.0048, 1.0004, 1.0037, 0.9993, 1.0191, 1.0080,
        1.0066, 1.0016, 1.0061, 0.9943, 0.9881, 1.0198, 0.9900, 1.0085, 0.9919,
        0.9992, 1.0048, 1.0121, 0.9873, 1.0222, 1.0312, 0.9909, 0.9981, 1.0077,
        1.0082, 1.0032, 0.9728, 1.0030, 1.0071, 1.0058, 1.0008, 0.9892, 0.9926,
        1.0168])
##########################################################
cross_encoder.encoder.layers.1.norm1.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-3.6778e-03, -1.3924e-02, -3.7624e-03,  7.4075e-03, -1.2342e-03,
        -9.3119e-03,  4.1768e-03,  4.3423e-03, -1.5399e-03,  1.2283e-02,
         7.3416e-03, -5.6476e-03,  5.2634e-03,  3.9614e-03, -7.2530e-03,
         4.2453e-03,  4.4030e-03,  3.4633e-03,  1.6828e-03,  5.3309e-04,
         7.7058e-03, -7.3290e-03,  1.8847e-03,  4.0932e-03, -8.0090e-03,
         9.1017e-03,  2.0355e-03, -9.3762e-03, -1.3886e-04, -1.1385e-02,
        -5.7641e-03,  4.9476e-04,  4.5601e-03,  2.8899e-03,  1.9366e-03,
         1.5097e-03, -4.5563e-04, -5.6158e-03,  3.7249e-03, -6.2455e-03,
         2.7407e-03,  9.1051e-03,  4.1680e-03,  6.4043e-03,  1.5515e-03,
         1.7443e-03, -6.8600e-03,  9.4959e-03, -7.7935e-03,  6.7202e-03,
         2.7287e-03,  4.8288e-03, -2.3070e-03, -6.4021e-03, -1.4614e-03,
         3.5065e-05, -2.8895e-03,  5.1567e-03,  4.1757e-03,  5.6068e-03,
         6.5684e-03,  6.1694e-03, -9.0411e-03, -9.5083e-03])
##########################################################
cross_encoder.encoder.layers.1.norm2.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([0.9833, 0.9652, 0.9985, 1.0022, 0.9647, 1.0020, 0.9812, 0.9799, 0.9859,
        0.9778, 0.9812, 0.9800, 0.9581, 0.9854, 0.9577, 0.9608, 0.9720, 0.9776,
        0.9696, 0.9804, 0.9841, 0.9813, 0.9807, 0.9681, 0.9782, 0.9829, 0.9745,
        0.9897, 0.9896, 0.9642, 0.9929, 0.9659, 0.9896, 0.9908, 1.0070, 0.9859,
        0.9811, 0.9860, 0.9930, 0.9881, 0.9718, 0.9926, 0.9807, 0.9856, 0.9840,
        0.9783, 0.9697, 0.9733, 0.9645, 0.9975, 0.9905, 0.9810, 0.9715, 0.9722,
        0.9904, 0.9651, 0.9826, 0.9674, 0.9761, 0.9642, 0.9735, 0.9753, 0.9642,
        0.9950])
##########################################################
cross_encoder.encoder.layers.1.norm2.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 0.0071,  0.0302, -0.0009,  0.0052,  0.0161,  0.0041, -0.0019,  0.0030,
        -0.0075, -0.0068, -0.0054, -0.0150,  0.0447, -0.0045, -0.0246,  0.0124,
         0.0186, -0.0226, -0.0061,  0.0057,  0.0144, -0.0016, -0.0118,  0.0038,
        -0.0184, -0.0087,  0.0169,  0.0105, -0.0019, -0.0304,  0.0001, -0.0194,
         0.0045,  0.0015,  0.0009, -0.0057, -0.0221, -0.0055,  0.0032, -0.0106,
         0.0199,  0.0028, -0.0128,  0.0007,  0.0135,  0.0241,  0.0091,  0.0182,
        -0.0075,  0.0043,  0.0073, -0.0047, -0.0010,  0.0167, -0.0123, -0.0036,
        -0.0153,  0.0020, -0.0177, -0.0053, -0.0076,  0.0076, -0.0138,  0.0037])
##########################################################
ffn.dense1.weight shape: torch.Size([32, 64])
tensor([[ 0.1456,  0.0662, -0.2020,  ..., -0.2124, -0.0381,  0.1999],
        [ 0.2258, -0.1695, -0.2128,  ..., -0.2415, -0.0722, -0.2457],
        [ 0.0242,  0.1698, -0.0004,  ..., -0.1646, -0.0830, -0.0899],
        ...,
        [ 0.1112,  0.0989,  0.0706,  ...,  0.1603, -0.2335, -0.0079],
        [ 0.2451,  0.1730,  0.1266,  ...,  0.0617, -0.0578,  0.1458],
        [ 0.1759,  0.0842, -0.2371,  ..., -0.0064,  0.0495,  0.0387]])
tensor([[ 0.1340,  0.1154, -0.1912,  ..., -0.2159, -0.0444,  0.2026],
        [ 0.2064, -0.1631, -0.2174,  ..., -0.2590, -0.1020, -0.2523],
        [ 0.0498,  0.1803, -0.0165,  ..., -0.1529, -0.0176, -0.0960],
        ...,
        [ 0.1140,  0.1112,  0.0736,  ...,  0.1596, -0.2117, -0.0082],
        [ 0.2554,  0.1359,  0.1160,  ...,  0.0652, -0.0469,  0.1461],
        [ 0.1889,  0.0762, -0.2337,  ..., -0.0169,  0.0674,  0.0484]])
##########################################################
ffn.dense1.bias shape: torch.Size([32])
tensor([ 0.0834, -0.0790,  0.0547,  0.0750,  0.1062, -0.1151,  0.0530, -0.0486,
        -0.1062,  0.0070,  0.0142,  0.0945,  0.1059,  0.0025, -0.0798, -0.1167,
        -0.0260, -0.0927,  0.0032,  0.0155, -0.0931,  0.0774,  0.0588,  0.0031,
        -0.0934,  0.0323,  0.1236, -0.0730,  0.0895, -0.0716, -0.0681, -0.1018])
tensor([ 0.0885, -0.0773,  0.0289,  0.0793,  0.1034, -0.1118,  0.0603, -0.0475,
        -0.1129,  0.0071, -0.0220,  0.0954,  0.1023,  0.0034, -0.1018, -0.1260,
        -0.0310, -0.0924, -0.0195,  0.0044, -0.1020,  0.0675,  0.0615, -0.0056,
        -0.1124,  0.0298,  0.1216, -0.0787,  0.0905, -0.0710, -0.0811, -0.0991])
##########################################################
ffn.dense2.weight shape: torch.Size([64, 32])
tensor([[-0.0359, -0.2189, -0.0018,  ..., -0.2201,  0.0945,  0.1390],
        [-0.1539,  0.0163, -0.1131,  ...,  0.0978, -0.0757,  0.0397],
        [-0.1403,  0.2055,  0.1737,  ..., -0.1758,  0.2453,  0.0463],
        ...,
        [ 0.0825, -0.0227, -0.1657,  ..., -0.0937,  0.0018,  0.1422],
        [-0.1271, -0.1527, -0.1235,  ...,  0.1342,  0.0649,  0.0685],
        [-0.0565,  0.1670,  0.1711,  ...,  0.2298, -0.1244,  0.1988]])
tensor([[-0.0348, -0.2296,  0.0422,  ..., -0.2295,  0.0851,  0.1379],
        [-0.1640,  0.0385, -0.0801,  ...,  0.0818, -0.0683,  0.0486],
        [-0.1570,  0.1655,  0.1229,  ..., -0.1972,  0.2559,  0.0344],
        ...,
        [ 0.0846, -0.0150, -0.1856,  ..., -0.1107,  0.0112,  0.1379],
        [-0.1347, -0.1685, -0.1318,  ...,  0.1418,  0.0579,  0.0872],
        [-0.0545,  0.1745,  0.1781,  ...,  0.2346, -0.1278,  0.2151]])
##########################################################
ffn.dense2.bias shape: torch.Size([64])
tensor([-0.1581, -0.0969, -0.0354,  0.1090,  0.0404,  0.0045, -0.0977,  0.0941,
         0.0938,  0.0958, -0.0514, -0.0981, -0.0805, -0.0024,  0.0492,  0.0564,
         0.0582, -0.1434,  0.0433, -0.0830, -0.1363,  0.0023, -0.1001, -0.1103,
         0.1042, -0.1195, -0.0879,  0.0514,  0.0674, -0.1721, -0.0879,  0.0910,
         0.0584, -0.1666,  0.0809,  0.0470, -0.1543, -0.1345, -0.0306,  0.0753,
         0.0298, -0.0408,  0.1081,  0.0907, -0.0782, -0.1364, -0.0174, -0.1097,
         0.1706,  0.0033, -0.0117, -0.0243,  0.1098, -0.0010, -0.0410, -0.1485,
        -0.1352, -0.0537, -0.1366,  0.1591, -0.1359, -0.0397, -0.1128, -0.1525])
tensor([-0.1581, -0.1056, -0.0520,  0.1118,  0.0487, -0.0067, -0.1007,  0.1054,
         0.0982,  0.1004, -0.0407, -0.1066, -0.0766, -0.0018,  0.0390,  0.0554,
         0.0646, -0.1462,  0.0470, -0.0795, -0.1339, -0.0012, -0.1014, -0.1064,
         0.1025, -0.1194, -0.0810,  0.0550,  0.0606, -0.1900, -0.0941,  0.0973,
         0.0599, -0.1681,  0.0851,  0.0465, -0.1591, -0.1342, -0.0231,  0.0626,
         0.0327, -0.0377,  0.1108,  0.0906, -0.0729, -0.1297, -0.0176, -0.1103,
         0.1627,  0.0064, -0.0186, -0.0359,  0.1048, -0.0040, -0.0383, -0.1495,
        -0.1313, -0.0511, -0.1357,  0.1630, -0.1304, -0.0382, -0.1202, -0.1532])
##########################################################
addnorm.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0066, 1.0046, 0.9984, 1.0330, 0.9876, 1.0003, 1.0097, 1.0073, 0.9981,
        1.0118, 0.9929, 1.0107, 1.0000, 0.9956, 0.9861, 1.0113, 1.0008, 0.9874,
        0.9863, 0.9950, 1.0102, 0.9988, 0.9957, 0.9819, 1.0059, 1.0035, 0.9902,
        1.0034, 1.0129, 0.9822, 0.9963, 0.9997, 1.0004, 1.0099, 1.0358, 1.0032,
        1.0030, 1.0135, 1.0109, 0.9945, 1.0011, 1.0142, 1.0143, 1.0160, 0.9907,
        1.0243, 1.0000, 1.0149, 0.9770, 1.0255, 1.0151, 0.9923, 1.0123, 1.0198,
        1.0039, 0.9982, 0.9941, 0.9930, 1.0144, 1.0054, 1.0027, 1.0043, 1.0075,
        1.0122])
##########################################################
addnorm.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 3.1719e-04, -6.6673e-03, -1.2445e-02,  1.4206e-03,  8.8591e-03,
        -1.0174e-02,  3.0254e-04,  8.0450e-03,  6.3206e-03,  5.8519e-03,
         1.0642e-02, -9.0167e-03,  4.0638e-03,  3.6939e-03, -9.0198e-03,
        -1.1881e-03,  6.0840e-03, -1.4404e-03,  4.2790e-03,  4.8091e-03,
         2.9440e-03, -3.5838e-03,  7.1218e-05,  4.6453e-03, -2.9937e-03,
        -1.6284e-03,  6.1013e-03,  3.2457e-03, -5.8649e-03, -1.5504e-02,
        -5.1894e-03,  8.2710e-03,  2.7087e-03, -1.2349e-03,  3.8694e-03,
         1.7203e-03, -4.2054e-03, -1.0241e-03,  5.3432e-03, -1.0825e-02,
         4.4862e-03,  3.8247e-03,  2.3398e-03,  1.0202e-03,  3.4021e-03,
         3.8912e-03, -2.5035e-05, -7.0492e-04, -7.5194e-03,  3.2690e-03,
        -5.9628e-03, -8.6045e-03, -4.0945e-03, -2.5315e-03,  2.8566e-03,
        -3.9486e-03,  3.7329e-03,  4.4107e-03,  7.2378e-04,  5.5452e-03,
         4.5067e-03,  6.2108e-04, -3.0928e-03, -8.9518e-04])
##########################################################
decoder.embedding.weight shape: torch.Size([166, 64])
tensor([[-0.7521,  0.6339, -0.0983,  ...,  2.0002, -0.6166, -0.3209],
        [-2.1833, -1.8342,  0.5069,  ..., -0.2366,  1.2468, -0.1190],
        [-1.2079, -0.0726,  2.5627,  ...,  1.3592, -0.7687, -0.2382],
        ...,
        [ 0.5198, -1.6376,  0.2172,  ..., -0.9563,  0.1353, -0.7024],
        [-0.1590,  0.7802, -1.6020,  ...,  1.4914, -1.0065, -1.2416],
        [ 0.0204,  1.0802,  1.3069,  ...,  0.1496,  0.1485, -0.5313]])
tensor([[-0.7521,  0.6339, -0.0983,  ...,  2.0002, -0.6166, -0.3209],
        [-2.1833, -1.8342,  0.5069,  ..., -0.2366,  1.2468, -0.1190],
        [-1.1820, -0.0720,  2.5396,  ...,  1.3589, -0.7840, -0.2297],
        ...,
        [ 0.5198, -1.6376,  0.2172,  ..., -0.9563,  0.1353, -0.7024],
        [-0.1590,  0.7802, -1.6020,  ...,  1.4914, -1.0065, -1.2416],
        [ 0.0204,  1.0802,  1.3069,  ...,  0.1496,  0.1485, -0.5313]])
##########################################################
decoder.blks.block0.attention1.W_q.weight shape: torch.Size([64, 64])
tensor([[ 0.0693, -0.1647,  0.0755,  ...,  0.1507, -0.1237, -0.2116],
        [-0.0141,  0.1773,  0.2048,  ..., -0.1858, -0.0107, -0.1812],
        [-0.1778,  0.1386, -0.1976,  ..., -0.1777,  0.0284, -0.0928],
        ...,
        [-0.1374, -0.1794, -0.1416,  ..., -0.0285, -0.0988,  0.1580],
        [ 0.1621, -0.1130, -0.0886,  ..., -0.1517,  0.0909,  0.0719],
        [ 0.1797,  0.0051,  0.1636,  ..., -0.1375,  0.1794, -0.0529]])
tensor([[ 0.0884, -0.1577,  0.0839,  ...,  0.1456, -0.1272, -0.2223],
        [-0.0181,  0.1461,  0.2203,  ..., -0.2029, -0.0003, -0.1760],
        [-0.2097,  0.0996, -0.1921,  ..., -0.1622,  0.0689, -0.1099],
        ...,
        [-0.1437, -0.2090, -0.1182,  ..., -0.0290, -0.0570,  0.1381],
        [ 0.1745, -0.1424, -0.1101,  ..., -0.1497,  0.1063,  0.0456],
        [ 0.1837, -0.0162,  0.1882,  ..., -0.1406,  0.1697, -0.0595]])
##########################################################
decoder.blks.block0.attention1.W_k.weight shape: torch.Size([64, 64])
tensor([[ 0.1960, -0.0895,  0.1074,  ...,  0.1059, -0.0550, -0.0878],
        [ 0.0472,  0.1155,  0.1070,  ..., -0.1661, -0.1525,  0.0513],
        [ 0.1162, -0.1442,  0.0236,  ...,  0.1653,  0.0753, -0.1948],
        ...,
        [ 0.1335,  0.1909, -0.1439,  ..., -0.0361,  0.0967,  0.1649],
        [ 0.1852, -0.0010,  0.1747,  ...,  0.1434,  0.1613, -0.1377],
        [-0.0369,  0.1995,  0.0920,  ..., -0.1703,  0.1407, -0.0970]])
tensor([[ 0.2164, -0.0598,  0.1050,  ...,  0.1302, -0.0448, -0.0964],
        [ 0.0484,  0.1053,  0.1035,  ..., -0.1567, -0.1522,  0.0372],
        [ 0.1170, -0.1377,  0.0043,  ...,  0.1211,  0.0742, -0.1776],
        ...,
        [ 0.1218,  0.2101, -0.1281,  ..., -0.0032,  0.1103,  0.1830],
        [ 0.2189, -0.0341,  0.1354,  ...,  0.1393,  0.1527, -0.1213],
        [ 0.0178,  0.1866,  0.0700,  ..., -0.1599,  0.1686, -0.0725]])
##########################################################
decoder.blks.block0.attention1.W_v.weight shape: torch.Size([64, 64])
tensor([[ 0.1089,  0.0903,  0.0318,  ..., -0.1715,  0.0398,  0.1981],
        [ 0.1134,  0.2014,  0.1012,  ..., -0.0545, -0.0454,  0.1229],
        [ 0.0448,  0.1441, -0.0288,  ...,  0.0942,  0.0320, -0.1698],
        ...,
        [ 0.1086,  0.0605,  0.2132,  ...,  0.1033, -0.1603, -0.0345],
        [-0.0968, -0.0440,  0.0700,  ...,  0.0357,  0.0668, -0.1193],
        [ 0.2006, -0.0379, -0.0915,  ..., -0.0051,  0.0077, -0.1748]])
tensor([[ 0.1142,  0.0887,  0.0126,  ..., -0.1679,  0.0977,  0.2366],
        [ 0.1245,  0.2000,  0.0994,  ..., -0.0476, -0.0822,  0.1586],
        [ 0.0254,  0.1335, -0.0272,  ...,  0.0851,  0.0121, -0.1718],
        ...,
        [ 0.0941,  0.0632,  0.2082,  ...,  0.0721, -0.1324,  0.0156],
        [-0.0832, -0.0315,  0.0458,  ...,  0.0136,  0.0974, -0.0720],
        [ 0.2445,  0.0006, -0.0952,  ..., -0.0036,  0.0021, -0.1767]])
##########################################################
decoder.blks.block0.attention1.W_o.weight shape: torch.Size([64, 64])
tensor([[ 0.1449,  0.0824,  0.0545,  ..., -0.0364, -0.1395, -0.1891],
        [ 0.1940,  0.1411,  0.0636,  ...,  0.0168,  0.1816,  0.0724],
        [-0.0147,  0.1531,  0.0057,  ..., -0.0883,  0.0762, -0.1801],
        ...,
        [ 0.0428, -0.1662,  0.0256,  ...,  0.1033, -0.1643, -0.1537],
        [-0.0508,  0.0868, -0.1227,  ...,  0.1254, -0.1869,  0.0050],
        [ 0.1263, -0.1487,  0.0059,  ..., -0.0804, -0.1821,  0.0254]])
tensor([[ 0.1869,  0.0849,  0.0407,  ..., -0.0632, -0.0912, -0.1474],
        [ 0.2167,  0.1588,  0.0932,  ..., -0.0309,  0.1960,  0.0905],
        [-0.0323,  0.1680,  0.0076,  ..., -0.0525,  0.0157, -0.1815],
        ...,
        [ 0.0596, -0.1818, -0.0250,  ...,  0.1195, -0.1673, -0.1155],
        [-0.0388,  0.0896, -0.1022,  ...,  0.1160, -0.1864,  0.0362],
        [ 0.1452, -0.1155,  0.0195,  ..., -0.0820, -0.1844,  0.0269]])
##########################################################
decoder.blks.block0.addnorm1.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0285, 1.0300, 1.0280, 1.0316, 0.9614, 1.0571, 0.9611, 1.0372, 0.9961,
        0.9919, 1.0370, 1.0375, 1.0294, 1.0489, 1.0087, 1.0756, 1.0248, 1.0384,
        1.0432, 0.9897, 1.0196, 1.0417, 0.9983, 0.9936, 1.0058, 1.0020, 1.0194,
        0.9943, 0.9638, 0.9871, 1.0654, 1.0183, 0.9806, 1.0008, 1.0165, 1.0254,
        1.0142, 0.9921, 1.0378, 1.0075, 1.0074, 1.0022, 1.0065, 1.0007, 1.0178,
        0.9844, 1.0263, 1.0481, 0.9895, 1.0575, 1.0019, 1.0234, 1.0332, 1.0257,
        1.0129, 1.0587, 1.0334, 0.9615, 1.0265, 1.0581, 0.9969, 1.0156, 1.0140,
        1.0102])
##########################################################
decoder.blks.block0.addnorm1.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 0.0077,  0.0138, -0.0063, -0.0108, -0.0019, -0.0031,  0.0224, -0.0175,
         0.0027,  0.0003,  0.0016,  0.0009,  0.0070, -0.0128,  0.0160,  0.0097,
        -0.0093,  0.0160, -0.0079, -0.0215,  0.0071, -0.0047, -0.0091,  0.0019,
        -0.0207,  0.0227,  0.0035,  0.0128,  0.0113,  0.0010,  0.0079,  0.0038,
         0.0138, -0.0013,  0.0042, -0.0056, -0.0151, -0.0028,  0.0013,  0.0072,
         0.0139, -0.0098, -0.0026,  0.0018, -0.0061, -0.0022, -0.0095,  0.0094,
         0.0039, -0.0110, -0.0009, -0.0117,  0.0101,  0.0010,  0.0016, -0.0114,
        -0.0080, -0.0049,  0.0019,  0.0054,  0.0049, -0.0127, -0.0045,  0.0105])
##########################################################
decoder.blks.block0.attention2.W_q.weight shape: torch.Size([64, 64])
tensor([[ 0.0253, -0.0009,  0.0784,  ..., -0.1371,  0.1051,  0.0688],
        [-0.0212,  0.0808, -0.0634,  ...,  0.1010, -0.1605,  0.1224],
        [-0.0336, -0.1642,  0.1046,  ..., -0.0585, -0.0172, -0.0313],
        ...,
        [-0.0681,  0.1877, -0.0993,  ..., -0.1622, -0.1013,  0.1274],
        [ 0.2106,  0.0120,  0.2151,  ...,  0.1441, -0.0203,  0.1644],
        [ 0.1110,  0.0327,  0.0614,  ...,  0.1861,  0.1396, -0.1983]])
tensor([[ 0.0035, -0.0165,  0.0720,  ..., -0.1553,  0.0632,  0.1061],
        [ 0.0097,  0.0996, -0.0714,  ...,  0.1216, -0.1145,  0.1035],
        [-0.0192, -0.1754,  0.0741,  ..., -0.0183,  0.0442, -0.1255],
        ...,
        [-0.0332,  0.2008, -0.1126,  ..., -0.1760, -0.0357,  0.1236],
        [ 0.2460,  0.0370,  0.2227,  ...,  0.1434,  0.0137,  0.1360],
        [ 0.1256,  0.0300,  0.0104,  ...,  0.2168,  0.1497, -0.1937]])
##########################################################
decoder.blks.block0.attention2.W_k.weight shape: torch.Size([64, 64])
tensor([[-0.1078,  0.1504,  0.1418,  ...,  0.1843,  0.0145,  0.0133],
        [ 0.1770, -0.1037,  0.0935,  ...,  0.0538,  0.0688, -0.2121],
        [-0.1828, -0.0257, -0.0067,  ...,  0.1289, -0.1130,  0.0176],
        ...,
        [ 0.0159, -0.0465, -0.1308,  ..., -0.1742, -0.1894, -0.1620],
        [ 0.1034, -0.0274, -0.0162,  ..., -0.0246, -0.1231, -0.1756],
        [-0.1378,  0.0999, -0.0385,  ...,  0.1174, -0.0699,  0.0103]])
tensor([[-0.0807,  0.1579,  0.1823,  ...,  0.1805,  0.0010,  0.0208],
        [ 0.1312, -0.1222,  0.0642,  ...,  0.0438,  0.0968, -0.1913],
        [-0.2225, -0.0066,  0.0114,  ...,  0.1231, -0.1434,  0.0203],
        ...,
        [ 0.0230, -0.0562, -0.1368,  ..., -0.1838, -0.1849, -0.1716],
        [ 0.0749, -0.0573, -0.0303,  ..., -0.0488, -0.1129, -0.1974],
        [-0.1445,  0.1281, -0.0151,  ...,  0.1373, -0.1097,  0.0316]])
##########################################################
decoder.blks.block0.attention2.W_v.weight shape: torch.Size([64, 64])
tensor([[-0.1248,  0.1815,  0.0747,  ..., -0.1585, -0.0307,  0.0558],
        [ 0.2070,  0.0685, -0.1167,  ..., -0.0714,  0.1358,  0.0094],
        [-0.0804, -0.1758,  0.1304,  ..., -0.0913, -0.1839,  0.1193],
        ...,
        [ 0.2036, -0.1362,  0.1069,  ...,  0.1308, -0.1143,  0.0933],
        [ 0.0108, -0.0029, -0.1525,  ...,  0.2136, -0.1233, -0.0468],
        [ 0.1657, -0.1620,  0.1856,  ...,  0.1540,  0.0660, -0.1138]])
tensor([[-0.1111,  0.1924,  0.0278,  ..., -0.1505, -0.0349,  0.0626],
        [ 0.1903,  0.0635, -0.1127,  ..., -0.0711,  0.1223,  0.0297],
        [-0.0879, -0.1739,  0.1413,  ..., -0.0819, -0.1650,  0.1346],
        ...,
        [ 0.1920, -0.1360,  0.1123,  ...,  0.1340, -0.0556,  0.0878],
        [ 0.0133, -0.0005, -0.1151,  ...,  0.2012, -0.1638, -0.0488],
        [ 0.1778, -0.1569,  0.1707,  ...,  0.1471,  0.0167, -0.1214]])
##########################################################
decoder.blks.block0.attention2.W_o.weight shape: torch.Size([64, 64])
tensor([[ 0.1955, -0.1130,  0.1248,  ...,  0.0042,  0.1628, -0.1339],
        [-0.1943,  0.1287, -0.0894,  ..., -0.0973, -0.2018,  0.1887],
        [ 0.1088, -0.0298, -0.1228,  ...,  0.0179,  0.0162, -0.0454],
        ...,
        [ 0.0331, -0.0881,  0.1007,  ...,  0.1679, -0.1721, -0.0262],
        [-0.1236, -0.1191,  0.0855,  ...,  0.1129,  0.1316,  0.0037],
        [ 0.0308,  0.1643, -0.0834,  ..., -0.1356, -0.0040, -0.1890]])
tensor([[ 0.1764, -0.1083,  0.0710,  ..., -0.0070,  0.1549, -0.1020],
        [-0.1714,  0.1158, -0.1048,  ..., -0.1034, -0.2026,  0.2081],
        [ 0.0858, -0.0447, -0.1226,  ...,  0.0148,  0.0148, -0.0531],
        ...,
        [ 0.0357, -0.0965,  0.1326,  ...,  0.1719, -0.1691, -0.0266],
        [-0.1418, -0.1089,  0.0411,  ...,  0.1010,  0.1253,  0.0131],
        [-0.0146,  0.1657, -0.1159,  ..., -0.1385, -0.0110, -0.1833]])
##########################################################
decoder.blks.block0.addnorm2.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0251, 1.0252, 0.9910, 1.0124, 0.9528, 1.0148, 0.9754, 1.0234, 0.9900,
        0.9801, 1.0069, 1.0039, 1.0254, 1.0340, 0.9969, 1.0294, 1.0066, 1.0345,
        0.9867, 0.9843, 1.0163, 1.0432, 0.9954, 0.9850, 0.9912, 0.9921, 1.0090,
        0.9978, 0.9707, 0.9827, 1.0344, 0.9922, 0.9795, 0.9933, 1.0082, 1.0080,
        1.0069, 0.9808, 1.0394, 0.9618, 0.9939, 1.0053, 1.0089, 0.9784, 1.0082,
        0.9797, 1.0136, 1.0362, 0.9844, 1.0292, 0.9767, 1.0046, 1.0200, 1.0149,
        1.0021, 1.0410, 1.0250, 0.9480, 1.0133, 1.0389, 0.9745, 1.0192, 0.9925,
        0.9822])
##########################################################
decoder.blks.block0.addnorm2.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 1.2333e-02,  1.4269e-02, -6.6013e-03, -1.0383e-02, -4.8512e-03,
        -1.0112e-03,  2.3770e-02, -1.7928e-02,  4.9180e-03, -3.0524e-03,
        -3.9994e-03,  3.7655e-03,  6.1026e-03, -1.1243e-02,  1.1926e-02,
         9.5487e-03, -6.1275e-03,  1.3972e-02, -9.6697e-03, -2.3745e-02,
         4.5537e-03, -6.5390e-03, -1.0637e-02,  2.8424e-03, -1.9426e-02,
         2.0303e-02,  1.2184e-03,  1.3190e-02,  7.5031e-03, -2.5643e-03,
         1.1206e-02,  1.3750e-03,  1.0626e-02, -2.9088e-03,  2.5105e-03,
        -9.5823e-03, -1.6763e-02, -8.3658e-03,  2.9612e-05,  6.2957e-03,
         1.3431e-02, -8.9499e-03,  1.0303e-03,  1.5723e-03, -6.5890e-03,
         6.7268e-04, -9.5381e-03,  1.1486e-02,  7.0509e-03, -1.0463e-02,
        -3.1271e-03, -9.3091e-03,  1.0936e-02, -3.9382e-03,  7.0896e-04,
        -1.4002e-02, -5.2575e-03, -3.7227e-03, -2.0258e-03,  8.3401e-03,
         1.6016e-02, -9.7315e-03, -3.2006e-03,  1.0142e-02])
##########################################################
decoder.blks.block0.ffn.dense1.weight shape: torch.Size([32, 64])
tensor([[-0.0542, -0.0995,  0.0555,  ...,  0.1842, -0.0729,  0.0726],
        [-0.0545, -0.0408,  0.2453,  ..., -0.1587, -0.2292, -0.2376],
        [ 0.0594, -0.1669, -0.0902,  ...,  0.0360, -0.1588, -0.1442],
        ...,
        [ 0.1915, -0.0722, -0.0145,  ..., -0.0451,  0.1449, -0.0993],
        [ 0.2116, -0.0335,  0.1951,  ..., -0.1413,  0.2066,  0.0340],
        [ 0.0225, -0.1065, -0.0842,  ..., -0.1623,  0.1717, -0.1150]])
tensor([[-0.0802, -0.1535,  0.0633,  ...,  0.2110, -0.0824,  0.0681],
        [ 0.0322, -0.0098,  0.2434,  ..., -0.1444, -0.1700, -0.1901],
        [ 0.1403, -0.0751, -0.1162,  ...,  0.0529, -0.1559, -0.1434],
        ...,
        [ 0.1799, -0.1012,  0.0072,  ...,  0.0049,  0.1624, -0.0509],
        [ 0.2446,  0.0024,  0.1882,  ..., -0.0969,  0.2288,  0.0161],
        [ 0.0333, -0.1171, -0.0685,  ..., -0.2405,  0.1557, -0.0804]])
##########################################################
decoder.blks.block0.ffn.dense1.bias shape: torch.Size([32])
tensor([-8.9679e-02, -9.0784e-02, -9.7285e-02, -8.9327e-02,  1.1399e-01,
         6.7131e-02, -3.0980e-02, -9.3535e-02,  1.8377e-02, -6.1712e-02,
        -9.7495e-02,  3.6995e-02, -1.2121e-01, -3.6622e-02,  8.4210e-02,
        -5.4571e-02,  1.1212e-02,  2.9094e-02, -7.3940e-05, -5.4818e-02,
        -1.6460e-03, -1.0979e-01,  7.4313e-02,  2.4665e-02,  2.6072e-02,
         1.2238e-01, -1.0603e-01,  2.9080e-02, -2.7750e-02, -8.5207e-02,
        -9.7940e-02,  3.6663e-02])
tensor([-0.0954, -0.1171, -0.0969, -0.0916,  0.0905,  0.0308, -0.0329, -0.0883,
         0.0298, -0.0691, -0.1183,  0.0326, -0.1069, -0.0439,  0.0623, -0.0851,
        -0.0496,  0.0200, -0.0128, -0.0600,  0.0035, -0.1283,  0.0663,  0.0129,
         0.0317,  0.1334, -0.0876,  0.0113, -0.0247, -0.0974, -0.1131,  0.0318])
##########################################################
decoder.blks.block0.ffn.dense2.weight shape: torch.Size([64, 32])
tensor([[-0.1972,  0.1086, -0.1613,  ...,  0.1979, -0.1116,  0.0872],
        [ 0.1390,  0.1432, -0.1349,  ..., -0.0855, -0.1909,  0.0850],
        [ 0.2267, -0.0233, -0.1100,  ...,  0.1380, -0.1793,  0.1602],
        ...,
        [ 0.1943, -0.0691, -0.1384,  ..., -0.1063, -0.1642, -0.0606],
        [-0.1543, -0.0069,  0.1270,  ...,  0.0220, -0.0970, -0.1713],
        [ 0.0148,  0.0530, -0.1978,  ..., -0.0498, -0.0567,  0.2077]])
tensor([[-0.2228,  0.1596, -0.1300,  ...,  0.2061, -0.0975,  0.1725],
        [ 0.1325,  0.1418, -0.1454,  ..., -0.0796, -0.1299,  0.0932],
        [ 0.2407, -0.0827, -0.0913,  ...,  0.1799, -0.1918,  0.1900],
        ...,
        [ 0.1875, -0.0588, -0.1221,  ..., -0.0818, -0.1425, -0.0970],
        [-0.1568,  0.0163,  0.1411,  ...,  0.0106, -0.0968, -0.1652],
        [ 0.0445,  0.0512, -0.2070,  ..., -0.0467, -0.0424,  0.2634]])
##########################################################
decoder.blks.block0.ffn.dense2.bias shape: torch.Size([64])
tensor([ 0.0222,  0.0422, -0.1120, -0.0073,  0.0053,  0.1563, -0.0253,  0.1551,
        -0.0732,  0.0152,  0.0414, -0.1528,  0.1402,  0.0239,  0.0832,  0.0344,
         0.1208, -0.0340, -0.0403, -0.1427, -0.0921,  0.1280, -0.1518,  0.0509,
        -0.1027, -0.0456, -0.0326, -0.0973,  0.0798, -0.0006,  0.1258,  0.0538,
        -0.1212,  0.0012,  0.1351, -0.1633, -0.0959,  0.0807, -0.1353, -0.1445,
         0.1734,  0.1758, -0.1118,  0.1242, -0.1455, -0.0232, -0.0518, -0.0807,
         0.1079,  0.1500,  0.0025,  0.1645,  0.1043, -0.0387,  0.0689,  0.1427,
         0.1507,  0.0619,  0.1681,  0.0590,  0.1200, -0.0900, -0.0709, -0.0927])
tensor([ 6.1104e-02,  5.5026e-02, -9.8036e-02, -2.3563e-02,  4.0177e-03,
         1.3866e-01, -6.8792e-03,  1.3589e-01, -6.1385e-02,  1.9643e-02,
         3.6076e-02, -1.4359e-01,  1.3894e-01,  1.7624e-02,  7.9809e-02,
         3.2683e-02,  1.1954e-01, -4.1885e-02, -3.6878e-02, -1.4262e-01,
        -1.0318e-01,  1.1620e-01, -1.6044e-01,  5.5086e-02, -1.2655e-01,
        -3.0805e-02, -2.2945e-02, -8.7987e-02,  6.2553e-02,  2.9683e-03,
         1.4210e-01,  3.6201e-02, -1.2195e-01, -2.1132e-02,  1.3366e-01,
        -1.4953e-01, -9.5074e-02,  6.4557e-02, -1.4526e-01, -1.4041e-01,
         1.8949e-01,  1.5419e-01, -8.6599e-02,  1.2488e-01, -1.4377e-01,
        -1.6394e-02, -5.8483e-02, -7.2704e-02,  1.0346e-01,  1.3537e-01,
        -8.9646e-05,  1.5230e-01,  1.1460e-01, -5.8200e-02,  6.1330e-02,
         1.0892e-01,  1.5426e-01,  6.1961e-02,  1.6163e-01,  4.5529e-02,
         1.1948e-01, -7.2960e-02, -7.8174e-02, -7.5579e-02])
##########################################################
decoder.blks.block0.addnorm3.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([0.9891, 1.0329, 0.9981, 1.0133, 0.9580, 1.0340, 0.9805, 1.0120, 0.9748,
        1.0110, 0.9958, 1.0074, 1.0089, 1.0464, 0.9710, 1.0292, 0.9810, 0.9949,
        0.9716, 0.9957, 0.9745, 1.0225, 0.9994, 1.0004, 1.0196, 0.9756, 0.9777,
        0.9955, 0.9783, 1.0193, 1.0143, 0.9846, 0.9590, 0.9795, 1.0011, 1.0309,
        0.9740, 0.9923, 1.0189, 0.9689, 0.9710, 1.0194, 0.9849, 0.9926, 0.9935,
        1.0045, 1.0104, 1.0051, 0.9780, 1.0113, 1.0154, 0.9589, 1.0199, 0.9863,
        1.0011, 1.0082, 1.0167, 0.9733, 0.9880, 1.0432, 0.9991, 1.0013, 1.0343,
        0.9864])
##########################################################
decoder.blks.block0.addnorm3.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 2.9526e-02,  1.5706e-02,  1.3325e-02, -3.9781e-03, -1.2889e-02,
        -1.5891e-02,  7.8756e-03, -1.8534e-02,  7.4804e-03, -2.1779e-03,
         5.1243e-03,  1.1292e-02, -1.6448e-03, -6.2906e-03, -5.4040e-03,
        -3.8812e-03,  2.9562e-03, -6.9568e-04,  3.4585e-03, -9.8911e-03,
         4.1150e-03, -9.7324e-03, -1.6690e-02, -1.1349e-03, -3.3033e-02,
         7.1975e-03,  8.9371e-03,  8.1903e-03,  2.2501e-03, -1.1214e-03,
         8.8999e-03, -6.2647e-04,  2.8536e-05, -1.4349e-02,  2.2546e-03,
         2.5620e-03, -3.4292e-03, -4.7062e-03,  1.6814e-03,  2.5259e-03,
         4.2539e-03, -1.6050e-02,  1.7364e-02,  6.1125e-03,  2.7256e-03,
         5.5844e-03, -6.8899e-03,  1.1005e-02,  7.9196e-03, -1.0558e-02,
         4.2231e-03, -1.1339e-04,  6.6599e-03, -9.8921e-03, -2.6992e-03,
        -2.0297e-02,  3.1710e-03,  5.7899e-03, -7.3028e-03, -1.3834e-02,
        -1.3057e-02,  5.7387e-03, -5.4671e-03,  1.1791e-02])
##########################################################
decoder.blks.block1.attention1.W_q.weight shape: torch.Size([64, 64])
tensor([[ 0.1344, -0.1516, -0.2131,  ..., -0.1254, -0.0272, -0.1599],
        [ 0.0035,  0.0101, -0.1925,  ..., -0.1588,  0.1951,  0.0312],
        [ 0.1808, -0.1681, -0.0427,  ...,  0.0519, -0.1543,  0.1358],
        ...,
        [ 0.1487, -0.0494, -0.0318,  ...,  0.0587,  0.0546, -0.1055],
        [-0.0641,  0.0040,  0.0352,  ...,  0.1572, -0.1266, -0.1686],
        [-0.2085,  0.0445, -0.1330,  ...,  0.0735,  0.0199,  0.1120]])
tensor([[ 0.1489, -0.1904, -0.2217,  ..., -0.1147, -0.0005, -0.1797],
        [-0.0488,  0.0328, -0.1644,  ..., -0.1444,  0.1488,  0.0282],
        [ 0.1925, -0.2346, -0.0772,  ...,  0.0371, -0.1488,  0.1277],
        ...,
        [ 0.1767, -0.0357, -0.0585,  ...,  0.0635,  0.0800, -0.0920],
        [-0.0408, -0.0203,  0.0368,  ...,  0.1255, -0.0984, -0.1494],
        [-0.1794,  0.0141, -0.1288,  ...,  0.0508,  0.0349,  0.0569]])
##########################################################
decoder.blks.block1.attention1.W_k.weight shape: torch.Size([64, 64])
tensor([[ 0.0328, -0.1091,  0.0997,  ..., -0.1909,  0.0099,  0.2052],
        [-0.1915, -0.0499, -0.1770,  ...,  0.1276,  0.0393, -0.1004],
        [-0.0667,  0.2066,  0.2071,  ..., -0.0496, -0.0047, -0.2014],
        ...,
        [ 0.0669,  0.1663,  0.1784,  ...,  0.0525, -0.1002,  0.0490],
        [ 0.0877,  0.1797,  0.1232,  ..., -0.0469,  0.2165,  0.1708],
        [ 0.0684,  0.1821,  0.1295,  ..., -0.2090,  0.1842,  0.0827]])
tensor([[ 0.0774, -0.0836,  0.0686,  ..., -0.2621,  0.0320,  0.1676],
        [-0.1891, -0.0322, -0.1427,  ...,  0.2147,  0.0274, -0.1340],
        [-0.0206,  0.2874,  0.1922,  ..., -0.0703, -0.0271, -0.2123],
        ...,
        [ 0.0865,  0.1204,  0.1698,  ...,  0.0509, -0.1004,  0.0089],
        [ 0.0750,  0.1504,  0.1384,  ..., -0.0526,  0.1914,  0.2243],
        [ 0.0362,  0.1625,  0.1142,  ..., -0.1970,  0.2042,  0.1130]])
##########################################################
decoder.blks.block1.attention1.W_v.weight shape: torch.Size([64, 64])
tensor([[-0.0226, -0.1535, -0.0794,  ..., -0.1740,  0.0523, -0.2044],
        [ 0.1107, -0.0784, -0.0583,  ...,  0.1218, -0.2132,  0.1614],
        [-0.0442,  0.1831,  0.0997,  ..., -0.2039, -0.0240,  0.1559],
        ...,
        [ 0.0498, -0.0199, -0.1630,  ..., -0.1234, -0.0517, -0.1546],
        [ 0.1224,  0.1235, -0.0943,  ...,  0.1458,  0.1021, -0.1870],
        [-0.0276,  0.0079,  0.1033,  ..., -0.1537, -0.0266,  0.0156]])
tensor([[-0.0276, -0.1926, -0.0626,  ..., -0.1479,  0.0612, -0.2117],
        [ 0.0913, -0.0292, -0.0460,  ...,  0.1115, -0.1894,  0.1559],
        [-0.0543,  0.1970,  0.0712,  ..., -0.1860, -0.0198,  0.1489],
        ...,
        [ 0.0607, -0.0079, -0.1572,  ..., -0.1062, -0.0465, -0.1328],
        [ 0.1400,  0.1094, -0.0947,  ...,  0.1459,  0.0865, -0.1739],
        [-0.0293,  0.0031,  0.0953,  ..., -0.1499, -0.0360, -0.0012]])
##########################################################
decoder.blks.block1.attention1.W_o.weight shape: torch.Size([64, 64])
tensor([[-0.0868,  0.0812,  0.1915,  ...,  0.0047, -0.1351, -0.0468],
        [ 0.0518, -0.1193, -0.1949,  ..., -0.1389, -0.1618,  0.1942],
        [-0.1163, -0.0071, -0.0398,  ...,  0.0473,  0.0048,  0.1774],
        ...,
        [-0.1033, -0.0785,  0.0415,  ...,  0.0467, -0.2028,  0.2004],
        [-0.0555,  0.0933, -0.1875,  ..., -0.0579,  0.1555, -0.1527],
        [-0.1798, -0.0934,  0.0533,  ...,  0.0794, -0.0575, -0.1677]])
tensor([[-0.1458,  0.0796,  0.1797,  ..., -0.0234, -0.1732, -0.0510],
        [ 0.0377, -0.0864, -0.2092,  ..., -0.1166, -0.1884,  0.1666],
        [-0.1161, -0.0422, -0.0226,  ...,  0.0502, -0.0011,  0.1143],
        ...,
        [-0.0650, -0.0783,  0.0561,  ...,  0.0200, -0.1906,  0.1802],
        [-0.0562,  0.0937, -0.1980,  ..., -0.0579,  0.1570, -0.1634],
        [-0.1543, -0.0896,  0.0552,  ...,  0.0629, -0.0269, -0.2034]])
##########################################################
decoder.blks.block1.addnorm1.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0534, 1.0114, 1.0170, 1.0131, 0.9724, 1.0573, 0.9836, 1.0098, 1.0245,
        1.0044, 0.9867, 0.9896, 1.0206, 1.0373, 1.0078, 1.0090, 1.0351, 1.0124,
        0.9823, 1.0083, 0.9920, 1.0728, 1.0085, 1.0045, 1.0308, 0.9937, 1.0173,
        1.0311, 1.0112, 1.0402, 1.0401, 1.0588, 0.9738, 0.9896, 1.0203, 1.0310,
        1.0188, 0.9945, 1.0285, 0.9966, 1.0003, 1.0252, 1.0161, 1.0026, 1.0122,
        1.0133, 1.0154, 1.0305, 1.0155, 0.9983, 0.9829, 1.0100, 1.0409, 1.0258,
        1.0343, 0.9994, 1.0302, 1.0131, 1.0021, 1.0251, 0.9915, 0.9999, 1.0757,
        0.9970])
##########################################################
decoder.blks.block1.addnorm1.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 1.6035e-05, -8.1466e-03,  3.2510e-03, -1.5871e-02, -2.0608e-03,
        -4.9444e-04, -5.0266e-03, -2.0252e-02, -7.4850e-03, -1.6791e-02,
         5.3350e-03,  1.1710e-02,  1.2265e-02, -8.6703e-03, -9.6113e-03,
        -1.0192e-02, -1.5446e-03,  5.4479e-03,  8.8495e-03, -3.0669e-03,
        -1.5587e-02,  4.2690e-03,  2.1133e-03,  4.4581e-04, -6.1768e-03,
         4.1983e-03,  3.4118e-03,  1.5067e-03,  9.6065e-03, -3.0900e-03,
         2.8444e-03, -2.2856e-04,  1.3552e-02, -9.3991e-03,  2.3006e-03,
         6.3598e-03, -1.9054e-02, -1.6837e-04,  3.5037e-03,  5.9062e-03,
         7.3490e-03, -9.4829e-03, -7.4620e-03,  7.2746e-03, -9.7156e-04,
         8.8862e-03,  1.1072e-02,  1.3713e-02,  1.3842e-02, -1.3866e-02,
         5.8547e-03,  1.5036e-02,  6.9617e-04,  7.2228e-03, -2.1754e-03,
        -2.0655e-02,  1.1989e-02, -5.9597e-04, -1.3344e-02, -9.3445e-03,
        -6.5274e-03,  2.4146e-03,  1.0877e-02,  1.1629e-02])
##########################################################
decoder.blks.block1.attention2.W_q.weight shape: torch.Size([64, 64])
tensor([[ 0.2159, -0.1826,  0.1565,  ...,  0.0745,  0.1242,  0.0608],
        [ 0.1651, -0.0057,  0.1219,  ..., -0.0519, -0.1900, -0.0032],
        [-0.0381, -0.0804, -0.0433,  ..., -0.0545, -0.0193,  0.0401],
        ...,
        [-0.2126, -0.1978,  0.1899,  ..., -0.1783,  0.0334,  0.1598],
        [ 0.1087, -0.2138,  0.0527,  ...,  0.0996, -0.1080,  0.1061],
        [-0.0557, -0.1852,  0.1501,  ...,  0.1881, -0.1353,  0.1955]])
tensor([[ 0.2140, -0.1914,  0.1466,  ...,  0.1003,  0.1368,  0.0626],
        [ 0.1535, -0.0247,  0.1439,  ..., -0.0316, -0.2356, -0.0519],
        [-0.0702, -0.0361, -0.0373,  ..., -0.0362, -0.0295,  0.0413],
        ...,
        [-0.2032, -0.1916,  0.1403,  ..., -0.1064,  0.0107,  0.1466],
        [ 0.1139, -0.1888,  0.0433,  ...,  0.1231, -0.0720,  0.0664],
        [-0.0665, -0.1499,  0.1515,  ...,  0.2332, -0.1198,  0.1962]])
##########################################################
decoder.blks.block1.attention2.W_k.weight shape: torch.Size([64, 64])
tensor([[-0.1826, -0.2066, -0.0369,  ..., -0.1824,  0.0183,  0.1589],
        [ 0.0805,  0.1679,  0.0789,  ...,  0.2094, -0.1925,  0.0683],
        [-0.1652, -0.0843, -0.2132,  ..., -0.0478, -0.0518, -0.0446],
        ...,
        [-0.0546,  0.0481, -0.0227,  ...,  0.2015, -0.0379,  0.0602],
        [-0.1461,  0.0029,  0.0119,  ..., -0.1175,  0.0419,  0.1664],
        [ 0.1101, -0.0586,  0.0744,  ...,  0.1235,  0.0273,  0.0919]])
tensor([[-0.2017, -0.2179, -0.0382,  ..., -0.1969,  0.0204,  0.1478],
        [ 0.0241,  0.1426,  0.0165,  ...,  0.1727, -0.2007,  0.0493],
        [-0.1484, -0.0976, -0.2099,  ..., -0.0521, -0.0536, -0.0703],
        ...,
        [-0.0398,  0.0287, -0.0268,  ...,  0.1878, -0.0369,  0.0196],
        [-0.1264,  0.0170,  0.0275,  ..., -0.1317,  0.0387,  0.1352],
        [ 0.1927, -0.0588,  0.0946,  ...,  0.1137,  0.0233,  0.0463]])
##########################################################
decoder.blks.block1.attention2.W_v.weight shape: torch.Size([64, 64])
tensor([[ 0.1160,  0.0423, -0.0447,  ...,  0.1836, -0.1066, -0.1457],
        [ 0.1497,  0.0296,  0.0034,  ..., -0.1503,  0.1195, -0.1554],
        [-0.0810,  0.2023, -0.1365,  ..., -0.1228,  0.0570, -0.1160],
        ...,
        [-0.1142, -0.1648,  0.0890,  ...,  0.1364, -0.2115, -0.0974],
        [-0.0937,  0.0902, -0.1450,  ...,  0.1343,  0.2131,  0.1347],
        [ 0.0622,  0.1890, -0.1323,  ...,  0.1265, -0.0712, -0.0781]])
tensor([[ 0.1017,  0.0230, -0.0418,  ...,  0.1536, -0.0795, -0.1589],
        [ 0.1503,  0.0291,  0.0098,  ..., -0.1471,  0.1118, -0.1685],
        [-0.0878,  0.1952, -0.1351,  ..., -0.1445,  0.0922, -0.1067],
        ...,
        [-0.1180, -0.1624,  0.0570,  ...,  0.1352, -0.2133, -0.0888],
        [-0.1012,  0.0828, -0.1395,  ...,  0.1227,  0.2317,  0.1263],
        [ 0.0558,  0.1798, -0.1345,  ...,  0.1095, -0.0529, -0.0833]])
##########################################################
decoder.blks.block1.attention2.W_o.weight shape: torch.Size([64, 64])
tensor([[-0.0020,  0.0204,  0.1313,  ..., -0.1930,  0.0225, -0.1596],
        [ 0.0457,  0.0766, -0.2151,  ...,  0.0899,  0.1212, -0.1378],
        [ 0.1195,  0.1269,  0.0140,  ..., -0.1530, -0.1647,  0.1852],
        ...,
        [ 0.1752, -0.0291,  0.0223,  ..., -0.1201,  0.0399, -0.0964],
        [-0.1027,  0.1407, -0.0475,  ..., -0.1167,  0.1608,  0.0448],
        [ 0.1445, -0.0051, -0.1843,  ..., -0.0506,  0.0816, -0.1147]])
tensor([[-0.0014,  0.0499,  0.1337,  ..., -0.1452,  0.0198, -0.1432],
        [ 0.0543,  0.0751, -0.2065,  ...,  0.0652,  0.1172, -0.1234],
        [ 0.1107,  0.1154,  0.0024,  ..., -0.1469, -0.1538,  0.1624],
        ...,
        [ 0.1815, -0.0143,  0.0256,  ..., -0.1019,  0.0203, -0.1056],
        [-0.1175,  0.1663, -0.0417,  ..., -0.1053,  0.1675,  0.0468],
        [ 0.1393, -0.0317, -0.1950,  ..., -0.0218,  0.0847, -0.1335]])
##########################################################
decoder.blks.block1.addnorm2.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0337, 0.9851, 1.0072, 1.0064, 0.9931, 1.0318, 0.9861, 0.9948, 1.0078,
        0.9699, 0.9516, 0.9714, 1.0317, 1.0249, 1.0130, 0.9820, 1.0233, 0.9931,
        0.9768, 0.9694, 0.9996, 1.0505, 1.0039, 0.9873, 1.0217, 0.9824, 0.9899,
        1.0145, 0.9988, 1.0236, 1.0238, 1.0121, 0.9780, 0.9888, 1.0275, 1.0072,
        0.9945, 0.9753, 0.9924, 0.9866, 0.9712, 1.0040, 0.9934, 0.9694, 1.0145,
        1.0033, 1.0072, 1.0133, 0.9780, 0.9795, 0.9796, 1.0045, 1.0067, 1.0062,
        1.0191, 0.9851, 1.0252, 1.0177, 0.9828, 1.0270, 0.9902, 0.9895, 1.0768,
        0.9908])
##########################################################
decoder.blks.block1.addnorm2.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-0.0013, -0.0089,  0.0051, -0.0192, -0.0024,  0.0026, -0.0059, -0.0178,
        -0.0043, -0.0176,  0.0067,  0.0098,  0.0122, -0.0034, -0.0095, -0.0063,
        -0.0001,  0.0033,  0.0020,  0.0003, -0.0229,  0.0036,  0.0062,  0.0028,
        -0.0044,  0.0030, -0.0019,  0.0026,  0.0108, -0.0002,  0.0028, -0.0020,
         0.0080, -0.0072, -0.0058,  0.0087, -0.0142, -0.0029,  0.0035,  0.0081,
         0.0028, -0.0159, -0.0059,  0.0110, -0.0003,  0.0179,  0.0128,  0.0239,
         0.0125, -0.0176,  0.0107,  0.0156, -0.0018,  0.0055, -0.0031, -0.0170,
         0.0118,  0.0008, -0.0114, -0.0065, -0.0013,  0.0061,  0.0146,  0.0206])
##########################################################
decoder.blks.block1.ffn.dense1.weight shape: torch.Size([32, 64])
tensor([[ 0.1489,  0.2080, -0.0555,  ..., -0.2102, -0.2448, -0.1564],
        [ 0.2317,  0.1920, -0.0126,  ..., -0.0838, -0.0495, -0.1031],
        [ 0.0902, -0.1912, -0.0516,  ...,  0.0739, -0.1585, -0.2489],
        ...,
        [ 0.0026,  0.1242, -0.0223,  ...,  0.2452, -0.1035, -0.1985],
        [ 0.1815, -0.2106, -0.1218,  ...,  0.1912, -0.1985,  0.1623],
        [ 0.1154,  0.1878, -0.1003,  ...,  0.0662,  0.2084, -0.2293]])
tensor([[ 0.1651,  0.2194, -0.0039,  ..., -0.1588, -0.2509, -0.2021],
        [ 0.2118,  0.1547,  0.0261,  ..., -0.0079, -0.0861, -0.1117],
        [ 0.0985, -0.2151, -0.0477,  ...,  0.0331, -0.1941, -0.2257],
        ...,
        [ 0.0609,  0.1019, -0.0161,  ...,  0.2505, -0.0464, -0.1561],
        [ 0.1515, -0.1999, -0.1297,  ...,  0.2344, -0.2179,  0.1300],
        [ 0.1466,  0.2006, -0.0763,  ...,  0.0647,  0.1609, -0.2325]])
##########################################################
decoder.blks.block1.ffn.dense1.bias shape: torch.Size([32])
tensor([-0.1228, -0.0722, -0.0761, -0.0432, -0.0297, -0.0111,  0.1168,  0.0175,
         0.0006,  0.0411, -0.0488, -0.0860, -0.0149, -0.0331, -0.0847, -0.0099,
         0.0940, -0.0905,  0.0267,  0.0909,  0.0760, -0.0183,  0.0429, -0.1177,
        -0.0237, -0.0171,  0.0602,  0.0310, -0.0805,  0.0301,  0.1147, -0.0882])
tensor([-0.1502, -0.1295, -0.0872, -0.0587, -0.0307, -0.0260,  0.0919,  0.0144,
         0.0044,  0.0339, -0.0454, -0.1002, -0.0419, -0.0535, -0.0812, -0.0007,
         0.0682, -0.1037,  0.0098,  0.0702,  0.0607, -0.0310,  0.0061, -0.1464,
        -0.0203, -0.0202,  0.0327,  0.0146, -0.0992,  0.0107,  0.0970, -0.0899])
##########################################################
decoder.blks.block1.ffn.dense2.weight shape: torch.Size([64, 32])
tensor([[-0.0801,  0.1539,  0.0453,  ..., -0.1410,  0.0011, -0.0035],
        [ 0.2373, -0.2200,  0.1584,  ..., -0.1423, -0.1642, -0.0865],
        [ 0.1320, -0.1679, -0.0226,  ..., -0.1951,  0.2464, -0.2157],
        ...,
        [ 0.1112, -0.1091, -0.2219,  ...,  0.2203, -0.2365, -0.2386],
        [ 0.0263, -0.2375,  0.0254,  ...,  0.2479, -0.1451,  0.2049],
        [-0.2494,  0.2461, -0.1505,  ..., -0.1595, -0.2013,  0.1236]])
tensor([[-0.0919,  0.1415,  0.0404,  ..., -0.2034, -0.0083, -0.0049],
        [ 0.2183, -0.1116,  0.1392,  ..., -0.0955, -0.1457, -0.1330],
        [ 0.0472, -0.1478, -0.0225,  ..., -0.1274,  0.2619, -0.1813],
        ...,
        [ 0.1351, -0.0465, -0.2241,  ...,  0.2313, -0.2505, -0.2422],
        [ 0.0190, -0.2899,  0.0409,  ...,  0.1879, -0.1612,  0.1728],
        [-0.2305,  0.2075, -0.1266,  ..., -0.1608, -0.1870,  0.1308]])
##########################################################
decoder.blks.block1.ffn.dense2.bias shape: torch.Size([64])
tensor([-0.1546,  0.0625, -0.0802,  0.0916, -0.0967, -0.1752, -0.1622,  0.0351,
         0.0479,  0.0119, -0.0123,  0.1298,  0.1554,  0.1621,  0.0283, -0.1526,
        -0.1616, -0.0141,  0.0649,  0.1694, -0.0442, -0.0114,  0.0032, -0.0938,
         0.1473, -0.0938, -0.0143,  0.0811,  0.0015, -0.0696,  0.0826,  0.0887,
         0.0137,  0.0943, -0.1076,  0.1602, -0.1610,  0.1514,  0.1194, -0.0607,
        -0.1588,  0.0820,  0.0206, -0.0343,  0.0944,  0.0084, -0.1365,  0.1383,
         0.1365,  0.1574,  0.1236, -0.1151,  0.0505,  0.0516,  0.0263, -0.0632,
         0.0094,  0.0565,  0.1620,  0.1012,  0.1355,  0.1540,  0.0192, -0.0207])
tensor([-0.1575,  0.0726, -0.0708,  0.0600, -0.0755, -0.1687, -0.1554,  0.0119,
         0.0414, -0.0101, -0.0064,  0.1428,  0.1658,  0.1515,  0.0125, -0.1603,
        -0.1501, -0.0120,  0.0842,  0.1765, -0.0599, -0.0044,  0.0112, -0.0908,
         0.1411, -0.0893, -0.0097,  0.0903,  0.0154, -0.0510,  0.0851,  0.0790,
         0.0222,  0.0699, -0.1222,  0.1763, -0.1634,  0.1530,  0.1197, -0.0522,
        -0.1545,  0.0777,  0.0084, -0.0015,  0.1013,  0.0174, -0.1312,  0.1354,
         0.1510,  0.1453,  0.1321, -0.1085,  0.0563,  0.0653,  0.0257, -0.0700,
         0.0120,  0.0566,  0.1579,  0.0857,  0.1307,  0.1511,  0.0106,  0.0341])
##########################################################
decoder.blks.block1.addnorm3.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0499, 0.9790, 1.0014, 1.0152, 0.9638, 1.0215, 0.9800, 0.9787, 0.9894,
        0.9890, 1.0249, 0.9895, 1.0221, 1.0276, 1.0158, 0.9981, 1.0028, 0.9961,
        0.9880, 0.9790, 0.9876, 1.0209, 1.0082, 0.9822, 1.0398, 0.9784, 0.9787,
        1.0015, 1.0055, 1.0278, 1.0650, 1.0211, 0.9780, 0.9745, 0.9976, 1.0114,
        0.9910, 0.9952, 0.9907, 0.9876, 0.9812, 1.0157, 1.0266, 0.9533, 1.0165,
        1.0215, 1.0240, 0.9964, 0.9785, 0.9810, 0.9831, 1.0101, 0.9909, 0.9987,
        1.0151, 0.9990, 1.0072, 1.0364, 1.0020, 1.0434, 0.9816, 1.0248, 1.0076,
        0.9620])
##########################################################
decoder.blks.block1.addnorm3.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 0.0042,  0.0051, -0.0035, -0.0172,  0.0103, -0.0132, -0.0021, -0.0142,
        -0.0077, -0.0180,  0.0025,  0.0050, -0.0034, -0.0024, -0.0013, -0.0032,
         0.0063, -0.0043,  0.0010,  0.0070, -0.0194,  0.0048, -0.0146,  0.0005,
        -0.0092, -0.0083,  0.0012, -0.0082,  0.0121,  0.0217, -0.0114, -0.0024,
         0.0057, -0.0055, -0.0006,  0.0118, -0.0042,  0.0047, -0.0049, -0.0028,
        -0.0031, -0.0116, -0.0089,  0.0178,  0.0065,  0.0059,  0.0009,  0.0030,
        -0.0007, -0.0108,  0.0038,  0.0041,  0.0011,  0.0063,  0.0040, -0.0168,
        -0.0161,  0.0046, -0.0032, -0.0144, -0.0081,  0.0007,  0.0079,  0.0172])
##########################################################
decoder.blks.block2.attention1.W_q.weight shape: torch.Size([64, 64])
tensor([[-0.0626,  0.0473, -0.0045,  ..., -0.1865,  0.1716, -0.1933],
        [ 0.0254,  0.2007,  0.1174,  ..., -0.0798, -0.0361,  0.1108],
        [ 0.2130,  0.0753, -0.0330,  ...,  0.2055,  0.0392, -0.1227],
        ...,
        [-0.1094,  0.0855,  0.0540,  ...,  0.1236, -0.1692,  0.0447],
        [ 0.0530, -0.1042, -0.0725,  ..., -0.1454,  0.1362, -0.0128],
        [-0.0727, -0.0218,  0.1556,  ..., -0.0183, -0.1673,  0.1011]])
tensor([[-0.0685,  0.0898, -0.0143,  ..., -0.1888,  0.2517, -0.2040],
        [ 0.0325,  0.1807,  0.1525,  ..., -0.0466, -0.1069,  0.1562],
        [ 0.1779,  0.0819, -0.0459,  ...,  0.2284,  0.0620, -0.1462],
        ...,
        [-0.1485,  0.0977,  0.0931,  ...,  0.1542, -0.2115,  0.0295],
        [ 0.0508, -0.0975, -0.0896,  ..., -0.1317,  0.1981, -0.0159],
        [-0.0492, -0.0113,  0.1451,  ..., -0.0067, -0.1678,  0.1010]])
##########################################################
decoder.blks.block2.attention1.W_k.weight shape: torch.Size([64, 64])
tensor([[ 0.1098,  0.1476,  0.0237,  ..., -0.0848, -0.0474,  0.0946],
        [ 0.1314,  0.0761, -0.0476,  ..., -0.0164, -0.2107,  0.0167],
        [-0.0761,  0.1862,  0.1812,  ...,  0.1360,  0.1735, -0.0686],
        ...,
        [ 0.1613, -0.2101,  0.1502,  ..., -0.0342,  0.0036,  0.1428],
        [-0.0130,  0.0891,  0.1154,  ..., -0.2081, -0.1859, -0.0199],
        [ 0.1425, -0.0179, -0.1293,  ...,  0.0553, -0.1100,  0.0484]])
tensor([[ 0.1264,  0.1078, -0.0151,  ..., -0.0471, -0.0316,  0.1944],
        [ 0.1543,  0.0579, -0.0574,  ..., -0.0029, -0.2235,  0.0301],
        [-0.0581,  0.1913,  0.1836,  ...,  0.1175,  0.1356, -0.0563],
        ...,
        [ 0.1998, -0.2148,  0.1512,  ..., -0.0631,  0.0066,  0.1414],
        [ 0.0097,  0.0900,  0.1193,  ..., -0.1884, -0.2180,  0.0317],
        [ 0.2084,  0.0647, -0.1715,  ...,  0.0311, -0.0576,  0.0994]])
##########################################################
decoder.blks.block2.attention1.W_v.weight shape: torch.Size([64, 64])
tensor([[-0.1473,  0.2083,  0.1053,  ..., -0.0163,  0.1042,  0.0813],
        [ 0.0352, -0.0146,  0.0633,  ..., -0.1321, -0.0772,  0.1717],
        [-0.1038,  0.0960, -0.0275,  ...,  0.1118, -0.0168,  0.0920],
        ...,
        [ 0.1434,  0.1791, -0.0741,  ..., -0.2158, -0.0029, -0.0808],
        [-0.1810, -0.1484,  0.0913,  ..., -0.0713, -0.1831, -0.0144],
        [-0.0949, -0.0526,  0.0440,  ..., -0.1020,  0.1085, -0.2007]])
tensor([[-0.1287,  0.1880,  0.1144,  ...,  0.0279,  0.1439,  0.0615],
        [ 0.0215, -0.0262,  0.1054,  ..., -0.1153, -0.1031,  0.1727],
        [-0.1061,  0.0966, -0.0412,  ...,  0.0604, -0.0090,  0.1136],
        ...,
        [ 0.1441,  0.2095, -0.0817,  ..., -0.1324, -0.0308, -0.0670],
        [-0.1637, -0.1692,  0.0847,  ..., -0.0503, -0.1651, -0.0154],
        [-0.0894, -0.0425,  0.0720,  ..., -0.0811,  0.1081, -0.1910]])
##########################################################
decoder.blks.block2.attention1.W_o.weight shape: torch.Size([64, 64])
tensor([[ 0.0335, -0.1790, -0.1527,  ...,  0.1804,  0.0183,  0.2084],
        [ 0.2004,  0.0881,  0.1948,  ..., -0.0340,  0.1666, -0.0905],
        [-0.0251, -0.0803, -0.0254,  ...,  0.0726,  0.1688,  0.0812],
        ...,
        [ 0.1595,  0.0495, -0.1659,  ...,  0.0341,  0.0776, -0.1512],
        [-0.0973,  0.1731, -0.1664,  ...,  0.1238, -0.0278,  0.2110],
        [-0.2160, -0.2035, -0.1993,  ...,  0.1147, -0.1960,  0.2109]])
tensor([[ 0.0330, -0.1231, -0.1687,  ...,  0.1749,  0.0199,  0.2260],
        [ 0.2466,  0.0703,  0.2061,  ..., -0.0412,  0.1692, -0.0383],
        [-0.0359, -0.0890, -0.0204,  ...,  0.0364,  0.1712,  0.0697],
        ...,
        [ 0.1054,  0.0437, -0.0982,  ..., -0.0432,  0.1087, -0.1126],
        [-0.1170,  0.1275, -0.1511,  ...,  0.0907, -0.0218,  0.1988],
        [-0.2288, -0.2510, -0.2127,  ...,  0.0924, -0.2566,  0.2587]])
##########################################################
decoder.blks.block2.addnorm1.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([0.9818, 0.9717, 1.0287, 1.0533, 0.9935, 1.0258, 0.9992, 1.0019, 1.0309,
        0.9813, 1.0220, 0.9780, 0.9813, 1.0242, 1.0069, 1.0201, 1.0260, 1.0024,
        0.9862, 1.0054, 1.0167, 1.0435, 1.0407, 1.0004, 1.0185, 0.9615, 0.9755,
        1.0530, 1.0292, 1.0156, 1.0436, 1.0248, 1.0263, 1.0351, 1.0220, 1.0009,
        1.0056, 1.0385, 1.0555, 0.9863, 1.0131, 1.0143, 1.0036, 1.0155, 1.0605,
        1.0305, 1.0334, 1.0229, 0.9927, 0.9793, 0.9909, 0.9717, 1.0186, 1.0022,
        1.0021, 1.0129, 1.0368, 1.0489, 1.0371, 1.0705, 1.0057, 1.0715, 0.9898,
        1.0040])
##########################################################
decoder.blks.block2.addnorm1.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-7.9606e-03, -1.9514e-02, -2.7791e-03, -2.0229e-02,  1.3576e-02,
         8.5577e-03,  2.5190e-03, -1.8864e-02, -1.0561e-03, -1.4269e-03,
        -6.6653e-03,  1.0187e-02, -1.1943e-02,  1.0310e-02, -6.6087e-03,
        -1.0571e-02,  9.4959e-05,  1.3863e-03, -1.3207e-02,  1.1039e-03,
         9.6819e-03,  2.2952e-03, -3.5124e-03,  9.8895e-04, -7.9818e-03,
         8.2013e-03,  1.0754e-02, -1.5338e-03, -4.9097e-03,  9.7651e-03,
        -1.6073e-03, -1.0966e-02,  1.6416e-02, -4.1709e-03, -3.4534e-03,
         6.8956e-03,  5.3935e-04,  1.3800e-02, -4.0472e-03,  8.9949e-04,
         7.1106e-03, -5.8986e-04,  1.3006e-02,  4.6316e-03,  1.1378e-02,
         1.7754e-02, -7.7993e-03, -3.1206e-03,  3.5299e-04, -1.3185e-02,
        -1.4230e-02,  1.0595e-02,  7.9958e-03, -6.5519e-03,  5.9689e-03,
         1.0764e-03, -4.9517e-07, -5.7703e-03, -7.1834e-03, -2.5847e-02,
        -4.5660e-04,  1.7477e-02, -2.4569e-03,  3.0736e-02])
##########################################################
decoder.blks.block2.attention2.W_q.weight shape: torch.Size([64, 64])
tensor([[-0.0250,  0.1247,  0.0437,  ...,  0.1512, -0.1362, -0.1385],
        [-0.1219,  0.1171, -0.0445,  ...,  0.1520,  0.2141, -0.1741],
        [-0.1443, -0.0537, -0.2102,  ...,  0.0598,  0.0660, -0.0829],
        ...,
        [-0.1130,  0.1523, -0.2142,  ...,  0.0844,  0.1203, -0.0968],
        [-0.1844, -0.1389, -0.1972,  ..., -0.1771,  0.1469, -0.1291],
        [ 0.0012, -0.0739,  0.1951,  ...,  0.1517, -0.1702,  0.0604]])
tensor([[-0.0411,  0.1437,  0.0210,  ...,  0.1035, -0.2017, -0.0962],
        [-0.1627,  0.0609, -0.0253,  ...,  0.1068,  0.2253, -0.1476],
        [-0.1025, -0.0260, -0.2028,  ...,  0.0768,  0.0582, -0.0650],
        ...,
        [-0.1710,  0.1653, -0.2444,  ...,  0.1333,  0.1684, -0.0953],
        [-0.2529, -0.0840, -0.1873,  ..., -0.1514,  0.1047, -0.1090],
        [ 0.0923, -0.1123,  0.1794,  ...,  0.1614, -0.1571,  0.0871]])
##########################################################
decoder.blks.block2.attention2.W_k.weight shape: torch.Size([64, 64])
tensor([[ 0.0828,  0.1787, -0.1815,  ...,  0.2104, -0.1274, -0.0944],
        [ 0.1357,  0.2043,  0.0937,  ...,  0.1686, -0.2076,  0.1509],
        [-0.0330,  0.1210,  0.1024,  ..., -0.0499,  0.1141,  0.0982],
        ...,
        [-0.1441,  0.2135,  0.0758,  ...,  0.0707,  0.1155,  0.0470],
        [-0.1178,  0.0855,  0.2020,  ...,  0.0876,  0.0130,  0.0009],
        [ 0.1730,  0.1430,  0.1953,  ..., -0.1132, -0.1760, -0.1443]])
tensor([[ 0.0888,  0.1923, -0.1753,  ...,  0.2168, -0.1448, -0.0643],
        [ 0.1610,  0.1956,  0.0914,  ...,  0.1581, -0.2318,  0.1233],
        [-0.0647,  0.1219,  0.1054,  ..., -0.0464,  0.1246,  0.1254],
        ...,
        [-0.1300,  0.1992,  0.0696,  ...,  0.0646,  0.1392,  0.0752],
        [-0.0985,  0.0759,  0.2208,  ...,  0.0933,  0.0447, -0.0181],
        [ 0.1705,  0.1424,  0.1861,  ..., -0.0935, -0.1917, -0.1449]])
##########################################################
decoder.blks.block2.attention2.W_v.weight shape: torch.Size([64, 64])
tensor([[ 0.0221,  0.0418, -0.0892,  ...,  0.0701, -0.0799,  0.0776],
        [-0.0411, -0.0617, -0.0106,  ..., -0.0651, -0.0969, -0.1611],
        [-0.0899, -0.1377,  0.1754,  ..., -0.1358, -0.0089, -0.0950],
        ...,
        [-0.1149,  0.0361,  0.0503,  ..., -0.0388, -0.1757,  0.0566],
        [-0.0244, -0.0423, -0.0163,  ...,  0.1142, -0.0165,  0.0019],
        [ 0.1238, -0.0728,  0.0745,  ..., -0.0050,  0.1315,  0.1710]])
tensor([[ 0.0199,  0.0346, -0.0794,  ...,  0.0570, -0.0852,  0.0619],
        [-0.0521, -0.0621,  0.0039,  ..., -0.0498, -0.1122, -0.1552],
        [-0.1025, -0.1443,  0.1820,  ..., -0.1243,  0.0005, -0.1020],
        ...,
        [-0.1199,  0.0341,  0.0360,  ..., -0.0504, -0.1847,  0.0589],
        [-0.0224, -0.0504, -0.0156,  ...,  0.1025, -0.0210, -0.0077],
        [ 0.1209, -0.0668,  0.0893,  ..., -0.0043,  0.1106,  0.1735]])
##########################################################
decoder.blks.block2.attention2.W_o.weight shape: torch.Size([64, 64])
tensor([[-0.1025,  0.1854,  0.0244,  ..., -0.1348, -0.1908,  0.0962],
        [-0.1447, -0.1444, -0.1502,  ..., -0.2021,  0.0442,  0.0562],
        [ 0.0526, -0.1381, -0.1857,  ...,  0.0957,  0.0306, -0.1029],
        ...,
        [-0.1452,  0.0784,  0.1983,  ...,  0.0395, -0.0046,  0.1873],
        [ 0.1893, -0.0845, -0.0427,  ...,  0.0230,  0.2162,  0.0200],
        [ 0.1258, -0.0430,  0.1634,  ...,  0.0866, -0.1375, -0.0578]])
tensor([[-8.5068e-02,  2.1887e-01, -7.2665e-05,  ..., -1.2704e-01,
         -1.8976e-01,  1.1212e-01],
        [-1.4787e-01, -1.4814e-01, -1.5828e-01,  ..., -1.7823e-01,
          4.2756e-02,  6.2166e-02],
        [ 5.4914e-02, -1.5136e-01, -2.0156e-01,  ...,  7.0267e-02,
          3.6629e-02, -6.8766e-02],
        ...,
        [-1.5294e-01,  1.2093e-01,  1.8760e-01,  ...,  4.3914e-02,
         -2.0191e-02,  1.6608e-01],
        [ 1.8994e-01, -8.1241e-02, -4.7483e-02,  ...,  3.1023e-02,
          2.1612e-01, -1.6677e-03],
        [ 1.1600e-01, -6.2355e-02,  1.7476e-01,  ...,  5.5908e-02,
         -1.3116e-01, -7.7326e-02]])
##########################################################
decoder.blks.block2.addnorm2.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([0.9743, 0.9792, 1.0055, 1.0306, 0.9851, 1.0046, 0.9885, 0.9713, 1.0264,
        0.9789, 1.0033, 0.9740, 0.9611, 1.0348, 0.9928, 1.0214, 1.0235, 0.9925,
        0.9843, 1.0088, 0.9814, 1.0363, 1.0049, 0.9595, 1.0011, 0.9416, 0.9707,
        1.0385, 1.0025, 1.0065, 1.0164, 1.0293, 1.0231, 1.0069, 0.9903, 0.9732,
        1.0093, 1.0210, 1.0339, 0.9909, 1.0117, 1.0044, 0.9906, 1.0008, 1.0161,
        1.0217, 1.0159, 1.0050, 0.9832, 0.9774, 0.9675, 0.9786, 0.9982, 1.0048,
        0.9899, 0.9864, 1.0174, 1.0550, 1.0035, 1.0449, 0.9849, 1.0273, 0.9846,
        1.0011])
##########################################################
decoder.blks.block2.addnorm2.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-9.0868e-03, -2.0241e-02, -7.4231e-03, -2.0791e-02,  1.0245e-02,
         6.6058e-03, -3.5136e-03, -1.9475e-02, -3.0428e-03, -1.9645e-03,
        -9.5655e-05,  1.0446e-02, -7.2047e-03,  8.1824e-03, -1.0383e-02,
        -1.1886e-02, -1.6265e-03, -9.6717e-04, -1.4141e-02, -2.6043e-04,
         8.0105e-03,  1.6294e-03, -3.8497e-03,  9.7892e-04, -3.8925e-03,
         1.1073e-02,  4.5307e-03, -2.7715e-03, -8.1928e-03,  1.1268e-02,
         2.9279e-03, -1.3631e-02,  1.4033e-02,  8.5161e-04, -7.9521e-03,
         1.2913e-02, -4.3037e-03,  1.8131e-02, -7.1045e-03, -3.5498e-03,
         1.2620e-02, -1.2521e-02,  1.3249e-02, -3.4423e-03,  1.1512e-02,
         1.5970e-02, -9.5598e-03, -5.4550e-03, -1.6315e-03, -1.1548e-02,
        -1.7872e-02,  5.8179e-03,  1.2480e-02,  1.3150e-04,  3.7817e-03,
        -4.8377e-04,  1.7514e-03, -3.5668e-03, -2.1708e-03, -2.4046e-02,
         2.0685e-03,  1.9268e-02, -8.0448e-03,  2.4333e-02])
##########################################################
decoder.blks.block2.ffn.dense1.weight shape: torch.Size([32, 64])
tensor([[-0.2157,  0.0129,  0.2423,  ...,  0.2031,  0.2306,  0.0691],
        [-0.1007,  0.0613,  0.0710,  ...,  0.2388, -0.0976,  0.0652],
        [-0.1117,  0.1595,  0.1959,  ...,  0.2220, -0.0515, -0.0030],
        ...,
        [ 0.2011, -0.1713, -0.2074,  ..., -0.0148, -0.0408, -0.0867],
        [-0.1247, -0.2217,  0.1757,  ...,  0.2011,  0.0950,  0.1681],
        [-0.1403,  0.1421,  0.0773,  ...,  0.2165, -0.1408,  0.0462]])
tensor([[-0.1637,  0.0458,  0.2103,  ...,  0.1641,  0.1785,  0.1033],
        [-0.1163,  0.0434,  0.0697,  ...,  0.2604, -0.1011,  0.0644],
        [-0.1175,  0.1459,  0.2329,  ...,  0.1757, -0.0619,  0.0289],
        ...,
        [ 0.1697, -0.1596, -0.2084,  ..., -0.0480, -0.0611, -0.0835],
        [-0.0912, -0.2007,  0.1853,  ...,  0.1783,  0.0624,  0.1624],
        [-0.0781,  0.1200,  0.0624,  ...,  0.1843, -0.1571,  0.0552]])
##########################################################
decoder.blks.block2.ffn.dense1.bias shape: torch.Size([32])
tensor([ 0.1068, -0.0478,  0.0804,  0.1127, -0.0902, -0.0627, -0.0596,  0.1168,
        -0.0017,  0.0199, -0.0055,  0.0386,  0.0743,  0.0107,  0.0671, -0.0854,
        -0.0854,  0.0434, -0.0929, -0.0530,  0.1145,  0.0421, -0.1019,  0.1055,
         0.0281,  0.0562,  0.0332, -0.0927,  0.0432,  0.0073,  0.1023,  0.0365])
tensor([ 0.1201, -0.0531,  0.0664,  0.0870, -0.1145, -0.0779, -0.0898,  0.0933,
        -0.0309,  0.0196, -0.0165, -0.0003,  0.0707, -0.0143,  0.0439, -0.0922,
        -0.0846,  0.0249, -0.0811, -0.0837,  0.1018,  0.0056, -0.1068,  0.0998,
         0.0006,  0.0330,  0.0073, -0.1137,  0.0419, -0.0029,  0.0617,  0.0186])
##########################################################
decoder.blks.block2.ffn.dense2.weight shape: torch.Size([64, 32])
tensor([[ 0.1712, -0.2140,  0.1333,  ...,  0.2166, -0.2096,  0.0043],
        [ 0.0887, -0.0861,  0.2210,  ...,  0.2337,  0.2316, -0.1035],
        [ 0.2497, -0.1168,  0.1703,  ...,  0.0407,  0.1487, -0.1634],
        ...,
        [ 0.1115, -0.1904, -0.0347,  ..., -0.1991, -0.0500, -0.0818],
        [-0.0299,  0.2482,  0.1814,  ..., -0.1024,  0.1564, -0.2292],
        [-0.1784, -0.0606,  0.0103,  ..., -0.2239, -0.1135,  0.0255]])
tensor([[ 0.1855, -0.2287,  0.0762,  ...,  0.2134, -0.2330,  0.0029],
        [ 0.0642, -0.0966,  0.2254,  ...,  0.1855,  0.2143, -0.1069],
        [ 0.2420, -0.1105,  0.1985,  ...,  0.0120,  0.1468, -0.1627],
        ...,
        [ 0.1670, -0.1517,  0.0154,  ..., -0.1727, -0.0092, -0.0559],
        [-0.0047,  0.2379,  0.1590,  ..., -0.1125,  0.1583, -0.2083],
        [-0.1683, -0.0623,  0.0151,  ..., -0.1800, -0.0858,  0.0427]])
##########################################################
decoder.blks.block2.ffn.dense2.bias shape: torch.Size([64])
tensor([ 0.0959,  0.0861, -0.0412,  0.1405, -0.1361, -0.0745,  0.0793, -0.1317,
         0.1198,  0.1488, -0.1477,  0.0564, -0.0925,  0.1188,  0.0735, -0.0880,
         0.0415, -0.1136,  0.1286, -0.0788, -0.0377,  0.1691,  0.0854,  0.1387,
        -0.0379,  0.1763,  0.1115, -0.1599, -0.0023,  0.0191, -0.0104, -0.0809,
        -0.1057, -0.0983,  0.0769,  0.1147, -0.1297, -0.1244, -0.1305,  0.0877,
        -0.0134,  0.0139,  0.1175,  0.0760, -0.0894,  0.1311, -0.1139, -0.0865,
        -0.1108, -0.0055, -0.1598, -0.1454, -0.0148,  0.1602, -0.1493,  0.0917,
         0.1553, -0.1020, -0.0209,  0.1460,  0.0881, -0.0454, -0.1292,  0.1523])
tensor([ 0.0812,  0.0610, -0.0472,  0.1363, -0.1286, -0.0720,  0.0517, -0.1477,
         0.1110,  0.1274, -0.1467,  0.0826, -0.0911,  0.1244,  0.0632, -0.0865,
         0.0239, -0.1116,  0.1004, -0.0828, -0.0446,  0.1803,  0.0854,  0.1330,
        -0.0314,  0.1910,  0.1149, -0.1584, -0.0233,  0.0126, -0.0090, -0.0768,
        -0.0942, -0.0943,  0.0661,  0.1303, -0.1305, -0.0993, -0.1288,  0.0873,
         0.0023, -0.0043,  0.1320,  0.0632, -0.0831,  0.1314, -0.1367, -0.0798,
        -0.0838,  0.0111, -0.1660, -0.1544, -0.0136,  0.1754, -0.1482,  0.0901,
         0.1515, -0.0929, -0.0253,  0.1258,  0.1005, -0.0126, -0.1316,  0.1698])
##########################################################
decoder.blks.block2.addnorm3.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0053, 0.9871, 0.9937, 1.0150, 0.9815, 1.0223, 0.9858, 0.9966, 1.0483,
        0.9644, 1.0089, 1.0018, 0.9495, 1.0262, 0.9971, 1.0103, 1.0012, 0.9768,
        1.0154, 1.0159, 0.9888, 1.0168, 1.0182, 0.9851, 1.0392, 0.9821, 0.9895,
        1.0225, 1.0328, 1.0102, 0.9773, 1.0159, 1.0302, 1.0085, 1.0192, 1.0104,
        1.0050, 1.0267, 1.0221, 1.0080, 1.0210, 1.0113, 1.0129, 0.9938, 1.0279,
        1.0159, 0.9955, 0.9920, 1.0148, 0.9827, 0.9974, 0.9568, 1.0074, 1.0252,
        0.9851, 1.0076, 0.9767, 1.0064, 1.0078, 1.0470, 1.0137, 1.0408, 1.0019,
        0.9823])
##########################################################
decoder.blks.block2.addnorm3.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-8.2699e-03, -1.0679e-02, -3.5961e-03, -1.1946e-02,  6.9274e-03,
         5.8024e-03, -1.4088e-02, -1.1491e-02, -3.3361e-03, -1.2490e-03,
        -1.9875e-03,  1.4950e-02, -9.9775e-03,  6.8862e-03, -3.0698e-03,
         2.0652e-03, -6.3842e-03, -4.7348e-03, -6.5195e-03, -3.1573e-03,
         6.2794e-04,  6.7037e-03, -2.8290e-03, -1.0927e-02,  3.0991e-03,
         9.6176e-03,  3.1831e-03, -4.8137e-03, -6.1115e-03,  9.7995e-03,
         4.6045e-03, -6.8094e-03,  5.2548e-03, -3.7707e-03, -6.1617e-03,
         2.0757e-02, -1.2958e-02,  1.2333e-02, -3.1228e-03,  1.0638e-02,
         9.1480e-03, -3.3487e-03,  1.6165e-02,  1.6673e-03, -1.3935e-02,
         8.4191e-04, -2.0706e-02, -5.4705e-03,  7.9065e-04, -4.5732e-03,
        -4.1774e-03, -1.7147e-02,  5.6748e-05,  4.0138e-03,  7.5690e-03,
        -3.5640e-03,  4.0197e-03, -4.2823e-03,  1.2853e-03, -9.0451e-03,
        -8.1511e-03,  2.8969e-02, -1.1349e-02,  1.7748e-02])
##########################################################
decoder.blks.block3.attention1.W_q.weight shape: torch.Size([64, 64])
tensor([[-0.0691,  0.0758,  0.1404,  ...,  0.1877, -0.0326, -0.0757],
        [-0.1031, -0.1113,  0.1783,  ...,  0.1314,  0.1099, -0.1244],
        [-0.0850, -0.1597, -0.1802,  ...,  0.1255,  0.0430,  0.1390],
        ...,
        [ 0.0822, -0.0973, -0.0098,  ..., -0.0767,  0.0151, -0.1456],
        [ 0.1883, -0.0241,  0.1165,  ...,  0.0843, -0.1806,  0.0956],
        [ 0.1467, -0.0226, -0.1144,  ..., -0.0643,  0.1439, -0.2106]])
tensor([[-0.0824,  0.1176,  0.1460,  ...,  0.2355,  0.0019, -0.0740],
        [-0.0919, -0.1011,  0.1584,  ...,  0.0958,  0.0579, -0.1854],
        [-0.1025, -0.1012, -0.1731,  ...,  0.1451,  0.0429,  0.0740],
        ...,
        [ 0.0698, -0.1132, -0.0261,  ..., -0.1202, -0.0024, -0.1464],
        [ 0.2007, -0.0496,  0.1761,  ...,  0.0611, -0.2686,  0.0005],
        [ 0.0885, -0.0301, -0.1132,  ..., -0.0570,  0.1398, -0.2574]])
##########################################################
decoder.blks.block3.attention1.W_k.weight shape: torch.Size([64, 64])
tensor([[-0.1140, -0.1788, -0.2116,  ...,  0.0832, -0.1181, -0.1158],
        [ 0.0787,  0.0302,  0.0830,  ..., -0.1052,  0.0807, -0.1525],
        [-0.0764,  0.1545,  0.0485,  ..., -0.1538,  0.1419, -0.2147],
        ...,
        [-0.0829, -0.1888,  0.2036,  ..., -0.1339, -0.1101, -0.1939],
        [-0.1621, -0.1408, -0.0798,  ...,  0.0013,  0.1951,  0.0651],
        [-0.0210,  0.1961, -0.1125,  ..., -0.1737,  0.1177,  0.1646]])
tensor([[-0.1291, -0.1687, -0.1510,  ...,  0.1016, -0.1589, -0.1228],
        [ 0.0450,  0.0275,  0.1446,  ..., -0.0894,  0.0622, -0.1114],
        [-0.0583,  0.1630,  0.0635,  ..., -0.1219,  0.1697, -0.1605],
        ...,
        [-0.1023, -0.2391,  0.1916,  ..., -0.1639, -0.1104, -0.1835],
        [-0.1802, -0.1722, -0.1321,  ..., -0.0488,  0.1873,  0.0350],
        [-0.0252,  0.2096, -0.0909,  ..., -0.1408,  0.1315,  0.1548]])
##########################################################
decoder.blks.block3.attention1.W_v.weight shape: torch.Size([64, 64])
tensor([[ 0.0518,  0.0608, -0.0615,  ..., -0.0470, -0.1433, -0.1595],
        [ 0.1597,  0.2039, -0.2061,  ..., -0.0797,  0.0496, -0.1001],
        [-0.1244, -0.0443, -0.0842,  ...,  0.0645,  0.0645, -0.2095],
        ...,
        [-0.0395,  0.0505, -0.1057,  ...,  0.0602, -0.1286, -0.0749],
        [ 0.0149,  0.0835,  0.1724,  ...,  0.1060,  0.0199, -0.1500],
        [ 0.0082,  0.1256,  0.0204,  ...,  0.0714, -0.1205,  0.0181]])
tensor([[ 0.0773,  0.0162, -0.0519,  ..., -0.0521, -0.1825, -0.1439],
        [ 0.1913,  0.1627, -0.2076,  ..., -0.1289, -0.0015, -0.1355],
        [-0.1148, -0.0541, -0.0744,  ...,  0.1145,  0.0638, -0.2092],
        ...,
        [-0.0258,  0.0541, -0.1123,  ...,  0.0833, -0.1389, -0.0169],
        [ 0.0478,  0.0909,  0.1633,  ...,  0.0861,  0.0106, -0.1068],
        [ 0.0011,  0.1520,  0.0039,  ...,  0.0887, -0.0977,  0.0430]])
##########################################################
decoder.blks.block3.attention1.W_o.weight shape: torch.Size([64, 64])
tensor([[-0.2103, -0.1486, -0.0401,  ..., -0.2131, -0.1988, -0.1521],
        [ 0.1318,  0.0712, -0.1000,  ...,  0.0831, -0.0643,  0.0529],
        [ 0.1127,  0.1811,  0.1943,  ...,  0.0569, -0.0748, -0.0218],
        ...,
        [-0.0093,  0.1429,  0.1092,  ...,  0.1594, -0.0807, -0.1498],
        [-0.1817, -0.1447, -0.0326,  ...,  0.0306,  0.0006,  0.0831],
        [-0.0967,  0.0828,  0.1044,  ..., -0.1256, -0.2036,  0.0643]])
tensor([[-0.1986, -0.1671, -0.0092,  ..., -0.2146, -0.1830, -0.1967],
        [ 0.1384,  0.0607, -0.0956,  ...,  0.0942, -0.0349,  0.0958],
        [ 0.1793,  0.1930,  0.2020,  ...,  0.0641, -0.1010, -0.0040],
        ...,
        [-0.0093,  0.1381,  0.0966,  ...,  0.1288, -0.1040, -0.1517],
        [-0.1361, -0.1394, -0.0500,  ...,  0.0209,  0.0102,  0.0794],
        [-0.0661,  0.0823,  0.1311,  ..., -0.1540, -0.2317, -0.0313]])
##########################################################
decoder.blks.block3.addnorm1.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0150, 0.9977, 1.0362, 1.0307, 0.9878, 1.0395, 0.9698, 1.0191, 1.0513,
        0.9734, 0.9923, 1.0179, 0.9656, 1.0280, 1.0092, 1.0212, 1.0205, 1.0301,
        1.0251, 1.0246, 1.0162, 1.0425, 0.9967, 1.0190, 1.0401, 1.0029, 1.0179,
        1.0500, 1.0220, 1.0155, 1.0040, 1.0168, 0.9974, 1.0151, 1.0207, 1.0149,
        0.9994, 1.0330, 1.0243, 1.0111, 1.0092, 1.0616, 1.0469, 1.0025, 1.0324,
        1.0421, 1.0216, 1.0001, 1.0065, 1.0049, 0.9997, 0.9972, 1.0098, 1.0038,
        0.9911, 1.0285, 0.9877, 0.9851, 1.0476, 1.0407, 0.9669, 1.0218, 1.0137,
        1.0581])
##########################################################
decoder.blks.block3.addnorm1.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-0.0024, -0.0263,  0.0004, -0.0126, -0.0060, -0.0168, -0.0190, -0.0004,
        -0.0027,  0.0024,  0.0124, -0.0041, -0.0197,  0.0028,  0.0044,  0.0073,
         0.0038, -0.0046, -0.0006, -0.0071, -0.0051,  0.0008,  0.0061,  0.0043,
        -0.0022, -0.0007,  0.0080, -0.0046,  0.0105,  0.0116,  0.0221, -0.0028,
         0.0109,  0.0008, -0.0047,  0.0012,  0.0047,  0.0169, -0.0005,  0.0101,
        -0.0039, -0.0107,  0.0153, -0.0053, -0.0027, -0.0029, -0.0120,  0.0194,
         0.0034,  0.0060, -0.0113,  0.0007,  0.0166, -0.0065, -0.0221, -0.0054,
        -0.0008, -0.0017, -0.0071, -0.0021, -0.0027,  0.0027, -0.0011, -0.0097])
##########################################################
decoder.blks.block3.attention2.W_q.weight shape: torch.Size([64, 64])
tensor([[-0.0796,  0.0483,  0.1363,  ...,  0.1566, -0.1803, -0.0987],
        [-0.1642,  0.1449,  0.1910,  ..., -0.1378, -0.1909, -0.1045],
        [ 0.0787,  0.1950,  0.1592,  ..., -0.0626,  0.0071,  0.1842],
        ...,
        [-0.0613,  0.0038,  0.1439,  ..., -0.0056, -0.0372, -0.0442],
        [ 0.1343,  0.2051,  0.1064,  ...,  0.1289,  0.1337,  0.1236],
        [-0.0041, -0.1269,  0.0846,  ..., -0.1371, -0.0754, -0.0082]])
tensor([[-0.1485,  0.0502,  0.1176,  ...,  0.1754, -0.1833, -0.1051],
        [-0.1630,  0.1078,  0.2355,  ..., -0.1324, -0.2391, -0.0727],
        [ 0.0782,  0.2292,  0.1220,  ..., -0.0432,  0.0187,  0.1047],
        ...,
        [-0.0408, -0.0184,  0.1856,  ...,  0.0121, -0.0583, -0.0133],
        [ 0.1489,  0.2118,  0.0827,  ...,  0.1018,  0.1654,  0.1382],
        [-0.0213, -0.1034,  0.1803,  ..., -0.1795, -0.1348,  0.0034]])
##########################################################
decoder.blks.block3.attention2.W_k.weight shape: torch.Size([64, 64])
tensor([[ 0.2040, -0.2071,  0.0213,  ...,  0.0270, -0.2057,  0.1255],
        [ 0.1742,  0.0724, -0.0544,  ..., -0.1049, -0.1892, -0.0736],
        [ 0.1896, -0.1045, -0.1257,  ...,  0.1155, -0.0809, -0.0738],
        ...,
        [ 0.0558, -0.1528,  0.0775,  ...,  0.0181,  0.0662, -0.0902],
        [ 0.2074,  0.0523,  0.1979,  ..., -0.1349, -0.0332, -0.1392],
        [-0.0622, -0.0790, -0.1488,  ...,  0.2121, -0.2045, -0.1094]])
tensor([[ 0.0918, -0.2429, -0.0357,  ...,  0.0200, -0.1628,  0.1541],
        [ 0.1567,  0.0550, -0.1185,  ..., -0.1193, -0.1726, -0.0833],
        [ 0.1412, -0.0485, -0.0064,  ...,  0.1605, -0.0868, -0.0319],
        ...,
        [ 0.0673, -0.1824,  0.0303,  ...,  0.0235,  0.0917, -0.0730],
        [ 0.1889,  0.0503,  0.2247,  ..., -0.1322, -0.0244, -0.1418],
        [-0.0431, -0.0804, -0.1782,  ...,  0.2071, -0.2260, -0.1161]])
##########################################################
decoder.blks.block3.attention2.W_v.weight shape: torch.Size([64, 64])
tensor([[-0.1180,  0.1010, -0.0785,  ...,  0.0135,  0.1997, -0.1754],
        [ 0.1283,  0.1196, -0.1210,  ..., -0.1150,  0.1433,  0.1118],
        [ 0.1037, -0.0975, -0.1202,  ..., -0.0658,  0.2036,  0.1521],
        ...,
        [ 0.0642, -0.1962,  0.1308,  ...,  0.2034,  0.1180, -0.1579],
        [ 0.0441,  0.0191,  0.1455,  ...,  0.1782,  0.2107,  0.1773],
        [-0.0670, -0.0918, -0.0957,  ..., -0.0211, -0.1678,  0.1084]])
tensor([[-0.1042,  0.1043, -0.0510,  ...,  0.0227,  0.1725, -0.1840],
        [ 0.1349,  0.1245, -0.1379,  ..., -0.1173,  0.1260,  0.0985],
        [ 0.1076, -0.0967, -0.1542,  ..., -0.0668,  0.2000,  0.1495],
        ...,
        [ 0.0838, -0.1938,  0.1379,  ...,  0.2056,  0.0987, -0.1559],
        [ 0.0389,  0.0296,  0.1360,  ...,  0.1885,  0.1832,  0.1744],
        [-0.0632, -0.0841, -0.0889,  ..., -0.0100, -0.1555,  0.1277]])
##########################################################
decoder.blks.block3.attention2.W_o.weight shape: torch.Size([64, 64])
tensor([[ 0.0539,  0.1572,  0.1540,  ...,  0.1592,  0.1137, -0.2091],
        [ 0.1103, -0.1725, -0.1707,  ..., -0.2120, -0.1682, -0.0235],
        [ 0.0018, -0.1595, -0.0749,  ..., -0.0454, -0.0704,  0.1103],
        ...,
        [ 0.0186,  0.1355, -0.1031,  ..., -0.1574,  0.1461, -0.1171],
        [ 0.1108, -0.1772,  0.1782,  ..., -0.1133,  0.0277, -0.0522],
        [ 0.0071,  0.1134,  0.0417,  ..., -0.2061, -0.0315, -0.0423]])
tensor([[ 0.0378,  0.1532,  0.1584,  ...,  0.1475,  0.0837, -0.2117],
        [ 0.1023, -0.1763, -0.1680,  ..., -0.1901, -0.1334, -0.0216],
        [ 0.0287, -0.1577, -0.0798,  ..., -0.0562, -0.0716,  0.1689],
        ...,
        [ 0.0066,  0.1394, -0.1059,  ..., -0.1736,  0.1442, -0.0560],
        [ 0.1105, -0.1935,  0.1784,  ..., -0.0727,  0.0157, -0.0398],
        [ 0.0029,  0.1117,  0.0396,  ..., -0.2096, -0.0604, -0.0580]])
##########################################################
decoder.blks.block3.addnorm2.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0037, 1.0004, 1.0158, 1.0029, 0.9845, 1.0340, 0.9423, 1.0025, 1.0240,
        0.9407, 0.9890, 1.0021, 0.9592, 1.0146, 0.9904, 1.0110, 1.0018, 1.0150,
        1.0275, 1.0100, 1.0075, 1.0105, 0.9946, 1.0100, 1.0266, 0.9710, 1.0049,
        1.0359, 1.0065, 1.0155, 0.9931, 1.0198, 0.9937, 1.0063, 1.0056, 1.0083,
        0.9915, 1.0199, 0.9973, 1.0023, 0.9880, 1.0236, 1.0254, 0.9599, 1.0083,
        1.0269, 0.9980, 0.9875, 0.9986, 0.9717, 0.9745, 0.9846, 0.9888, 0.9802,
        0.9853, 1.0215, 0.9636, 0.9713, 1.0314, 1.0261, 0.9623, 0.9940, 1.0109,
        1.0482])
##########################################################
decoder.blks.block3.addnorm2.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-0.0003, -0.0241,  0.0013, -0.0129, -0.0074, -0.0130, -0.0149,  0.0054,
         0.0054,  0.0032,  0.0136,  0.0006, -0.0140,  0.0099,  0.0083,  0.0114,
         0.0051, -0.0050,  0.0026,  0.0011, -0.0062,  0.0058,  0.0059,  0.0038,
         0.0008, -0.0004,  0.0083, -0.0035,  0.0129,  0.0145,  0.0198,  0.0028,
         0.0100,  0.0026, -0.0055, -0.0036,  0.0026,  0.0197, -0.0024,  0.0074,
        -0.0012, -0.0095,  0.0147, -0.0011, -0.0023, -0.0020, -0.0095,  0.0115,
         0.0043,  0.0072, -0.0124,  0.0006,  0.0167, -0.0022, -0.0212, -0.0071,
         0.0045, -0.0056, -0.0044, -0.0010, -0.0007,  0.0038, -0.0002, -0.0045])
##########################################################
decoder.blks.block3.ffn.dense1.weight shape: torch.Size([32, 64])
tensor([[ 0.1403, -0.2351, -0.0478,  ...,  0.2486,  0.0754, -0.0570],
        [-0.2408, -0.1358, -0.0532,  ...,  0.1300, -0.0182,  0.0930],
        [ 0.0720,  0.1687, -0.2450,  ..., -0.0588,  0.1050, -0.1664],
        ...,
        [-0.0735,  0.1180,  0.1777,  ..., -0.1052,  0.1162, -0.1146],
        [-0.2373,  0.0488, -0.1211,  ...,  0.1119, -0.2470, -0.0280],
        [ 0.0913, -0.0292,  0.1061,  ...,  0.1349, -0.0445, -0.2187]])
tensor([[ 0.1715, -0.2193, -0.0196,  ...,  0.2577,  0.0817, -0.1791],
        [-0.2414, -0.1516, -0.0295,  ...,  0.1477, -0.0066,  0.0647],
        [ 0.0207,  0.2020, -0.2056,  ..., -0.0400,  0.1454, -0.2069],
        ...,
        [-0.0868,  0.1053,  0.1609,  ..., -0.0906,  0.0909, -0.0750],
        [-0.2535,  0.0372, -0.0861,  ...,  0.1221, -0.2150, -0.0629],
        [ 0.0849, -0.0542,  0.0610,  ...,  0.1193,  0.0195, -0.1710]])
##########################################################
decoder.blks.block3.ffn.dense1.bias shape: torch.Size([32])
tensor([-0.0396, -0.0800,  0.0985,  0.0470, -0.0112,  0.0805,  0.0244, -0.1182,
        -0.0809, -0.0601,  0.0059,  0.0917, -0.0641,  0.0958, -0.0751,  0.0632,
        -0.0938, -0.0201,  0.0033, -0.0150,  0.0311,  0.0753,  0.0876,  0.0465,
        -0.0237, -0.1233,  0.0689,  0.0737, -0.0817,  0.0859, -0.1045,  0.0866])
tensor([-0.0519, -0.0701,  0.0756,  0.0332, -0.0083,  0.0423,  0.0248, -0.1424,
        -0.1106, -0.0599, -0.0543,  0.0933, -0.0723,  0.0671, -0.0929,  0.0621,
        -0.1081, -0.0302,  0.0059, -0.0071,  0.0097,  0.0632,  0.0775,  0.0333,
        -0.0173, -0.1402,  0.0718,  0.0670, -0.1250,  0.0788, -0.1087,  0.0845])
##########################################################
decoder.blks.block3.ffn.dense2.weight shape: torch.Size([64, 32])
tensor([[-0.2035, -0.1084, -0.0236,  ...,  0.0870,  0.2155,  0.1735],
        [-0.2024, -0.1808,  0.0411,  ...,  0.1795, -0.0080,  0.1056],
        [ 0.1317, -0.1376,  0.1455,  ...,  0.0141,  0.2359, -0.0931],
        ...,
        [-0.0472,  0.0138,  0.1082,  ...,  0.2169, -0.0312, -0.0835],
        [-0.0589,  0.1662, -0.1242,  ...,  0.0176, -0.0081, -0.1829],
        [-0.0883,  0.0517,  0.1360,  ..., -0.0646, -0.1863, -0.0999]])
tensor([[-0.2039, -0.1148,  0.0031,  ...,  0.0671,  0.2154,  0.1581],
        [-0.1859, -0.1816,  0.0344,  ...,  0.1782, -0.0012,  0.0682],
        [ 0.1357, -0.1539,  0.1573,  ...,  0.0095,  0.2318, -0.0926],
        ...,
        [-0.0932, -0.0190,  0.1188,  ...,  0.1617, -0.1054, -0.0830],
        [-0.0693,  0.1454, -0.1078,  ...,  0.0161, -0.0007, -0.1900],
        [-0.1138,  0.0665,  0.0928,  ..., -0.0859, -0.1957, -0.0855]])
##########################################################
decoder.blks.block3.ffn.dense2.bias shape: torch.Size([64])
tensor([ 0.0824,  0.1072, -0.0958, -0.1442,  0.1595,  0.0058, -0.0156,  0.0509,
        -0.0497,  0.0040,  0.0035, -0.1031, -0.1359, -0.1721, -0.0069, -0.1319,
         0.1061,  0.0198,  0.0516, -0.0158, -0.1615, -0.0536,  0.0446,  0.1026,
         0.0093,  0.1157,  0.0592, -0.1054,  0.0099, -0.1587, -0.1384,  0.0800,
        -0.1249, -0.1045,  0.1103, -0.1298,  0.0413,  0.1259,  0.1751,  0.1004,
        -0.0032, -0.0969,  0.0889,  0.0200,  0.1208, -0.1440,  0.0204, -0.0437,
        -0.1016, -0.1693, -0.1229, -0.1545,  0.0635,  0.1669,  0.1031, -0.0541,
        -0.1540,  0.0767,  0.1338, -0.1410, -0.1761,  0.0182,  0.0395,  0.1613])
tensor([ 0.0890,  0.0807, -0.0899, -0.1623,  0.1433,  0.0130, -0.0302,  0.0448,
        -0.0571, -0.0016,  0.0159, -0.0995, -0.1379, -0.1578,  0.0067, -0.1309,
         0.1129,  0.0149,  0.0505, -0.0162, -0.1573, -0.0265,  0.0515,  0.0954,
         0.0142,  0.1214,  0.0687, -0.1227, -0.0027, -0.1301, -0.1130,  0.0669,
        -0.1056, -0.0986,  0.1050, -0.1440,  0.0370,  0.1470,  0.1689,  0.1010,
        -0.0049, -0.1026,  0.1057,  0.0266,  0.1083, -0.1573,  0.0151, -0.0303,
        -0.0941, -0.1477, -0.1450, -0.1575,  0.0759,  0.1629,  0.0897, -0.0699,
        -0.1485,  0.0709,  0.1326, -0.1426, -0.1694,  0.0186,  0.0550,  0.1250])
##########################################################
decoder.blks.block3.addnorm3.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([0.9739, 0.9979, 1.0558, 1.0164, 0.9838, 1.0305, 0.9923, 0.9907, 1.0416,
        1.0183, 0.9933, 0.9920, 1.0334, 1.0253, 1.0555, 1.0348, 1.0226, 1.0068,
        1.0260, 0.9957, 1.0096, 1.0199, 0.9964, 0.9968, 1.0278, 1.0062, 0.9883,
        1.0378, 0.9951, 0.9981, 0.9924, 1.0178, 1.0512, 1.0164, 1.0432, 1.0334,
        0.9999, 1.0234, 0.9987, 1.0246, 1.0376, 1.0242, 1.0050, 0.9819, 1.0037,
        1.0762, 0.9998, 0.9714, 1.0703, 1.0148, 0.9941, 0.9775, 0.9960, 1.0103,
        0.9916, 1.0592, 0.9955, 1.0190, 1.0004, 1.0457, 0.9909, 1.0190, 1.0030,
        1.0062])
##########################################################
decoder.blks.block3.addnorm3.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 0.0044, -0.0242, -0.0026, -0.0081, -0.0066, -0.0109, -0.0224, -0.0042,
        -0.0074,  0.0045,  0.0083,  0.0052, -0.0357, -0.0143,  0.0090,  0.0011,
         0.0093, -0.0119,  0.0080, -0.0117,  0.0016,  0.0035,  0.0009,  0.0002,
         0.0051,  0.0003,  0.0052,  0.0027,  0.0154, -0.0025,  0.0077,  0.0089,
         0.0243,  0.0036,  0.0088, -0.0235, -0.0053,  0.0216, -0.0028,  0.0122,
        -0.0023, -0.0075,  0.0046, -0.0002, -0.0181, -0.0035,  0.0005,  0.0103,
        -0.0029,  0.0116, -0.0133, -0.0021,  0.0111,  0.0011, -0.0042,  0.0059,
         0.0065, -0.0014, -0.0025, -0.0069, -0.0047,  0.0002,  0.0008,  0.0018])
##########################################################
decoder.blks.block4.attention1.W_q.weight shape: torch.Size([64, 64])
tensor([[ 0.0991,  0.1416,  0.1118,  ..., -0.0123,  0.1151, -0.1952],
        [-0.1224,  0.1650, -0.1619,  ...,  0.0931,  0.0133,  0.0561],
        [-0.1012, -0.1777, -0.0408,  ..., -0.1274,  0.0250,  0.1338],
        ...,
        [-0.1382, -0.0085, -0.0122,  ...,  0.0467, -0.1091, -0.0212],
        [-0.1034, -0.1500, -0.1460,  ..., -0.0778, -0.0181,  0.1999],
        [ 0.1758, -0.0684,  0.1269,  ..., -0.1695,  0.1695,  0.0775]])
tensor([[ 0.1117,  0.1883,  0.0447,  ..., -0.0090,  0.1366, -0.2195],
        [-0.1543,  0.1354, -0.1908,  ...,  0.1362,  0.0432,  0.0218],
        [-0.1138, -0.1794, -0.0203,  ..., -0.1453,  0.0457,  0.1309],
        ...,
        [-0.0808, -0.0217,  0.0068,  ...,  0.0682, -0.0646, -0.0249],
        [-0.1198, -0.2210, -0.1079,  ..., -0.0547, -0.0254,  0.2388],
        [ 0.1061, -0.0023,  0.0198,  ..., -0.1622,  0.2010,  0.0603]])
##########################################################
decoder.blks.block4.attention1.W_k.weight shape: torch.Size([64, 64])
tensor([[-0.1316, -0.1885,  0.0824,  ...,  0.0675, -0.1851,  0.0119],
        [ 0.0905,  0.1075,  0.0174,  ...,  0.1812, -0.0011,  0.0322],
        [ 0.0864,  0.0777,  0.0506,  ..., -0.1952, -0.1086,  0.1257],
        ...,
        [-0.1329, -0.0964, -0.1933,  ..., -0.1003, -0.1761, -0.0462],
        [-0.1585, -0.0017, -0.0723,  ...,  0.1187,  0.0522,  0.0040],
        [-0.0420,  0.0068, -0.0448,  ..., -0.2085,  0.1838, -0.0174]])
tensor([[-0.1065, -0.2328,  0.0562,  ..., -0.0054, -0.2343,  0.0374],
        [ 0.0631,  0.1535, -0.0108,  ...,  0.1737,  0.0160, -0.0102],
        [ 0.1117,  0.0581,  0.0012,  ..., -0.2149, -0.1258,  0.1125],
        ...,
        [-0.1408, -0.0833, -0.2045,  ..., -0.1128, -0.1653,  0.0291],
        [-0.1614, -0.0351, -0.0627,  ...,  0.1059,  0.0743,  0.0378],
        [-0.0306,  0.0021, -0.0271,  ..., -0.2134,  0.1504,  0.0193]])
##########################################################
decoder.blks.block4.attention1.W_v.weight shape: torch.Size([64, 64])
tensor([[ 0.0636, -0.2159,  0.1387,  ...,  0.0606,  0.1620, -0.1273],
        [ 0.0893, -0.1643, -0.1626,  ..., -0.0017,  0.1586, -0.0247],
        [-0.0500,  0.0587, -0.1459,  ..., -0.0104,  0.1531,  0.0331],
        ...,
        [-0.0938, -0.1620,  0.1250,  ...,  0.1938, -0.1574,  0.1119],
        [ 0.1944, -0.0295,  0.0461,  ..., -0.1919,  0.1668,  0.1783],
        [ 0.1023,  0.2091, -0.1217,  ...,  0.1605, -0.0265, -0.0995]])
tensor([[ 0.0753, -0.2272,  0.1197,  ...,  0.0418,  0.1512, -0.1178],
        [ 0.1033, -0.1595, -0.1455,  ..., -0.0269,  0.1559, -0.0299],
        [-0.0686,  0.0478, -0.1361,  ...,  0.0015,  0.1515,  0.0109],
        ...,
        [-0.1126, -0.1706,  0.1023,  ...,  0.1658, -0.1841,  0.1104],
        [ 0.1516, -0.0440, -0.0506,  ..., -0.2129,  0.1565,  0.1604],
        [ 0.1199,  0.1842, -0.1790,  ...,  0.1349, -0.0376, -0.1124]])
##########################################################
decoder.blks.block4.attention1.W_o.weight shape: torch.Size([64, 64])
tensor([[-0.1826, -0.2065,  0.0828,  ...,  0.1194,  0.1246,  0.1187],
        [-0.2083, -0.0878, -0.1365,  ..., -0.1616,  0.1450,  0.1440],
        [-0.1426, -0.0837,  0.0412,  ..., -0.0575,  0.0421, -0.0090],
        ...,
        [-0.0188,  0.1010,  0.0725,  ...,  0.0251,  0.2157,  0.1234],
        [ 0.1395, -0.0697, -0.0079,  ...,  0.0703, -0.0725,  0.0547],
        [-0.2163, -0.1680, -0.0821,  ..., -0.1776,  0.1434,  0.0224]])
tensor([[-0.1223, -0.1960,  0.0520,  ...,  0.1130,  0.1401,  0.1153],
        [-0.2116, -0.0728, -0.1289,  ..., -0.1549,  0.1439,  0.1301],
        [-0.1559, -0.0872,  0.0426,  ..., -0.0394,  0.0704,  0.0092],
        ...,
        [ 0.0231,  0.1228,  0.1085,  ..., -0.0200,  0.2085,  0.1592],
        [ 0.0999, -0.0756,  0.0161,  ...,  0.0831, -0.1017,  0.0649],
        [-0.2159, -0.1887, -0.0762,  ..., -0.1908,  0.1254,  0.0536]])
##########################################################
decoder.blks.block4.addnorm1.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0084, 1.0077, 1.0477, 0.9822, 0.9920, 1.0235, 1.0348, 1.0080, 1.0666,
        1.0032, 0.9848, 1.0191, 1.0215, 0.9825, 1.0295, 1.0357, 1.0515, 1.0186,
        1.0373, 1.0059, 1.0287, 1.0336, 0.9730, 1.0180, 1.0229, 1.0203, 1.0224,
        1.0512, 1.0100, 1.0094, 0.9423, 1.0878, 1.0286, 1.0173, 1.0119, 1.0472,
        0.9884, 1.0118, 0.9945, 0.9910, 1.0017, 1.0108, 1.0087, 1.0086, 1.0328,
        1.0233, 1.0455, 0.9732, 1.0649, 1.0568, 0.9898, 0.9958, 0.9827, 0.9989,
        1.0039, 1.0580, 0.9929, 1.0313, 0.9842, 1.0422, 1.0051, 1.0073, 0.9910,
        1.0293])
##########################################################
decoder.blks.block4.addnorm1.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-5.0080e-03, -6.9019e-03, -7.4059e-03, -1.5789e-04, -1.3909e-02,
         2.4744e-03, -7.3826e-03, -2.0639e-03, -9.7179e-03, -2.5412e-03,
        -4.3068e-03,  1.2353e-02, -9.1192e-03, -1.8777e-02, -1.1106e-02,
        -9.2824e-03,  2.5060e-03,  1.3801e-02,  7.4095e-03, -1.0777e-03,
        -2.9098e-03, -1.1371e-02,  3.2780e-03,  2.8392e-03, -6.0602e-03,
        -6.0909e-03, -5.9175e-03, -3.6808e-03,  1.1589e-02,  6.1708e-03,
        -1.0471e-02,  4.9556e-03,  1.5557e-02, -3.2887e-03,  9.7867e-03,
        -8.7479e-03, -4.3362e-03,  7.3020e-03, -8.8832e-03,  9.4056e-03,
        -1.5006e-02,  2.0799e-03,  9.6840e-05,  1.6767e-03,  1.2662e-02,
         1.4816e-02, -6.2078e-03, -4.8565e-03, -7.2810e-04,  4.1436e-03,
        -6.1752e-04, -1.8441e-04, -1.0264e-03,  1.5541e-02,  3.5006e-03,
         1.3465e-02,  2.1322e-02, -3.7543e-03,  9.0940e-03, -6.6176e-03,
         7.4851e-03,  9.6983e-03, -1.9881e-03,  4.2512e-03])
##########################################################
decoder.blks.block4.attention2.W_q.weight shape: torch.Size([64, 64])
tensor([[ 0.1217, -0.1858,  0.1654,  ..., -0.1121,  0.2093,  0.1673],
        [-0.0456,  0.2057, -0.1528,  ...,  0.0043,  0.1855, -0.0920],
        [ 0.0538,  0.1224,  0.0374,  ..., -0.0657,  0.1736, -0.0709],
        ...,
        [ 0.1416, -0.0501,  0.0664,  ..., -0.1606,  0.1604, -0.1389],
        [ 0.1394, -0.0838,  0.1753,  ...,  0.1203, -0.1719,  0.0201],
        [ 0.2102,  0.1272,  0.0699,  ..., -0.1300, -0.1573,  0.0142]])
tensor([[ 0.1470, -0.1974,  0.1611,  ..., -0.1031,  0.1979,  0.1854],
        [ 0.0120,  0.1977, -0.1724,  ..., -0.0004,  0.1875, -0.0854],
        [ 0.0453,  0.1106,  0.0666,  ..., -0.0691,  0.1783, -0.0899],
        ...,
        [ 0.1450, -0.0827,  0.0234,  ..., -0.1286,  0.1745, -0.1438],
        [ 0.1084, -0.1489,  0.1351,  ...,  0.1588, -0.2034,  0.0281],
        [ 0.2285,  0.1771,  0.0880,  ..., -0.1464, -0.1657, -0.0111]])
##########################################################
decoder.blks.block4.attention2.W_k.weight shape: torch.Size([64, 64])
tensor([[ 0.0447, -0.1905, -0.0354,  ..., -0.1265, -0.0583, -0.1835],
        [-0.1789,  0.1132,  0.1675,  ..., -0.1557, -0.0220, -0.2026],
        [-0.0428, -0.0598,  0.0468,  ..., -0.1301, -0.0322, -0.1231],
        ...,
        [ 0.0345, -0.1110,  0.2101,  ...,  0.0534,  0.0189, -0.0689],
        [ 0.1774, -0.0561,  0.0254,  ...,  0.1286,  0.1264, -0.1492],
        [ 0.1218, -0.0118, -0.1972,  ..., -0.1129,  0.2081,  0.0584]])
tensor([[ 0.0686, -0.1967, -0.0929,  ..., -0.1396, -0.0406, -0.1362],
        [-0.1964,  0.1602,  0.1654,  ..., -0.1379,  0.0050, -0.2050],
        [-0.0569, -0.0356,  0.1539,  ..., -0.1142, -0.0080, -0.0687],
        ...,
        [ 0.0425, -0.0773,  0.2854,  ...,  0.0601, -0.0056, -0.0875],
        [ 0.1970,  0.0387,  0.0885,  ...,  0.2256,  0.1245, -0.1578],
        [ 0.0758, -0.0965, -0.2641,  ..., -0.1774,  0.2568,  0.0565]])
##########################################################
decoder.blks.block4.attention2.W_v.weight shape: torch.Size([64, 64])
tensor([[ 0.1213, -0.0023, -0.1671,  ...,  0.0025,  0.0191,  0.0345],
        [-0.1352,  0.0683,  0.0783,  ..., -0.1832, -0.2084,  0.0804],
        [-0.0803,  0.1289,  0.0513,  ..., -0.1378, -0.0632,  0.0227],
        ...,
        [ 0.1883,  0.1134,  0.1453,  ...,  0.1245, -0.1520, -0.1908],
        [-0.0981, -0.1840,  0.0920,  ..., -0.1814,  0.0668,  0.2030],
        [ 0.1807,  0.0808,  0.0375,  ...,  0.1982, -0.0678,  0.0745]])
tensor([[ 0.1259, -0.0021, -0.1572,  ...,  0.0288,  0.0374,  0.0439],
        [-0.1368,  0.0688,  0.0689,  ..., -0.1757, -0.1902,  0.0942],
        [-0.0904,  0.1171,  0.0290,  ..., -0.1662, -0.0808,  0.0259],
        ...,
        [ 0.1896,  0.1104,  0.1306,  ...,  0.1217, -0.1692, -0.1909],
        [-0.0958, -0.1816,  0.1184,  ..., -0.1778,  0.0321,  0.1886],
        [ 0.1717,  0.0713,  0.0430,  ...,  0.1805, -0.0600,  0.0727]])
##########################################################
decoder.blks.block4.attention2.W_o.weight shape: torch.Size([64, 64])
tensor([[-0.1139,  0.0684, -0.1777,  ...,  0.0079, -0.1094, -0.1674],
        [-0.1823, -0.1702, -0.0240,  ..., -0.1492, -0.1935,  0.0770],
        [ 0.0827,  0.0639,  0.2076,  ...,  0.1170,  0.0444, -0.0220],
        ...,
        [ 0.1525,  0.1220, -0.1056,  ..., -0.0514,  0.0776,  0.0346],
        [ 0.2028,  0.1312,  0.0858,  ..., -0.2025, -0.2016, -0.1901],
        [ 0.0629,  0.1465, -0.1765,  ...,  0.1980,  0.0360, -0.0372]])
tensor([[-0.1033,  0.0622, -0.1966,  ...,  0.0212, -0.0997, -0.1775],
        [-0.1722, -0.1550, -0.0270,  ..., -0.1423, -0.1993,  0.0820],
        [ 0.0642,  0.0339,  0.2028,  ...,  0.1033,  0.0774, -0.0604],
        ...,
        [ 0.1466,  0.1120, -0.0936,  ..., -0.0487,  0.0852,  0.0174],
        [ 0.2112,  0.1231,  0.0793,  ..., -0.2127, -0.1828, -0.2113],
        [ 0.0480,  0.1424, -0.1523,  ...,  0.2057,  0.0182, -0.0345]])
##########################################################
decoder.blks.block4.addnorm2.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0180, 0.9882, 1.0340, 0.9742, 1.0008, 1.0059, 1.0119, 0.9975, 1.0367,
        0.9884, 0.9671, 1.0164, 1.0191, 0.9903, 1.0176, 1.0036, 1.0182, 1.0130,
        1.0234, 0.9995, 1.0091, 1.0193, 0.9822, 1.0114, 1.0292, 0.9943, 1.0030,
        1.0262, 1.0050, 0.9924, 0.9390, 1.0471, 0.9976, 0.9929, 1.0078, 1.0333,
        0.9834, 1.0028, 0.9993, 0.9826, 0.9824, 0.9860, 0.9731, 0.9634, 1.0210,
        1.0099, 1.0229, 0.9682, 1.0391, 1.0286, 0.9751, 0.9940, 0.9629, 0.9947,
        0.9935, 1.0377, 0.9667, 1.0201, 0.9775, 1.0057, 0.9883, 1.0114, 0.9755,
        1.0124])
##########################################################
decoder.blks.block4.addnorm2.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-0.0011, -0.0039, -0.0095,  0.0019, -0.0086,  0.0118, -0.0103, -0.0006,
        -0.0119, -0.0111,  0.0057,  0.0151, -0.0067, -0.0093, -0.0096, -0.0070,
         0.0074,  0.0186,  0.0026,  0.0051,  0.0006, -0.0056,  0.0076,  0.0028,
         0.0029, -0.0055,  0.0018, -0.0038,  0.0172,  0.0049, -0.0076,  0.0048,
         0.0078, -0.0064,  0.0110, -0.0034, -0.0038,  0.0073, -0.0080,  0.0090,
        -0.0116, -0.0011,  0.0055,  0.0033,  0.0151,  0.0194, -0.0008,  0.0003,
        -0.0010,  0.0075, -0.0007,  0.0057,  0.0001,  0.0194,  0.0043,  0.0086,
         0.0168, -0.0047,  0.0080, -0.0086,  0.0069,  0.0106, -0.0041,  0.0108])
##########################################################
decoder.blks.block4.ffn.dense1.weight shape: torch.Size([32, 64])
tensor([[-0.1791,  0.2373, -0.0470,  ..., -0.0007,  0.1654, -0.2012],
        [ 0.0064, -0.1993, -0.0121,  ..., -0.0761,  0.2493, -0.2196],
        [-0.1152, -0.1981,  0.2080,  ...,  0.1849,  0.1272, -0.0169],
        ...,
        [ 0.0397, -0.1630, -0.0241,  ...,  0.0848, -0.0580, -0.1742],
        [-0.0185, -0.2199, -0.1588,  ...,  0.0048, -0.2251, -0.1297],
        [ 0.1532,  0.2179, -0.1333,  ...,  0.2231,  0.0229, -0.1191]])
tensor([[-0.1379,  0.2057, -0.0670,  ..., -0.0404,  0.1006, -0.1876],
        [ 0.0044, -0.1718, -0.1012,  ..., -0.0432,  0.2232, -0.2265],
        [-0.1265, -0.2170,  0.2428,  ...,  0.1453,  0.1651, -0.0197],
        ...,
        [ 0.0242, -0.2561, -0.0786,  ...,  0.0993, -0.1248, -0.2100],
        [ 0.0207, -0.2356, -0.1597,  ...,  0.0041, -0.2345, -0.1590],
        [ 0.1830,  0.1732, -0.0735,  ...,  0.1889,  0.0511, -0.1496]])
##########################################################
decoder.blks.block4.ffn.dense1.bias shape: torch.Size([32])
tensor([ 0.0039,  0.0678, -0.0851,  0.0333, -0.1182,  0.1204, -0.0301,  0.1182,
        -0.0277, -0.0965, -0.1242, -0.0943,  0.0630, -0.0917, -0.0487,  0.0422,
         0.0069, -0.0925, -0.0349, -0.0793,  0.0638, -0.0700, -0.0306, -0.1241,
         0.0222,  0.0892, -0.0030, -0.0382,  0.0947, -0.0985,  0.1128, -0.0605])
tensor([ 0.0132,  0.0373, -0.1113,  0.0137, -0.1237,  0.1150, -0.0418,  0.1195,
        -0.0692, -0.1017, -0.1510, -0.1063,  0.0273, -0.0908, -0.0656,  0.0342,
        -0.0456, -0.0874, -0.0444, -0.0818,  0.0616, -0.0513, -0.0274, -0.1201,
         0.0223,  0.0927, -0.0268, -0.0322,  0.0756, -0.0916,  0.0935, -0.1105])
##########################################################
decoder.blks.block4.ffn.dense2.weight shape: torch.Size([64, 32])
tensor([[ 0.1259, -0.0631,  0.0972,  ...,  0.0312, -0.0513,  0.0344],
        [-0.0197, -0.0940, -0.0676,  ..., -0.0031, -0.2213,  0.0022],
        [ 0.2416,  0.0242, -0.1727,  ..., -0.2235,  0.1795,  0.0697],
        ...,
        [-0.0061,  0.0754,  0.2438,  ..., -0.2428,  0.0136,  0.1954],
        [-0.1361, -0.2211, -0.1392,  ..., -0.0032, -0.2276, -0.2291],
        [-0.0950, -0.0139,  0.1267,  ..., -0.1391, -0.1126,  0.1236]])
tensor([[ 0.1531, -0.0246,  0.1037,  ...,  0.0612, -0.0201,  0.0082],
        [-0.0284, -0.1443, -0.0615,  ...,  0.0204, -0.1800, -0.0697],
        [ 0.2048,  0.0690, -0.2136,  ..., -0.1457,  0.1968,  0.0606],
        ...,
        [ 0.0068,  0.1507,  0.2057,  ..., -0.2843, -0.0440,  0.1359],
        [-0.1486, -0.2331, -0.1760,  ..., -0.0042, -0.2216, -0.2738],
        [-0.0731,  0.0121,  0.1773,  ..., -0.1241, -0.1323,  0.1768]])
##########################################################
decoder.blks.block4.ffn.dense2.bias shape: torch.Size([64])
tensor([-0.1322, -0.0229,  0.1687, -0.1436, -0.1240,  0.1251, -0.1568,  0.0872,
        -0.0826,  0.0343, -0.1647, -0.0597, -0.1758,  0.1430,  0.0636,  0.0527,
        -0.1509, -0.1737,  0.0756, -0.0796,  0.1073,  0.0365,  0.1287, -0.0053,
        -0.1353,  0.1215, -0.1258, -0.1340, -0.1218, -0.1089,  0.0801, -0.0082,
        -0.1461,  0.0315, -0.0507,  0.0502, -0.0804, -0.0673, -0.1440, -0.1211,
         0.0306,  0.0625, -0.1314,  0.1301,  0.1047, -0.0730, -0.0847, -0.1746,
         0.1118,  0.0501,  0.0887,  0.1249,  0.1489, -0.1488, -0.1013, -0.0365,
        -0.0642,  0.1753, -0.0096,  0.1196, -0.1298,  0.0096,  0.0979,  0.0815])
tensor([-0.1166, -0.0251,  0.1835, -0.1399, -0.1475,  0.1219, -0.1760,  0.0855,
        -0.0978,  0.0265, -0.1548, -0.0382, -0.1863,  0.1337,  0.0619,  0.0307,
        -0.1473, -0.1309,  0.0782, -0.0615,  0.0985,  0.0275,  0.1435,  0.0088,
        -0.1473,  0.1160, -0.1307, -0.1399, -0.1053, -0.1084,  0.0630, -0.0112,
        -0.1244,  0.0363, -0.0478,  0.0628, -0.0838, -0.0721, -0.1443, -0.1062,
         0.0141,  0.0619, -0.1321,  0.1253,  0.1239, -0.0524, -0.0962, -0.1690,
         0.1141,  0.0388,  0.0707,  0.1305,  0.1544, -0.1162, -0.1020, -0.0256,
        -0.0628,  0.1798,  0.0149,  0.1194, -0.0988,  0.0137,  0.1027,  0.0998])
##########################################################
decoder.blks.block4.addnorm3.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0249, 0.9922, 1.0183, 0.9959, 1.0462, 1.0125, 1.0767, 0.9810, 1.0335,
        1.0005, 0.9789, 1.0630, 1.0395, 1.0678, 1.0186, 1.0350, 1.0169, 0.9899,
        1.0579, 1.0283, 1.0372, 1.0475, 1.0110, 1.0300, 1.0173, 1.0235, 1.0874,
        1.0173, 1.0090, 1.0136, 0.9928, 1.1014, 0.9763, 1.0056, 1.0360, 1.0338,
        1.0030, 1.0192, 1.0413, 1.0379, 0.9811, 1.0237, 0.9776, 1.0029, 1.0797,
        1.0084, 1.0412, 0.9931, 1.1081, 1.0493, 0.9667, 0.9980, 0.9728, 1.0054,
        0.9751, 1.0579, 1.0066, 1.0583, 0.9869, 0.9985, 0.9689, 1.0650, 0.9916,
        1.0401])
##########################################################
decoder.blks.block4.addnorm3.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([-0.0053, -0.0068, -0.0049, -0.0057, -0.0028,  0.0169, -0.0185, -0.0076,
        -0.0123, -0.0168,  0.0206,  0.0118, -0.0077, -0.0074, -0.0019, -0.0177,
        -0.0045,  0.0065,  0.0086,  0.0099,  0.0065, -0.0128,  0.0161,  0.0018,
        -0.0067,  0.0022, -0.0109, -0.0022,  0.0123, -0.0009, -0.0113, -0.0048,
         0.0180, -0.0064,  0.0116,  0.0250, -0.0149,  0.0034, -0.0138, -0.0014,
        -0.0101, -0.0074, -0.0048, -0.0055,  0.0101,  0.0061, -0.0085,  0.0031,
         0.0004, -0.0121, -0.0052,  0.0119,  0.0035,  0.0153, -0.0092,  0.0074,
         0.0050,  0.0064,  0.0033, -0.0085,  0.0073,  0.0140, -0.0145,  0.0005])
##########################################################
decoder.blks.block5.attention1.W_q.weight shape: torch.Size([64, 64])
tensor([[-0.0528,  0.0847, -0.0303,  ..., -0.0154,  0.0353, -0.1796],
        [-0.0577, -0.1600,  0.1239,  ...,  0.1713, -0.0724,  0.0713],
        [-0.0433, -0.1774, -0.1331,  ...,  0.0490, -0.1914, -0.1054],
        ...,
        [ 0.1965, -0.1588, -0.0659,  ...,  0.1251,  0.1888,  0.1525],
        [-0.0016,  0.1102, -0.0469,  ...,  0.1352,  0.1724,  0.1054],
        [-0.1179, -0.1319,  0.0134,  ..., -0.0947, -0.1262,  0.0677]])
tensor([[-0.0690,  0.0585, -0.0288,  ..., -0.0410,  0.0186, -0.2127],
        [-0.0573, -0.1571,  0.1002,  ...,  0.1560, -0.0521,  0.0853],
        [-0.1049, -0.1994, -0.1151,  ...,  0.0255, -0.2174, -0.0285],
        ...,
        [ 0.2962, -0.0965,  0.0193,  ...,  0.1252,  0.2593,  0.0912],
        [ 0.0014,  0.1213, -0.0501,  ...,  0.1421,  0.1797,  0.0891],
        [-0.0528, -0.0396,  0.0703,  ..., -0.0703, -0.0875,  0.0199]])
##########################################################
decoder.blks.block5.attention1.W_k.weight shape: torch.Size([64, 64])
tensor([[ 0.0029, -0.1510, -0.0938,  ...,  0.2031, -0.0859,  0.0109],
        [-0.1301,  0.0337, -0.1493,  ..., -0.0356, -0.1732, -0.0802],
        [-0.0045, -0.0484, -0.0126,  ..., -0.2142,  0.1388, -0.1299],
        ...,
        [ 0.1777, -0.2075, -0.0922,  ..., -0.0772, -0.1437,  0.1545],
        [ 0.1130, -0.1638,  0.1693,  ...,  0.1544,  0.1632,  0.1406],
        [-0.0738, -0.1475, -0.2130,  ...,  0.1867,  0.0328,  0.0316]])
tensor([[-0.0345, -0.2330, -0.0579,  ...,  0.1429, -0.1710,  0.0221],
        [-0.1838,  0.0504, -0.1788,  ..., -0.0471, -0.1464, -0.0783],
        [ 0.0192, -0.0692,  0.0659,  ..., -0.2336,  0.1558, -0.1681],
        ...,
        [ 0.2121, -0.2312, -0.1223,  ..., -0.0768, -0.1361,  0.1589],
        [ 0.1805, -0.0632,  0.1901,  ...,  0.2166,  0.1689,  0.0810],
        [-0.0380, -0.2010, -0.2239,  ...,  0.1420,  0.0017,  0.0825]])
##########################################################
decoder.blks.block5.attention1.W_v.weight shape: torch.Size([64, 64])
tensor([[ 0.2010,  0.1948,  0.1923,  ...,  0.1777, -0.1552, -0.0193],
        [-0.0944,  0.0560, -0.0624,  ...,  0.0103,  0.0946,  0.0898],
        [-0.1762, -0.0685,  0.0757,  ...,  0.1229, -0.1787, -0.0298],
        ...,
        [ 0.1166, -0.1775, -0.1008,  ..., -0.0439,  0.2092,  0.0204],
        [-0.1778,  0.0102,  0.0723,  ...,  0.1058,  0.0198, -0.1642],
        [ 0.0723,  0.1919, -0.0213,  ...,  0.1916, -0.1487,  0.1366]])
tensor([[ 0.1891,  0.1693,  0.1804,  ...,  0.1939, -0.1482, -0.0322],
        [-0.0963,  0.0544, -0.0601,  ..., -0.0140,  0.0886,  0.1176],
        [-0.1630, -0.0207,  0.0949,  ...,  0.1115, -0.1727, -0.0533],
        ...,
        [ 0.1234, -0.2483, -0.0929,  ..., -0.1007,  0.2103,  0.0259],
        [-0.1411,  0.0196,  0.0707,  ...,  0.1301,  0.0055, -0.1259],
        [ 0.0763,  0.1811,  0.0098,  ...,  0.2040, -0.1353,  0.1382]])
##########################################################
decoder.blks.block5.attention1.W_o.weight shape: torch.Size([64, 64])
tensor([[-0.0970, -0.1753,  0.2067,  ..., -0.1340, -0.1428, -0.0846],
        [ 0.0817, -0.0438,  0.1290,  ..., -0.1442, -0.1527, -0.0250],
        [ 0.1697, -0.0803, -0.1014,  ..., -0.2016,  0.1537, -0.0714],
        ...,
        [-0.0391,  0.2138, -0.0439,  ..., -0.0632,  0.1315,  0.1933],
        [-0.0375,  0.0332,  0.0772,  ..., -0.2070, -0.0525, -0.1574],
        [ 0.1462, -0.0108, -0.1600,  ..., -0.0913,  0.0615, -0.0853]])
tensor([[-0.0889, -0.1943,  0.1846,  ..., -0.1791, -0.0862, -0.1024],
        [ 0.1065, -0.0922,  0.1766,  ..., -0.1930, -0.1530, -0.0349],
        [ 0.1548, -0.0774, -0.1053,  ..., -0.2650,  0.1312, -0.0259],
        ...,
        [-0.0470,  0.1740, -0.0551,  ..., -0.0708,  0.1092,  0.2384],
        [-0.0444,  0.0364,  0.0937,  ..., -0.0990, -0.0484, -0.1900],
        [ 0.0727,  0.0313, -0.1817,  ..., -0.0256,  0.0330, -0.1292]])
##########################################################
decoder.blks.block5.addnorm1.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.0006, 1.0040, 1.0200, 0.9650, 1.0176, 0.9806, 1.0995, 0.9431, 1.0374,
        0.9855, 1.0219, 0.9729, 1.0911, 1.0590, 1.0522, 1.0963, 0.9869, 0.9850,
        1.0302, 1.0808, 1.0488, 1.0082, 0.9900, 1.0287, 0.9903, 1.0425, 1.0647,
        1.0779, 1.0000, 1.0264, 1.0083, 1.0615, 0.9504, 0.9945, 1.0277, 0.9754,
        0.9704, 1.0085, 1.0056, 0.9799, 0.9656, 1.0241, 0.9697, 1.0535, 1.0654,
        1.0490, 1.0254, 0.9631, 1.0981, 1.0463, 0.9373, 1.0027, 0.9736, 1.0321,
        0.9737, 1.0257, 0.9585, 1.0087, 1.0185, 0.9967, 0.9838, 1.0314, 0.9328,
        1.0540])
##########################################################
decoder.blks.block5.addnorm1.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 1.5567e-02, -6.5182e-03,  2.0936e-02, -1.7034e-02,  8.9710e-05,
         4.6508e-03, -2.6733e-02, -1.1209e-02,  8.3573e-03, -1.5079e-02,
         1.7970e-02,  1.0684e-02, -7.1872e-03,  6.6404e-03,  5.2049e-03,
        -1.3006e-02, -3.9466e-03, -1.4613e-04, -8.9869e-03,  1.2546e-02,
         1.8032e-02,  5.0610e-04,  1.2043e-02,  3.7261e-03, -3.3240e-03,
         7.2804e-03, -6.9867e-03, -3.3931e-03,  1.1575e-02, -5.8485e-03,
         1.7406e-02, -9.9004e-03, -1.0576e-02, -1.5488e-03,  1.8826e-02,
         1.1382e-02, -1.1926e-03, -3.0135e-04, -1.8278e-02, -1.5449e-02,
        -7.8388e-03,  9.0991e-03, -9.6959e-03, -1.4265e-02,  1.6717e-02,
         6.8284e-03, -1.5126e-02,  1.9785e-02,  8.1754e-03, -1.6007e-02,
        -1.2943e-02,  1.0972e-02, -7.4193e-03,  1.0267e-02, -4.4362e-03,
         2.5372e-02,  1.2472e-02, -4.9390e-03, -1.6352e-02, -2.9622e-03,
        -7.1978e-03, -5.2941e-03, -1.5850e-02, -6.0374e-03])
##########################################################
decoder.blks.block5.attention2.W_q.weight shape: torch.Size([64, 64])
tensor([[-0.1772,  0.1649, -0.0923,  ...,  0.0135, -0.1310,  0.0445],
        [ 0.0147,  0.0501, -0.0915,  ...,  0.0647, -0.1811,  0.0259],
        [-0.1520, -0.2075,  0.0256,  ...,  0.1296,  0.0233,  0.1908],
        ...,
        [-0.0263, -0.1704,  0.0966,  ...,  0.1085,  0.1134, -0.1282],
        [-0.1855,  0.0781, -0.0621,  ..., -0.0308, -0.2128, -0.0266],
        [-0.0216, -0.0834, -0.0124,  ..., -0.1587,  0.1902, -0.2088]])
tensor([[-0.1512,  0.1372, -0.0643,  ..., -0.1200, -0.1555,  0.0675],
        [ 0.0355, -0.0093, -0.0666,  ...,  0.0878, -0.1870,  0.0432],
        [-0.1364, -0.2006, -0.0112,  ...,  0.1917,  0.0161,  0.1671],
        ...,
        [-0.0275, -0.1677,  0.0351,  ...,  0.0997,  0.1010, -0.1030],
        [-0.1838,  0.1203, -0.1193,  ..., -0.0608, -0.2113, -0.0516],
        [ 0.0322, -0.1115, -0.0609,  ..., -0.1941,  0.1624, -0.1799]])
##########################################################
decoder.blks.block5.attention2.W_k.weight shape: torch.Size([64, 64])
tensor([[ 7.0135e-02,  1.8603e-01, -6.1947e-02,  ...,  1.7292e-05,
         -4.4355e-02,  1.2187e-01],
        [-2.0511e-01,  2.0064e-01, -9.6248e-02,  ..., -1.5265e-01,
          1.2083e-01,  1.1876e-01],
        [ 1.5374e-01, -1.6390e-01,  2.0789e-01,  ..., -5.8494e-02,
         -1.6110e-01,  3.7474e-02],
        ...,
        [-1.2438e-01,  1.3613e-01, -2.7994e-02,  ..., -1.9859e-01,
          2.0104e-01, -7.3164e-02],
        [ 8.6803e-02, -1.9592e-01, -9.4385e-02,  ...,  2.0737e-01,
          1.1864e-01, -8.9420e-02],
        [ 1.5597e-01,  1.5106e-01, -1.4176e-01,  ..., -7.5488e-02,
          2.0734e-01,  1.3211e-01]])
tensor([[ 0.0227,  0.1603, -0.0781,  ..., -0.0441,  0.0041,  0.0874],
        [-0.1450,  0.1958, -0.0871,  ..., -0.1268,  0.1190,  0.1063],
        [ 0.1774, -0.1826,  0.1760,  ..., -0.0734, -0.1868,  0.0428],
        ...,
        [-0.1623,  0.1145, -0.0569,  ..., -0.2604,  0.1825, -0.1231],
        [ 0.1669, -0.2364, -0.1198,  ...,  0.1947,  0.1212, -0.1519],
        [ 0.0537,  0.1665, -0.2060,  ..., -0.0391,  0.2582,  0.1329]])
##########################################################
decoder.blks.block5.attention2.W_v.weight shape: torch.Size([64, 64])
tensor([[ 0.0908,  0.0075, -0.0890,  ..., -0.0119, -0.1590, -0.0347],
        [-0.1662, -0.0912, -0.1477,  ..., -0.1261, -0.1916,  0.1355],
        [ 0.2049, -0.1288, -0.1802,  ...,  0.1898, -0.0734, -0.0188],
        ...,
        [-0.2147, -0.0481, -0.2136,  ...,  0.0946, -0.0409,  0.2084],
        [ 0.0971, -0.1241,  0.0924,  ..., -0.0524,  0.1667, -0.1924],
        [ 0.0460,  0.0936,  0.1956,  ...,  0.1263,  0.0254, -0.1759]])
tensor([[ 0.1003,  0.0156, -0.0739,  ..., -0.0082, -0.1724, -0.0501],
        [-0.1773, -0.0961, -0.1273,  ..., -0.1172, -0.1983,  0.1360],
        [ 0.2044, -0.1283, -0.1964,  ...,  0.1730, -0.0578, -0.0397],
        ...,
        [-0.2379, -0.0638, -0.2118,  ...,  0.0619, -0.0403,  0.2113],
        [ 0.1040, -0.1094,  0.1058,  ..., -0.0412,  0.1323, -0.1809],
        [ 0.0640,  0.0978,  0.2242,  ...,  0.1410,  0.0040, -0.1785]])
##########################################################
decoder.blks.block5.attention2.W_o.weight shape: torch.Size([64, 64])
tensor([[ 0.1622,  0.2101, -0.0772,  ...,  0.0835, -0.1935, -0.1328],
        [ 0.1965,  0.1396,  0.2119,  ..., -0.1706, -0.0401,  0.1545],
        [-0.0560,  0.1609,  0.0615,  ..., -0.2065,  0.1747,  0.0236],
        ...,
        [-0.0409,  0.1955, -0.0532,  ...,  0.1031,  0.0257,  0.1661],
        [-0.0649, -0.0689,  0.0679,  ..., -0.0733,  0.0406,  0.0114],
        [-0.1000,  0.1563, -0.2154,  ...,  0.0331, -0.0255,  0.2048]])
tensor([[ 0.1630,  0.1546, -0.0597,  ...,  0.0635, -0.1932, -0.1616],
        [ 0.1961,  0.1638,  0.2062,  ..., -0.2048, -0.0752,  0.1589],
        [-0.0430,  0.1658,  0.0848,  ..., -0.2110,  0.1788, -0.0496],
        ...,
        [-0.0423,  0.1965, -0.0501,  ...,  0.1047,  0.0313,  0.1789],
        [-0.0793, -0.1077,  0.0618,  ..., -0.0595,  0.0390,  0.0044],
        [-0.0847,  0.1581, -0.2082,  ...,  0.0512, -0.0167,  0.2121]])
##########################################################
decoder.blks.block5.addnorm2.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([0.9888, 0.9810, 1.0065, 0.9751, 1.0433, 0.9505, 1.0550, 0.9285, 1.0016,
        0.9869, 1.0055, 0.9901, 1.0770, 1.0320, 1.0411, 1.0415, 1.0126, 0.9701,
        1.0305, 1.0714, 1.0348, 0.9677, 0.9850, 0.9885, 1.0229, 1.0392, 1.0385,
        1.0657, 0.9979, 1.0185, 1.0072, 1.0174, 0.9443, 0.9638, 1.0051, 0.9809,
        0.9741, 1.0032, 0.9870, 0.9881, 0.9505, 1.0267, 0.9564, 1.0560, 1.0613,
        1.0147, 1.0154, 0.9723, 1.0796, 1.0211, 0.9430, 0.9832, 0.9629, 1.0263,
        0.9804, 0.9898, 0.9462, 1.0065, 1.0057, 0.9930, 0.9935, 0.9907, 0.9050,
        1.0453])
##########################################################
decoder.blks.block5.addnorm2.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 0.0122, -0.0023,  0.0141, -0.0192,  0.0042,  0.0027, -0.0256, -0.0046,
         0.0104, -0.0113,  0.0218,  0.0124, -0.0086,  0.0086,  0.0025, -0.0098,
        -0.0105,  0.0004, -0.0041,  0.0161,  0.0247, -0.0006,  0.0062,  0.0006,
        -0.0084,  0.0057, -0.0060, -0.0030,  0.0085, -0.0060,  0.0082, -0.0074,
        -0.0078,  0.0087,  0.0236,  0.0111, -0.0043,  0.0004, -0.0176, -0.0183,
        -0.0078,  0.0060, -0.0031, -0.0197,  0.0173,  0.0029, -0.0109,  0.0227,
         0.0116, -0.0133, -0.0012,  0.0102, -0.0070,  0.0063, -0.0031,  0.0135,
         0.0134,  0.0029, -0.0157, -0.0065, -0.0041, -0.0024, -0.0127, -0.0018])
##########################################################
decoder.blks.block5.ffn.dense1.weight shape: torch.Size([32, 64])
tensor([[-0.0573, -0.1359, -0.2323,  ..., -0.1040,  0.0165,  0.1911],
        [ 0.0105,  0.1350,  0.1224,  ...,  0.0060, -0.0072,  0.1160],
        [-0.1628,  0.1403,  0.1133,  ...,  0.0924,  0.2010,  0.1542],
        ...,
        [-0.1916, -0.0138, -0.0148,  ..., -0.0093, -0.0659, -0.2330],
        [-0.2173,  0.0465, -0.1536,  ...,  0.1917,  0.1512, -0.1607],
        [-0.2438,  0.1418, -0.2441,  ...,  0.0825,  0.2177,  0.0315]])
tensor([[-0.1099, -0.0699, -0.2212,  ..., -0.1124,  0.0322,  0.1747],
        [ 0.0208,  0.1517,  0.1080,  ..., -0.0091, -0.0624,  0.0841],
        [-0.1786,  0.0362,  0.0822,  ...,  0.1051,  0.2610,  0.1879],
        ...,
        [-0.1396, -0.0213,  0.0756,  ...,  0.0239, -0.0505, -0.2429],
        [-0.1942,  0.0450, -0.1278,  ...,  0.1320,  0.2390, -0.0946],
        [-0.2449,  0.2067, -0.3126,  ...,  0.0172,  0.2751,  0.1832]])
##########################################################
decoder.blks.block5.ffn.dense1.bias shape: torch.Size([32])
tensor([ 0.0685, -0.0968,  0.1033,  0.1091, -0.0774, -0.0505,  0.0045,  0.0237,
         0.0007, -0.0540, -0.0229, -0.0658,  0.0600, -0.0970,  0.0649, -0.0757,
        -0.0632, -0.0052,  0.0108, -0.0480,  0.0019,  0.0334, -0.0021, -0.0569,
         0.0764, -0.0888, -0.0084, -0.0324, -0.0331,  0.0667,  0.0784,  0.0377])
tensor([ 0.0210, -0.0922,  0.0780,  0.1247, -0.0786, -0.0663,  0.0046,  0.0491,
        -0.0333, -0.0436, -0.0603, -0.0785,  0.0113, -0.1112,  0.0701, -0.0699,
        -0.0639, -0.0043,  0.0133, -0.0729, -0.0103,  0.0541,  0.0018, -0.0719,
         0.0598, -0.0938, -0.0142, -0.0438, -0.0337,  0.0666,  0.0606,  0.0571])
##########################################################
decoder.blks.block5.ffn.dense2.weight shape: torch.Size([64, 32])
tensor([[-0.0933,  0.2242, -0.0953,  ...,  0.0960,  0.2443, -0.2081],
        [-0.1702, -0.2100,  0.2233,  ..., -0.0072,  0.0340, -0.1506],
        [-0.0530, -0.1535, -0.0536,  ..., -0.0268, -0.0564,  0.0740],
        ...,
        [ 0.0672,  0.2052,  0.2273,  ...,  0.1218,  0.2355,  0.1313],
        [ 0.1223,  0.1095,  0.0796,  ..., -0.1165,  0.1850, -0.0604],
        [ 0.2320,  0.1081, -0.0362,  ..., -0.2181, -0.0878, -0.2495]])
tensor([[-0.0298,  0.2373, -0.1011,  ...,  0.1604,  0.2481, -0.2195],
        [-0.0498, -0.2212, -0.0177,  ...,  0.1117,  0.0727, -0.1356],
        [-0.0700, -0.1537, -0.1298,  ..., -0.0412,  0.0101,  0.1016],
        ...,
        [ 0.1450,  0.1901,  0.0823,  ...,  0.1413,  0.1779,  0.1227],
        [ 0.0865,  0.1278,  0.0163,  ..., -0.1531, -0.0907, -0.1458],
        [ 0.2379,  0.0944,  0.1270,  ..., -0.2032, -0.1849, -0.1832]])
##########################################################
decoder.blks.block5.ffn.dense2.bias shape: torch.Size([64])
tensor([-0.0982,  0.1007, -0.0149,  0.0044,  0.0434, -0.0871,  0.1405,  0.0240,
        -0.0316, -0.0944,  0.0157, -0.0900, -0.1232, -0.0995, -0.0913, -0.0134,
        -0.1105, -0.1207, -0.0291,  0.0610,  0.1342,  0.0042,  0.0216,  0.0417,
        -0.0084,  0.1050,  0.0215, -0.1376,  0.0401, -0.0176, -0.1083, -0.1087,
         0.1432, -0.0555, -0.0811,  0.0388,  0.1401,  0.0579,  0.1240, -0.0188,
         0.0562, -0.1157, -0.1282, -0.1743,  0.0148, -0.1052, -0.0255, -0.0410,
        -0.0346,  0.1595, -0.0659, -0.0808,  0.0535,  0.1646, -0.0268,  0.0017,
         0.0462, -0.0746, -0.0635,  0.0124,  0.0317,  0.0186,  0.1283, -0.1378])
tensor([-0.0934,  0.0975,  0.0115, -0.0089,  0.0428, -0.0756,  0.0961,  0.0266,
        -0.0212, -0.1052,  0.0362, -0.0838, -0.1468, -0.0875, -0.1127, -0.0293,
        -0.1338, -0.1209, -0.0374,  0.0604,  0.1483,  0.0228,  0.0333,  0.0281,
        -0.0181,  0.1042,  0.0373, -0.1088,  0.0689, -0.0252, -0.0848, -0.1057,
         0.1484, -0.0317, -0.0612,  0.0329,  0.1280,  0.0418,  0.0943, -0.0393,
         0.0594, -0.1118, -0.1122, -0.2004,  0.0286, -0.1059, -0.0263, -0.0015,
        -0.0416,  0.1654, -0.0812, -0.0917,  0.0287,  0.1484, -0.0390,  0.0219,
         0.0642, -0.0865, -0.1052,  0.0031,  0.0101, -0.0017,  0.1155, -0.1314])
##########################################################
decoder.blks.block5.addnorm3.ln.weight shape: torch.Size([64])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
tensor([1.1479, 1.4243, 1.3813, 1.1132, 1.4387, 1.2791, 1.3944, 1.1801, 1.2790,
        1.1022, 1.3505, 1.3347, 1.4116, 1.2872, 1.3233, 1.3665, 1.4023, 1.2207,
        1.3594, 1.4166, 1.2602, 1.2031, 1.2210, 1.2356, 1.3125, 1.2435, 1.3903,
        1.4133, 1.1776, 1.3661, 1.3469, 1.3491, 1.3124, 1.1226, 1.2755, 1.1716,
        1.2259, 1.2223, 1.3560, 1.2413, 1.4106, 1.3852, 1.4264, 1.4733, 1.3016,
        1.3161, 1.2459, 1.2931, 1.2117, 1.3007, 1.1274, 1.2519, 1.1236, 1.3892,
        1.3100, 1.2920, 1.2325, 1.3750, 1.2872, 1.2571, 1.4833, 1.2619, 1.3015,
        1.4157])
##########################################################
decoder.blks.block5.addnorm3.ln.bias shape: torch.Size([64])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor([ 0.1388, -0.1502,  0.1886, -0.1310,  0.1457,  0.2110, -0.1630, -0.1477,
        -0.1513, -0.1258,  0.1714,  0.1871, -0.0248,  0.1699,  0.1799, -0.1647,
         0.1682, -0.1375, -0.1639,  0.1781,  0.1413, -0.1513,  0.1351,  0.1276,
         0.1634,  0.1362, -0.1287, -0.1661,  0.1254, -0.1183,  0.1965, -0.1134,
        -0.2014, -0.1319,  0.1680,  0.1411, -0.1503,  0.1545, -0.0613, -0.1544,
        -0.0295, -0.0443, -0.1618, -0.1119,  0.1477, -0.1370, -0.1383,  0.1688,
         0.1207, -0.1611, -0.1299,  0.1663,  0.1359,  0.1780, -0.1694,  0.1579,
         0.1703, -0.1964, -0.1822, -0.1396, -0.1368,  0.1238,  0.0894, -0.0684])
##########################################################
decoder.dense.weight shape: torch.Size([166, 64])
tensor([[-0.0982, -0.1538, -0.1189,  ..., -0.0055,  0.0025, -0.0423],
        [ 0.0441,  0.0320,  0.0927,  ..., -0.0636, -0.1177, -0.1400],
        [ 0.1479, -0.0085, -0.0598,  ...,  0.1341, -0.1471, -0.0417],
        ...,
        [-0.1260,  0.1595,  0.0425,  ...,  0.0295, -0.0903,  0.1299],
        [ 0.0757, -0.0650,  0.0576,  ...,  0.0578,  0.0991, -0.1062],
        [-0.0370,  0.0608, -0.0756,  ...,  0.0861, -0.0404, -0.1142]])
tensor([[-0.1514, -0.0389, -0.1899,  ..., -0.0564, -0.0554, -0.0266],
        [-0.0122,  0.0919, -0.0227,  ..., -0.1226, -0.1582, -0.1079],
        [ 0.0977,  0.0703, -0.1261,  ...,  0.0705, -0.1646,  0.0223],
        ...,
        [-0.1767,  0.2285, -0.0356,  ..., -0.0296, -0.1491,  0.1787],
        [ 0.0202,  0.0247, -0.0342,  ..., -0.0010,  0.0255, -0.0417],
        [-0.0943,  0.1309, -0.1398,  ...,  0.0103, -0.0649, -0.0614]])
##########################################################
decoder.dense.bias shape: torch.Size([166])
tensor([ 3.2727e-02, -2.4946e-02,  1.1674e-01, -5.5938e-02, -8.3086e-02,
         8.4768e-02,  2.1168e-02,  3.7586e-02,  1.0750e-01,  1.0184e-01,
         5.0488e-02, -2.1582e-02,  9.4533e-02, -3.7132e-02,  8.4294e-02,
        -2.4442e-02,  6.9129e-02,  5.8578e-02, -6.6557e-02, -6.4726e-02,
        -1.1381e-01,  1.2199e-01,  1.0919e-01, -1.0953e-01, -9.4150e-02,
        -7.0724e-02,  2.2215e-02,  9.2689e-02,  1.2079e-01, -9.5053e-02,
        -1.2658e-02,  2.0707e-02,  1.1429e-01, -1.0837e-01, -6.2373e-02,
        -9.6767e-02, -1.1843e-01, -1.1849e-01,  2.3775e-02, -8.4374e-02,
        -8.3139e-02,  1.2157e-01,  1.2086e-01, -4.6357e-02,  6.6669e-02,
        -4.2831e-02,  7.8786e-02,  5.2021e-02,  1.2638e-04, -8.4701e-02,
         9.9098e-03,  7.2725e-02,  8.3685e-05, -7.3615e-02,  1.7110e-02,
         3.2243e-02,  5.0800e-02,  1.0622e-01,  9.4221e-02,  8.6245e-02,
        -1.2061e-01,  6.9492e-02,  3.3157e-02, -4.1450e-02, -4.9679e-04,
         9.0147e-02,  3.2720e-02, -7.6813e-02, -6.3208e-02,  1.1054e-02,
         1.8766e-02, -1.0364e-01, -9.4720e-02,  1.1250e-01,  6.1240e-02,
        -8.1503e-02,  1.1641e-02,  5.8132e-02,  8.8445e-02, -7.5439e-03,
        -4.1063e-02,  9.8017e-02, -8.7088e-03,  8.2011e-02,  1.6530e-02,
         4.5812e-02, -7.6797e-02, -7.7164e-02,  1.0339e-01,  3.1471e-02,
        -8.9292e-04, -4.1387e-02, -8.2425e-02, -1.0974e-01,  7.9079e-02,
         7.0265e-02, -7.7765e-02, -2.2070e-03,  4.0269e-02,  1.7481e-02,
        -1.0134e-01,  7.8462e-02, -3.0672e-02, -3.9486e-02,  1.0940e-01,
        -7.4090e-02,  1.0116e-01, -9.2400e-02, -8.7494e-02, -3.6949e-02,
        -7.2625e-02,  6.7417e-03,  5.8281e-02,  5.3660e-02,  1.5481e-03,
         8.7889e-02,  5.5100e-02,  7.9236e-02,  1.6166e-02,  8.5724e-02,
         4.2377e-02, -5.0247e-02, -1.8402e-02,  4.1446e-02,  2.6510e-02,
         7.1319e-02,  9.3968e-03,  9.6959e-02, -9.1813e-02, -6.8855e-02,
         4.8611e-02,  4.7653e-02, -9.7374e-03, -1.0378e-01, -1.1494e-01,
        -1.1269e-01,  6.1081e-03, -6.9482e-02,  1.0536e-01, -6.3534e-02,
        -1.0501e-01,  1.1241e-01, -8.2134e-02,  4.4802e-02, -6.7119e-02,
         8.6025e-02,  2.6598e-02,  2.0437e-02,  2.8293e-02, -1.9526e-02,
        -4.8351e-02,  9.1006e-02, -9.9581e-02, -1.1004e-01,  2.0572e-02,
        -1.0634e-02, -1.0357e-01, -1.4393e-03,  3.1010e-02, -5.9502e-02,
        -3.1525e-02, -5.7752e-02, -2.2894e-02,  7.3270e-02,  8.1022e-02,
        -1.2416e-01])
tensor([-0.0562, -0.1229,  0.0346, -0.0649,  0.0032,  0.1750,  0.0834,  0.1076,
         0.1649,  0.1721,  0.1164,  0.0058,  0.1802,  0.0254,  0.1499,  0.0340,
         0.0980,  0.1188, -0.0213, -0.0064, -0.0952,  0.1337,  0.1170, -0.0913,
        -0.1269, -0.0717,  0.0116,  0.0279,  0.1029, -0.1295, -0.0425,  0.0195,
         0.0801, -0.1283, -0.0892, -0.1485, -0.1707, -0.1693, -0.0280, -0.1466,
        -0.1180,  0.0424,  0.0867, -0.0954,  0.0388, -0.1308,  0.0354, -0.0556,
        -0.0654, -0.2015, -0.0818, -0.0136, -0.0674, -0.1266, -0.0718, -0.0195,
        -0.0895,  0.0010,  0.0158, -0.0132, -0.2207, -0.0094, -0.0513, -0.0998,
        -0.0794, -0.0135, -0.0131, -0.2001, -0.1282, -0.0555, -0.0867, -0.1936,
        -0.1845,  0.0269, -0.0178, -0.1827, -0.0755, -0.0390,  0.0010, -0.1017,
        -0.1279,  0.0189, -0.1154, -0.0050, -0.0755, -0.0348, -0.1515, -0.1708,
         0.0223, -0.0666, -0.0768, -0.1306, -0.1587, -0.2047, -0.0118, -0.0213,
        -0.1738, -0.0849, -0.0440, -0.0763, -0.1860, -0.0036, -0.1203, -0.1394,
         0.0162, -0.1592,  0.0170, -0.1772, -0.1722, -0.1281, -0.1813, -0.0656,
        -0.0362, -0.0764, -0.0791, -0.0129, -0.0313, -0.0093, -0.0824, -0.0007,
        -0.0484, -0.1324, -0.1227, -0.0359, -0.0709, -0.0264, -0.1058,  0.0153,
        -0.1731, -0.1405, -0.0204, -0.0488, -0.0964, -0.2009, -0.1993, -0.2022,
        -0.0979, -0.1594,  0.0195, -0.1567, -0.2039,  0.0065, -0.1647, -0.0549,
        -0.1470, -0.0084, -0.0736, -0.0797, -0.0531, -0.1039, -0.1548,  0.0059,
        -0.1909, -0.1935, -0.0817, -0.1092, -0.1955, -0.1167, -0.0560, -0.1644,
        -0.1292, -0.1692, -0.1229, -0.0109, -0.0070, -0.2227])
##########################################################
{'prot_encoder.encoder.layers.2.self_attn.in_proj_bias': tensor(0.0036), 'cross_encoder.encoder.layers.0.self_attn.out_proj.bias': tensor(0.0038), 'cross_encoder.encoder.layers.0.norm1.bias': tensor(0.0039), 'smi_encoder.encoder.layers.1.self_attn.out_proj.bias': tensor(0.0040), 'smi_encoder.encoder.layers.0.norm2.bias': tensor(0.0041), 'prot_encoder.encoder.layers.1.norm2.bias': tensor(0.0042), 'prot_encoder.encoder.layers.2.self_attn.out_proj.bias': tensor(0.0042), 'smi_encoder.encoder.layers.2.norm2.bias': tensor(0.0043), 'prot_encoder.encoder.layers.2.norm2.bias': tensor(0.0043), 'smi_encoder.encoder.layers.2.self_attn.out_proj.bias': tensor(0.0044), 'prot_encoder.encoder.layers.1.self_attn.out_proj.bias': tensor(0.0044), 'smi_encoder.encoder.layers.1.norm1.bias': tensor(0.0044), 'prot_encoder.encoder.layers.2.linear2.bias': tensor(0.0045), 'cross_encoder.encoder.layers.0.norm2.bias': tensor(0.0045), 'addnorm.ln.bias': tensor(0.0045), 'prot_encoder.encoder.layers.1.self_attn.in_proj_bias': tensor(0.0045), 'prot_encoder.encoder.layers.1.linear2.bias': tensor(0.0045), 'smi_encoder.encoder.layers.1.norm2.bias': tensor(0.0045), 'smi_encoder.encoder.layers.2.norm1.bias': tensor(0.0046), 'cross_encoder.encoder.layers.1.self_attn.out_proj.bias': tensor(0.0046), 'prot_encoder.encoder.layers.1.norm1.bias': tensor(0.0046), 'smi_encoder.encoder.layers.2.linear2.bias': tensor(0.0046), 'prot_encoder.encoder.layers.2.norm1.bias': tensor(0.0047), 'smi_encoder.encoder.layers.0.linear2.bias': tensor(0.0047), 'cross_encoder.encoder.layers.0.linear2.bias': tensor(0.0047), 'ffn.dense2.bias': tensor(0.0048), 'prot_encoder.encoder.layers.0.self_attn.in_proj_bias': tensor(0.0049), 'prot_encoder.encoder.layers.0.norm1.bias': tensor(0.0050), 'smi_encoder.encoder.layers.1.linear2.bias': tensor(0.0050), 'cross_encoder.encoder.layers.1.norm1.bias': tensor(0.0050), 'prot_encoder.encoder.layers.0.self_attn.out_proj.bias': tensor(0.0051), 'prot_encoder.encoder.layers.0.norm2.bias': tensor(0.0052), 'smi_encoder.encoder.layers.0.self_attn.out_proj.bias': tensor(0.0054), 'smi_encoder.encoder.layers.0.norm1.bias': tensor(0.0055), 'prot_encoder.encoder.layers.0.linear2.bias': tensor(0.0057), 'cross_encoder.encoder.layers.1.self_attn.in_proj_bias': tensor(0.0058), 'smi_encoder.encoder.layers.0.self_attn.in_proj_bias': tensor(0.0062), 'cross_encoder.encoder.layers.1.linear2.bias': tensor(0.0062), 'cross_encoder.encoder.layers.0.self_attn.in_proj_bias': tensor(0.0065), 'decoder.blks.block3.addnorm2.ln.bias': tensor(0.0070), 'decoder.blks.block4.addnorm1.ln.bias': tensor(0.0070), 'prot_encoder.addnorm.ln.bias': tensor(0.0071), 'decoder.blks.block4.addnorm2.ln.bias': tensor(0.0071), 'decoder.blks.block3.addnorm1.ln.bias': tensor(0.0071), 'smi_encoder.encoder.layers.1.linear1.bias': tensor(0.0072), 'decoder.blks.block1.addnorm3.ln.bias': tensor(0.0072), 'cross_encoder.encoder.layers.0.linear1.bias': tensor(0.0073), 'smi_encoder.encoder.layers.2.self_attn.in_proj_bias': tensor(0.0073), 'decoder.blks.block2.addnorm3.ln.bias': tensor(0.0075), 'decoder.blks.block1.addnorm1.ln.bias': tensor(0.0075), 'prot_encoder.ffn.dense2.bias': tensor(0.0076), 'decoder.blks.block3.addnorm3.ln.bias': tensor(0.0077), 'ffn.dense1.bias': tensor(0.0077), 'decoder.blks.block2.addnorm1.ln.bias': tensor(0.0079), 'decoder.blks.block0.addnorm1.ln.bias': tensor(0.0079), 'decoder.blks.block1.addnorm2.ln.bias': tensor(0.0079), 'decoder.blks.block0.addnorm3.ln.bias': tensor(0.0080), 'prot_encoder.encoder.layers.0.self_attn.out_proj.weight': tensor(0.0080), 'decoder.blks.block0.addnorm2.ln.bias': tensor(0.0083), 'decoder.blks.block2.addnorm2.ln.bias': tensor(0.0083), 'smi_encoder.encoder.layers.1.self_attn.in_proj_bias': tensor(0.0084), 'cross_encoder.encoder.layers.0.norm1.weight': tensor(0.0085), 'smi_encoder.embedding.weight': tensor(0.0085), 'decoder.blks.block4.addnorm3.ln.bias': tensor(0.0087), 'prot_encoder.encoder.layers.2.self_attn.out_proj.weight': tensor(0.0087), 'prot_encoder.encoder.layers.1.self_attn.out_proj.weight': tensor(0.0089), 'prot_encoder.encoder.layers.2.linear1.bias': tensor(0.0089), 'cross_encoder.encoder.layers.1.norm1.weight': tensor(0.0090), 'smi_encoder.encoder.layers.0.norm2.weight': tensor(0.0093), 'decoder.blks.block5.addnorm2.ln.bias': tensor(0.0093), 'smi_encoder.encoder.layers.2.linear1.bias': tensor(0.0093), 'prot_encoder.dense.weight': tensor(0.0094), 'addnorm.ln.weight': tensor(0.0095), 'prot_encoder.embedding.weight': tensor(0.0095), 'smi_encoder.encoder.layers.0.linear2.weight': tensor(0.0095), 'cross_encoder.encoder.layers.1.self_attn.out_proj.weight': tensor(0.0096), 'prot_encoder.encoder.layers.1.linear1.bias': tensor(0.0097), 'cross_encoder.encoder.layers.0.norm2.weight': tensor(0.0100), 'decoder.blks.block2.attention2.W_v.weight': tensor(0.0101), 'smi_encoder.encoder.layers.2.self_attn.out_proj.weight': tensor(0.0101), 'prot_encoder.encoder.layers.2.self_attn.in_proj_weight': tensor(0.0102), 'smi_encoder.encoder.layers.0.norm1.weight': tensor(0.0102), 'decoder.blks.block5.addnorm1.ln.bias': tensor(0.0103), 'smi_encoder.encoder.layers.1.linear2.weight': tensor(0.0103), 'cross_encoder.encoder.layers.0.self_attn.out_proj.weight': tensor(0.0103), 'decoder.blks.block3.ffn.dense2.bias': tensor(0.0103), 'decoder.blks.block2.ffn.dense2.bias': tensor(0.0103), 'decoder.blks.block1.ffn.dense2.bias': tensor(0.0104), 'cross_encoder.encoder.layers.1.norm2.bias': tensor(0.0104), 'decoder.blks.block0.ffn.dense2.bias': tensor(0.0105), 'smi_encoder.encoder.layers.1.self_attn.out_proj.weight': tensor(0.0106), 'decoder.blks.block4.ffn.dense2.bias': tensor(0.0107), 'decoder.blks.block4.attention2.W_v.weight': tensor(0.0109), 'smi_encoder.encoder.layers.1.norm2.weight': tensor(0.0109), 'smi_encoder.encoder.layers.1.norm1.weight': tensor(0.0110), 'decoder.embedding.weight': tensor(0.0110), 'decoder.blks.block3.attention2.W_v.weight': tensor(0.0110), 'decoder.blks.block1.attention2.W_v.weight': tensor(0.0110), 'prot_encoder.encoder.layers.2.norm1.weight': tensor(0.0111), 'decoder.blks.block0.attention2.W_v.weight': tensor(0.0112), 'smi_encoder.encoder.layers.2.norm1.weight': tensor(0.0113), 'prot_encoder.encoder.layers.2.norm2.weight': tensor(0.0113), 'smi_encoder.encoder.layers.0.linear1.bias': tensor(0.0115), 'prot_encoder.encoder.layers.0.self_attn.in_proj_weight': tensor(0.0116), 'decoder.blks.block1.attention2.W_o.weight': tensor(0.0117), 'prot_encoder.encoder.layers.1.self_attn.in_proj_weight': tensor(0.0118), 'cross_encoder.encoder.layers.0.linear1.weight': tensor(0.0118), 'prot_encoder.encoder.layers.0.linear1.bias': tensor(0.0120), 'cross_encoder.encoder.layers.1.linear1.bias': tensor(0.0120), 'cross_encoder.encoder.layers.0.linear2.weight': tensor(0.0120), 'smi_encoder.encoder.layers.2.linear2.weight': tensor(0.0120), 'ffn.dense2.weight': tensor(0.0122), 'decoder.blks.block0.attention2.W_o.weight': tensor(0.0124), 'smi_encoder.encoder.layers.0.self_attn.out_proj.weight': tensor(0.0126), 'decoder.blks.block3.attention2.W_o.weight': tensor(0.0128), 'smi_encoder.encoder.layers.0.self_attn.in_proj_weight': tensor(0.0129), 'prot_encoder.ffn.dense1.bias': tensor(0.0130), 'decoder.blks.block2.attention2.W_o.weight': tensor(0.0130), 'decoder.blks.block4.attention2.W_o.weight': tensor(0.0130), 'smi_encoder.encoder.layers.2.norm2.weight': tensor(0.0131), 'decoder.blks.block5.attention2.W_v.weight': tensor(0.0132), 'prot_encoder.encoder.layers.1.norm2.weight': tensor(0.0133), 'smi_encoder.encoder.layers.1.linear1.weight': tensor(0.0133), 'ffn.dense1.weight': tensor(0.0135), 'decoder.blks.block0.ffn.dense1.bias': tensor(0.0137), 'smi_encoder.encoder.layers.0.linear1.weight': tensor(0.0138), 'prot_encoder.encoder.layers.2.linear1.weight': tensor(0.0141), 'decoder.blks.block3.ffn.dense1.bias': tensor(0.0142), 'decoder.blks.block5.ffn.dense1.bias': tensor(0.0144), 'cross_encoder.encoder.layers.0.self_attn.in_proj_weight': tensor(0.0145), 'decoder.blks.block5.ffn.dense2.bias': tensor(0.0145), 'cross_encoder.encoder.layers.1.linear2.weight': tensor(0.0145), 'smi_encoder.encoder.layers.2.self_attn.in_proj_weight': tensor(0.0148), 'cross_encoder.encoder.layers.1.linear1.weight': tensor(0.0149), 'decoder.blks.block4.ffn.dense1.bias': tensor(0.0151), 'prot_encoder.encoder.layers.1.norm1.weight': tensor(0.0151), 'smi_encoder.encoder.layers.1.self_attn.in_proj_weight': tensor(0.0151), 'prot_encoder.encoder.layers.0.linear2.weight': tensor(0.0152), 'smi_encoder.encoder.layers.2.linear1.weight': tensor(0.0152), 'prot_encoder.encoder.layers.1.linear1.weight': tensor(0.0153), 'decoder.blks.block0.attention1.W_q.weight': tensor(0.0154), 'cross_encoder.encoder.layers.1.self_attn.in_proj_weight': tensor(0.0154), 'decoder.blks.block5.attention2.W_o.weight': tensor(0.0158), 'prot_encoder.ffn.dense2.weight': tensor(0.0162), 'decoder.blks.block1.ffn.dense1.bias': tensor(0.0163), 'decoder.blks.block0.attention1.W_k.weight': tensor(0.0167), 'prot_encoder.encoder.layers.2.linear2.weight': tensor(0.0172), 'decoder.blks.block2.addnorm3.ln.weight': tensor(0.0172), 'prot_encoder.encoder.layers.1.linear2.weight': tensor(0.0174), 'decoder.blks.block3.addnorm2.ln.weight': tensor(0.0174), 'prot_encoder.encoder.layers.0.norm2.weight': tensor(0.0176), 'decoder.blks.block0.addnorm3.ln.weight': tensor(0.0177), 'decoder.blks.block1.addnorm2.ln.weight': tensor(0.0177), 'prot_encoder.encoder.layers.0.linear1.weight': tensor(0.0180), 'decoder.blks.block4.addnorm2.ln.weight': tensor(0.0180), 'decoder.blks.block1.addnorm3.ln.weight': tensor(0.0181), 'decoder.blks.block2.ffn.dense1.bias': tensor(0.0181), 'decoder.blks.block2.addnorm2.ln.weight': tensor(0.0186), 'decoder.blks.block0.addnorm2.ln.weight': tensor(0.0187), 'decoder.blks.block1.attention1.W_v.weight': tensor(0.0188), 'decoder.blks.block0.attention1.W_v.weight': tensor(0.0190), 'decoder.blks.block3.attention1.W_v.weight': tensor(0.0191), 'decoder.blks.block1.attention2.W_k.weight': tensor(0.0199), 'decoder.blks.block1.attention1.W_o.weight': tensor(0.0199), 'prot_encoder.ffn.dense1.weight': tensor(0.0201), 'decoder.blks.block3.addnorm3.ln.weight': tensor(0.0201), 'decoder.blks.block0.attention1.W_o.weight': tensor(0.0202), 'decoder.blks.block1.ffn.dense2.weight': tensor(0.0202), 'decoder.blks.block2.attention1.W_v.weight': tensor(0.0202), 'decoder.blks.block2.attention1.W_o.weight': tensor(0.0203), 'decoder.blks.block1.addnorm1.ln.weight': tensor(0.0203), 'decoder.blks.block0.attention2.W_k.weight': tensor(0.0203), 'cross_encoder.encoder.layers.1.norm2.weight': tensor(0.0206), 'decoder.blks.block0.ffn.dense2.weight': tensor(0.0208), 'decoder.blks.block4.attention1.W_v.weight': tensor(0.0210), 'decoder.blks.block1.attention2.W_q.weight': tensor(0.0214), 'decoder.blks.block3.addnorm1.ln.weight': tensor(0.0215), 'decoder.blks.block2.attention2.W_k.weight': tensor(0.0215), 'decoder.blks.block3.attention1.W_o.weight': tensor(0.0218), 'decoder.blks.block4.attention1.W_o.weight': tensor(0.0218), 'decoder.blks.block3.attention2.W_k.weight': tensor(0.0221), 'decoder.blks.block5.attention1.W_v.weight': tensor(0.0226), 'decoder.blks.block3.attention2.W_q.weight': tensor(0.0228), 'prot_encoder.encoder.layers.0.norm1.weight': tensor(0.0228), 'decoder.blks.block0.attention2.W_q.weight': tensor(0.0229), 'prot_encoder.dense.bias': tensor(0.0230), 'decoder.blks.block2.ffn.dense2.weight': tensor(0.0231), 'decoder.blks.block2.addnorm1.ln.weight': tensor(0.0235), 'decoder.blks.block4.addnorm1.ln.weight': tensor(0.0239), 'decoder.blks.block2.attention2.W_q.weight': tensor(0.0241), 'prot_encoder.addnorm.ln.weight': tensor(0.0244), 'decoder.blks.block0.addnorm1.ln.weight': tensor(0.0245), 'decoder.blks.block1.ffn.dense1.weight': tensor(0.0247), 'decoder.blks.block3.ffn.dense1.weight': tensor(0.0249), 'decoder.blks.block5.attention1.W_o.weight': tensor(0.0249), 'decoder.blks.block1.attention1.W_k.weight': tensor(0.0249), 'decoder.blks.block1.attention1.W_q.weight': tensor(0.0250), 'decoder.blks.block3.attention1.W_q.weight': tensor(0.0250), 'decoder.blks.block3.ffn.dense2.weight': tensor(0.0250), 'decoder.blks.block2.attention1.W_k.weight': tensor(0.0251), 'decoder.blks.block0.ffn.dense1.weight': tensor(0.0252), 'decoder.blks.block2.ffn.dense1.weight': tensor(0.0254), 'decoder.blks.block2.attention1.W_q.weight': tensor(0.0258), 'decoder.blks.block4.attention2.W_k.weight': tensor(0.0260), 'decoder.blks.block3.attention1.W_k.weight': tensor(0.0263), 'decoder.blks.block4.attention2.W_q.weight': tensor(0.0265), 'decoder.blks.block4.attention1.W_k.weight': tensor(0.0286), 'decoder.blks.block5.attention2.W_q.weight': tensor(0.0292), 'decoder.blks.block4.attention1.W_q.weight': tensor(0.0298), 'decoder.blks.block4.ffn.dense1.weight': tensor(0.0299), 'decoder.blks.block5.addnorm2.ln.weight': tensor(0.0299), 'decoder.blks.block4.addnorm3.ln.weight': tensor(0.0303), 'decoder.blks.block5.attention2.W_k.weight': tensor(0.0310), 'decoder.blks.block4.ffn.dense2.weight': tensor(0.0321), 'decoder.blks.block5.ffn.dense1.weight': tensor(0.0335), 'decoder.blks.block5.attention1.W_q.weight': tensor(0.0341), 'decoder.blks.block5.addnorm1.ln.weight': tensor(0.0348), 'decoder.blks.block5.attention1.W_k.weight': tensor(0.0348), 'decoder.blks.block5.ffn.dense2.weight': tensor(0.0496), 'decoder.dense.weight': tensor(0.0747), 'decoder.dense.bias': tensor(0.0780), 'decoder.blks.block5.addnorm3.ln.bias': tensor(0.1442), 'decoder.blks.block5.addnorm3.ln.weight': tensor(0.2989)}